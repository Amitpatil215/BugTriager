{
    "_links": {
        "comments": {
            "href": "https://api.github.com/repos/flutter/flutter-intellij/issues/5985/comments"
        },
        "commits": {
            "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985/commits"
        },
        "html": {
            "href": "https://github.com/flutter/flutter-intellij/pull/5985"
        },
        "issue": {
            "href": "https://api.github.com/repos/flutter/flutter-intellij/issues/5985"
        },
        "review_comment": {
            "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments{/number}"
        },
        "review_comments": {
            "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985/comments"
        },
        "self": {
            "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985"
        },
        "statuses": {
            "href": "https://api.github.com/repos/flutter/flutter-intellij/statuses/3d6e2bbd4eba4fd4d85f9584af7e641762834a8d"
        }
    },
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "auto_merge": null,
    "base": {
        "label": "flutter:master",
        "ref": "master",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/flutter/flutter-intellij/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/flutter/flutter-intellij/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/flutter/flutter-intellij/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/flutter/flutter-intellij/branches{/branch}",
            "clone_url": "https://github.com/flutter/flutter-intellij.git",
            "collaborators_url": "https://api.github.com/repos/flutter/flutter-intellij/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/flutter/flutter-intellij/comments{/number}",
            "commits_url": "https://api.github.com/repos/flutter/flutter-intellij/commits{/sha}",
            "compare_url": "https://api.github.com/repos/flutter/flutter-intellij/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/flutter/flutter-intellij/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/flutter/flutter-intellij/contributors",
            "created_at": "2016-07-25T22:31:03Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/flutter/flutter-intellij/deployments",
            "description": "Flutter Plugin for IntelliJ",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/flutter/flutter-intellij/downloads",
            "events_url": "https://api.github.com/repos/flutter/flutter-intellij/events",
            "fork": false,
            "forks": 308,
            "forks_count": 308,
            "forks_url": "https://api.github.com/repos/flutter/flutter-intellij/forks",
            "full_name": "flutter/flutter-intellij",
            "git_commits_url": "https://api.github.com/repos/flutter/flutter-intellij/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/flutter/flutter-intellij/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/flutter/flutter-intellij/git/tags{/sha}",
            "git_url": "git://github.com/flutter/flutter-intellij.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://flutter.dev/using-ide",
            "hooks_url": "https://api.github.com/repos/flutter/flutter-intellij/hooks",
            "html_url": "https://github.com/flutter/flutter-intellij",
            "id": 64172164,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/flutter/flutter-intellij/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/flutter/flutter-intellij/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/flutter/flutter-intellij/issues{/number}",
            "keys_url": "https://api.github.com/repos/flutter/flutter-intellij/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/flutter/flutter-intellij/labels{/name}",
            "language": "Java",
            "languages_url": "https://api.github.com/repos/flutter/flutter-intellij/languages",
            "license": {
                "key": "bsd-3-clause",
                "name": "BSD 3-Clause \"New\" or \"Revised\" License",
                "node_id": "MDc6TGljZW5zZTU=",
                "spdx_id": "BSD-3-Clause",
                "url": "https://api.github.com/licenses/bsd-3-clause"
            },
            "merges_url": "https://api.github.com/repos/flutter/flutter-intellij/merges",
            "milestones_url": "https://api.github.com/repos/flutter/flutter-intellij/milestones{/number}",
            "mirror_url": null,
            "name": "flutter-intellij",
            "node_id": "MDEwOlJlcG9zaXRvcnk2NDE3MjE2NA==",
            "notifications_url": "https://api.github.com/repos/flutter/flutter-intellij/notifications{?since,all,participating}",
            "open_issues": 514,
            "open_issues_count": 514,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/14101776?v=4",
                "events_url": "https://api.github.com/users/flutter/events{/privacy}",
                "followers_url": "https://api.github.com/users/flutter/followers",
                "following_url": "https://api.github.com/users/flutter/following{/other_user}",
                "gists_url": "https://api.github.com/users/flutter/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/flutter",
                "id": 14101776,
                "login": "flutter",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjE0MTAxNzc2",
                "organizations_url": "https://api.github.com/users/flutter/orgs",
                "received_events_url": "https://api.github.com/users/flutter/received_events",
                "repos_url": "https://api.github.com/users/flutter/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/flutter/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/flutter/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/flutter"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls{/number}",
            "pushed_at": "2022-10-03T08:04:48Z",
            "releases_url": "https://api.github.com/repos/flutter/flutter-intellij/releases{/id}",
            "size": 160091,
            "ssh_url": "git@github.com:flutter/flutter-intellij.git",
            "stargazers_count": 1802,
            "stargazers_url": "https://api.github.com/repos/flutter/flutter-intellij/stargazers",
            "statuses_url": "https://api.github.com/repos/flutter/flutter-intellij/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/flutter/flutter-intellij/subscribers",
            "subscription_url": "https://api.github.com/repos/flutter/flutter-intellij/subscription",
            "svn_url": "https://github.com/flutter/flutter-intellij",
            "tags_url": "https://api.github.com/repos/flutter/flutter-intellij/tags",
            "teams_url": "https://api.github.com/repos/flutter/flutter-intellij/teams",
            "topics": [
                "flutter",
                "intellij-plugin",
                "java"
            ],
            "trees_url": "https://api.github.com/repos/flutter/flutter-intellij/git/trees{/sha}",
            "updated_at": "2022-10-03T05:16:49Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij",
            "visibility": "public",
            "watchers": 1802,
            "watchers_count": 1802,
            "web_commit_signoff_required": false
        },
        "sha": "ca0966e730c00f731e181292d9ed18f5c539cd6e",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/14101776?v=4",
            "events_url": "https://api.github.com/users/flutter/events{/privacy}",
            "followers_url": "https://api.github.com/users/flutter/followers",
            "following_url": "https://api.github.com/users/flutter/following{/other_user}",
            "gists_url": "https://api.github.com/users/flutter/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/flutter",
            "id": 14101776,
            "login": "flutter",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE0MTAxNzc2",
            "organizations_url": "https://api.github.com/users/flutter/orgs",
            "received_events_url": "https://api.github.com/users/flutter/received_events",
            "repos_url": "https://api.github.com/users/flutter/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/flutter/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/flutter/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/flutter"
        }
    },
    "body": "Needs testing, and tests. Some basic work is still not done, too.",
    "closed_at": "2022-04-14T16:34:20Z",
    "comment_data": [
        {
            "_links": {
                "html": {
                    "href": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r817056108"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985"
                },
                "self": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/817056108"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "what object is null? Prefer to avoid NPE rather than ever catching them.",
            "commit_id": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "created_at": "2022-03-01T18:59:10Z",
            "diff_hunk": "@@ -0,0 +1,520 @@\n+package io.flutter.analytics;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.dart.server.AnalysisServerListenerAdapter;\n+import com.google.dart.server.RequestListener;\n+import com.google.dart.server.ResponseListener;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.intellij.codeInsight.lookup.LookupEvent;\n+import com.intellij.codeInsight.lookup.LookupListener;\n+import com.intellij.codeInsight.lookup.LookupManager;\n+import com.intellij.codeInsight.lookup.impl.LookupImpl;\n+import com.intellij.openapi.Disposable;\n+import com.intellij.openapi.editor.Editor;\n+import com.intellij.openapi.fileEditor.FileEditorManager;\n+import com.intellij.openapi.fileEditor.FileEditorManagerEvent;\n+import com.intellij.openapi.fileEditor.FileEditorManagerListener;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.util.text.StringUtil;\n+import com.intellij.openapi.vfs.VirtualFile;\n+import com.intellij.psi.PsiFile;\n+import com.jetbrains.lang.dart.analyzer.DartAnalysisServerService;\n+import com.jetbrains.lang.dart.fixes.DartQuickFix;\n+import com.jetbrains.lang.dart.fixes.DartQuickFixListener;\n+import java.beans.PropertyChangeEvent;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import io.flutter.FlutterInitializer;\n+import io.flutter.utils.FileUtils;\n+import org.dartlang.analysis.server.protocol.AnalysisError;\n+import org.dartlang.analysis.server.protocol.AnalysisErrorType;\n+import org.dartlang.analysis.server.protocol.AnalysisStatus;\n+import org.dartlang.analysis.server.protocol.AvailableSuggestionSet;\n+import org.dartlang.analysis.server.protocol.ClosingLabel;\n+import org.dartlang.analysis.server.protocol.CompletionSuggestion;\n+import org.dartlang.analysis.server.protocol.HighlightRegion;\n+import org.dartlang.analysis.server.protocol.ImplementedClass;\n+import org.dartlang.analysis.server.protocol.ImplementedMember;\n+import org.dartlang.analysis.server.protocol.IncludedSuggestionRelevanceTag;\n+import org.dartlang.analysis.server.protocol.IncludedSuggestionSet;\n+import org.dartlang.analysis.server.protocol.NavigationRegion;\n+import org.dartlang.analysis.server.protocol.Occurrences;\n+import org.dartlang.analysis.server.protocol.Outline;\n+import org.dartlang.analysis.server.protocol.OverrideMember;\n+import org.dartlang.analysis.server.protocol.PubStatus;\n+import org.dartlang.analysis.server.protocol.RequestError;\n+import org.dartlang.analysis.server.protocol.SearchResult;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+public final class FlutterAnalysisServerListener extends AnalysisServerListenerAdapter\n+  implements Disposable {\n+  // statics\n+  static final String COMPUTED_ERROR = \"computedError\";\n+  static final String INITIAL_COMPUTE_ERRORS_TIME = \"initialComputeErrorsTime\";\n+  static final String INITIAL_HIGHLIGHTS_TIME = \"initialHighlightsTime\";\n+  static final String INITIAL_OUTLINE_TIME = \"initialOutlineTime\";\n+  static final String ROUND_TRIP_TIME = \"roundTripTime\";\n+  static final String QUICK_FIX = \"quickFix\";\n+  static final String UNKNOWN_LOOKUP_STRING = \"<unknown>\";\n+  static final String ANALYSIS_SERVER_LOG = \"analysisServerLog\";\n+  static final String ACCEPTED_COMPLETION = \"acceptedCompletion\";\n+  static final String REJECTED_COMPLETION = \"rejectedCompletion\";\n+  static final String E2E_IJ_COMPLETION_TIME = \"e2eIJCompletionTime\";\n+  static final String DURATION = \"duration\";\n+  static final String FAILURE = \"failure\";\n+  static final String SUCCESS = \"success\";\n+  static final String ERROR_TYPE_REQUEST = \"R\";\n+  static final String ERROR_TYPE_SERVER = \"@\";\n+\n+  static final String DAS_STATUS_EVENT_TYPE = \"analysisServerStatus\";\n+  static final String IS_BLAZE_SYNC_SUCCESSFUL = \"isBlazeSyncSuccessful\";\n+  static final String IS_DART_ACTIVE_LANG = \"isDartActiveLang\";\n+  static final String IS_DART_ONLY_ACTIVE_LANG = \"isDartOnlyActiveLang\";\n+  static final String IS_DART_WORKSPACE_TYPE = \"isDartWorkspaceType\";\n+  static final String IS_DERIVE_TARGETS_ENABLED = \"isDeriveTargetsEnabled\";\n+  static final String[] ERROR_TYPES =\n+    new String[] {\n+      AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR,\n+      AnalysisErrorType.COMPILE_TIME_ERROR,\n+      AnalysisErrorType.HINT,\n+      AnalysisErrorType.LINT,\n+      AnalysisErrorType.STATIC_TYPE_WARNING,\n+      AnalysisErrorType.STATIC_WARNING,\n+      AnalysisErrorType.SYNTACTIC_ERROR\n+    };\n+\n+  static final String LOG_ENTRY_KIND = \"kind\";\n+  static final String LOG_ENTRY_TIME = \"time\";\n+  static final String LOG_ENTRY_DATA = \"data\";\n+  static final String LOG_ENTRY_SDK_VERSION = \"sdkVersion\";\n+\n+  // variables to throttle certain, high frequency events\n+  private static final int COMPUTED_ERROR_SAMPLE_RATE = 100;\n+  private static final Duration INTERVAL_TO_REPORT_MEMORY_USAGE = Duration.ofHours(1);\n+  final RequestListener requestListener;\n+  final ResponseListener responseListener;\n+  final DartQuickFixListener quickFixListener;\n+  // instance members\n+  private final Project project;\n+  //private final LoggingService loggingService;\n+  private final Map<String, List<AnalysisError>> pathToErrors;\n+  private final Map<String, Instant> pathToErrorTimestamps;\n+  private final Map<String, Instant> pathToHighlightTimestamps;\n+  private final Map<String, Instant> pathToOutlineTimestamps;\n+  private final Map<String, RequestDetails> requestToDetails;\n+  FileEditorManagerListener fileEditorManagerListener;\n+  LookupSelectionHandler lookupSelectionHandler;\n+  private int computedErrorCounter = 0;\n+  private Instant nextMemoryUsageLoggedInstant = Instant.EPOCH;\n+\n+  FlutterAnalysisServerListener(@NotNull Project project, DartAnalysisServerService analysisServer) {\n+    this.project = project;\n+    this.pathToErrors = new HashMap<>();\n+    this.pathToErrorTimestamps = new HashMap<>();\n+    this.pathToHighlightTimestamps = new HashMap<>();\n+    this.pathToOutlineTimestamps = new HashMap<>();\n+    this.requestToDetails = new HashMap<>();\n+    try {\n+      LookupManager.getInstance(project).addPropertyChangeListener(this::onPropertyChange);\n+    } catch (NullPointerException e) {",
            "html_url": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r817056108",
            "id": 817056108,
            "line": null,
            "node_id": "PRRC_kwDOA9MwhM4ws0ls",
            "original_commit_id": "1abb722aaecd1852e19af40ead4a5cb3a87ee066",
            "original_line": 129,
            "original_position": 129,
            "original_start_line": null,
            "path": "flutter-idea/src/io/flutter/analytics/FlutterAnalysisServerListener.java",
            "position": null,
            "pull_request_review_id": 896704570,
            "pull_request_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/817056108/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-03-01T18:59:10Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/817056108",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1226812?v=4",
                "events_url": "https://api.github.com/users/jacob314/events{/privacy}",
                "followers_url": "https://api.github.com/users/jacob314/followers",
                "following_url": "https://api.github.com/users/jacob314/following{/other_user}",
                "gists_url": "https://api.github.com/users/jacob314/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jacob314",
                "id": 1226812,
                "login": "jacob314",
                "node_id": "MDQ6VXNlcjEyMjY4MTI=",
                "organizations_url": "https://api.github.com/users/jacob314/orgs",
                "received_events_url": "https://api.github.com/users/jacob314/received_events",
                "repos_url": "https://api.github.com/users/jacob314/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jacob314/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jacob314/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jacob314"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r817067999"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985"
                },
                "self": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/817067999"
                }
            },
            "author_association": "MEMBER",
            "body": "`LookupManager.getInstance(project)` could be null. I think that only happens during unit tests and it would be better to explicitly check if we're running tests. I'll change it.",
            "commit_id": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "created_at": "2022-03-01T19:16:53Z",
            "diff_hunk": "@@ -0,0 +1,520 @@\n+package io.flutter.analytics;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.dart.server.AnalysisServerListenerAdapter;\n+import com.google.dart.server.RequestListener;\n+import com.google.dart.server.ResponseListener;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.intellij.codeInsight.lookup.LookupEvent;\n+import com.intellij.codeInsight.lookup.LookupListener;\n+import com.intellij.codeInsight.lookup.LookupManager;\n+import com.intellij.codeInsight.lookup.impl.LookupImpl;\n+import com.intellij.openapi.Disposable;\n+import com.intellij.openapi.editor.Editor;\n+import com.intellij.openapi.fileEditor.FileEditorManager;\n+import com.intellij.openapi.fileEditor.FileEditorManagerEvent;\n+import com.intellij.openapi.fileEditor.FileEditorManagerListener;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.util.text.StringUtil;\n+import com.intellij.openapi.vfs.VirtualFile;\n+import com.intellij.psi.PsiFile;\n+import com.jetbrains.lang.dart.analyzer.DartAnalysisServerService;\n+import com.jetbrains.lang.dart.fixes.DartQuickFix;\n+import com.jetbrains.lang.dart.fixes.DartQuickFixListener;\n+import java.beans.PropertyChangeEvent;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import io.flutter.FlutterInitializer;\n+import io.flutter.utils.FileUtils;\n+import org.dartlang.analysis.server.protocol.AnalysisError;\n+import org.dartlang.analysis.server.protocol.AnalysisErrorType;\n+import org.dartlang.analysis.server.protocol.AnalysisStatus;\n+import org.dartlang.analysis.server.protocol.AvailableSuggestionSet;\n+import org.dartlang.analysis.server.protocol.ClosingLabel;\n+import org.dartlang.analysis.server.protocol.CompletionSuggestion;\n+import org.dartlang.analysis.server.protocol.HighlightRegion;\n+import org.dartlang.analysis.server.protocol.ImplementedClass;\n+import org.dartlang.analysis.server.protocol.ImplementedMember;\n+import org.dartlang.analysis.server.protocol.IncludedSuggestionRelevanceTag;\n+import org.dartlang.analysis.server.protocol.IncludedSuggestionSet;\n+import org.dartlang.analysis.server.protocol.NavigationRegion;\n+import org.dartlang.analysis.server.protocol.Occurrences;\n+import org.dartlang.analysis.server.protocol.Outline;\n+import org.dartlang.analysis.server.protocol.OverrideMember;\n+import org.dartlang.analysis.server.protocol.PubStatus;\n+import org.dartlang.analysis.server.protocol.RequestError;\n+import org.dartlang.analysis.server.protocol.SearchResult;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+public final class FlutterAnalysisServerListener extends AnalysisServerListenerAdapter\n+  implements Disposable {\n+  // statics\n+  static final String COMPUTED_ERROR = \"computedError\";\n+  static final String INITIAL_COMPUTE_ERRORS_TIME = \"initialComputeErrorsTime\";\n+  static final String INITIAL_HIGHLIGHTS_TIME = \"initialHighlightsTime\";\n+  static final String INITIAL_OUTLINE_TIME = \"initialOutlineTime\";\n+  static final String ROUND_TRIP_TIME = \"roundTripTime\";\n+  static final String QUICK_FIX = \"quickFix\";\n+  static final String UNKNOWN_LOOKUP_STRING = \"<unknown>\";\n+  static final String ANALYSIS_SERVER_LOG = \"analysisServerLog\";\n+  static final String ACCEPTED_COMPLETION = \"acceptedCompletion\";\n+  static final String REJECTED_COMPLETION = \"rejectedCompletion\";\n+  static final String E2E_IJ_COMPLETION_TIME = \"e2eIJCompletionTime\";\n+  static final String DURATION = \"duration\";\n+  static final String FAILURE = \"failure\";\n+  static final String SUCCESS = \"success\";\n+  static final String ERROR_TYPE_REQUEST = \"R\";\n+  static final String ERROR_TYPE_SERVER = \"@\";\n+\n+  static final String DAS_STATUS_EVENT_TYPE = \"analysisServerStatus\";\n+  static final String IS_BLAZE_SYNC_SUCCESSFUL = \"isBlazeSyncSuccessful\";\n+  static final String IS_DART_ACTIVE_LANG = \"isDartActiveLang\";\n+  static final String IS_DART_ONLY_ACTIVE_LANG = \"isDartOnlyActiveLang\";\n+  static final String IS_DART_WORKSPACE_TYPE = \"isDartWorkspaceType\";\n+  static final String IS_DERIVE_TARGETS_ENABLED = \"isDeriveTargetsEnabled\";\n+  static final String[] ERROR_TYPES =\n+    new String[] {\n+      AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR,\n+      AnalysisErrorType.COMPILE_TIME_ERROR,\n+      AnalysisErrorType.HINT,\n+      AnalysisErrorType.LINT,\n+      AnalysisErrorType.STATIC_TYPE_WARNING,\n+      AnalysisErrorType.STATIC_WARNING,\n+      AnalysisErrorType.SYNTACTIC_ERROR\n+    };\n+\n+  static final String LOG_ENTRY_KIND = \"kind\";\n+  static final String LOG_ENTRY_TIME = \"time\";\n+  static final String LOG_ENTRY_DATA = \"data\";\n+  static final String LOG_ENTRY_SDK_VERSION = \"sdkVersion\";\n+\n+  // variables to throttle certain, high frequency events\n+  private static final int COMPUTED_ERROR_SAMPLE_RATE = 100;\n+  private static final Duration INTERVAL_TO_REPORT_MEMORY_USAGE = Duration.ofHours(1);\n+  final RequestListener requestListener;\n+  final ResponseListener responseListener;\n+  final DartQuickFixListener quickFixListener;\n+  // instance members\n+  private final Project project;\n+  //private final LoggingService loggingService;\n+  private final Map<String, List<AnalysisError>> pathToErrors;\n+  private final Map<String, Instant> pathToErrorTimestamps;\n+  private final Map<String, Instant> pathToHighlightTimestamps;\n+  private final Map<String, Instant> pathToOutlineTimestamps;\n+  private final Map<String, RequestDetails> requestToDetails;\n+  FileEditorManagerListener fileEditorManagerListener;\n+  LookupSelectionHandler lookupSelectionHandler;\n+  private int computedErrorCounter = 0;\n+  private Instant nextMemoryUsageLoggedInstant = Instant.EPOCH;\n+\n+  FlutterAnalysisServerListener(@NotNull Project project, DartAnalysisServerService analysisServer) {\n+    this.project = project;\n+    this.pathToErrors = new HashMap<>();\n+    this.pathToErrorTimestamps = new HashMap<>();\n+    this.pathToHighlightTimestamps = new HashMap<>();\n+    this.pathToOutlineTimestamps = new HashMap<>();\n+    this.requestToDetails = new HashMap<>();\n+    try {\n+      LookupManager.getInstance(project).addPropertyChangeListener(this::onPropertyChange);\n+    } catch (NullPointerException e) {",
            "html_url": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r817067999",
            "id": 817067999,
            "in_reply_to_id": 817056108,
            "line": null,
            "node_id": "PRRC_kwDOA9MwhM4ws3ff",
            "original_commit_id": "1abb722aaecd1852e19af40ead4a5cb3a87ee066",
            "original_line": 129,
            "original_position": 129,
            "original_start_line": null,
            "path": "flutter-idea/src/io/flutter/analytics/FlutterAnalysisServerListener.java",
            "position": null,
            "pull_request_review_id": 896721184,
            "pull_request_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/817067999/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-03-01T19:16:53Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/817067999",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r835525846"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985"
                },
                "self": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/835525846"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "is this getting called for every file in a project?\r\nIf it is called for more than each root path, I'm concerned we are logging too much. ",
            "commit_id": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "created_at": "2022-03-25T18:38:33Z",
            "diff_hunk": "@@ -0,0 +1,521 @@\n+package io.flutter.analytics;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.dart.server.AnalysisServerListenerAdapter;\n+import com.google.dart.server.RequestListener;\n+import com.google.dart.server.ResponseListener;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.intellij.codeInsight.lookup.LookupEvent;\n+import com.intellij.codeInsight.lookup.LookupListener;\n+import com.intellij.codeInsight.lookup.LookupManager;\n+import com.intellij.codeInsight.lookup.impl.LookupImpl;\n+import com.intellij.openapi.Disposable;\n+import com.intellij.openapi.application.ApplicationManager;\n+import com.intellij.openapi.editor.Editor;\n+import com.intellij.openapi.fileEditor.FileEditorManager;\n+import com.intellij.openapi.fileEditor.FileEditorManagerEvent;\n+import com.intellij.openapi.fileEditor.FileEditorManagerListener;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.util.text.StringUtil;\n+import com.intellij.openapi.vfs.VirtualFile;\n+import com.intellij.psi.PsiFile;\n+import com.jetbrains.lang.dart.analyzer.DartAnalysisServerService;\n+import com.jetbrains.lang.dart.fixes.DartQuickFix;\n+import com.jetbrains.lang.dart.fixes.DartQuickFixListener;\n+import io.flutter.FlutterInitializer;\n+import io.flutter.utils.FileUtils;\n+import org.dartlang.analysis.server.protocol.*;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.beans.PropertyChangeEvent;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+@SuppressWarnings(\"LocalCanBeFinal\")\n+public final class FlutterAnalysisServerListener extends AnalysisServerListenerAdapter implements Disposable {\n+  // statics\n+  static final String COMPUTED_ERROR = \"computedError\";\n+  static final String INITIAL_COMPUTE_ERRORS_TIME = \"initialComputeErrorsTime\";\n+  static final String INITIAL_HIGHLIGHTS_TIME = \"initialHighlightsTime\";\n+  static final String INITIAL_OUTLINE_TIME = \"initialOutlineTime\";\n+  static final String ROUND_TRIP_TIME = \"roundTripTime\";\n+  static final String QUICK_FIX = \"quickFix\";\n+  static final String UNKNOWN_LOOKUP_STRING = \"<unknown>\";\n+  static final String ANALYSIS_SERVER_LOG = \"analysisServerLog\";\n+  static final String ACCEPTED_COMPLETION = \"acceptedCompletion\";\n+  static final String REJECTED_COMPLETION = \"rejectedCompletion\";\n+  static final String E2E_IJ_COMPLETION_TIME = \"e2eIJCompletionTime\";\n+  static final String ERRORS = \"errors\";\n+  static final String WARNINGS = \"warnings\";\n+  static final String HINTS = \"hints\";\n+  static final String LINTS = \"lints\";\n+  static final String DURATION = \"duration\";\n+  static final String FAILURE = \"failure\";\n+  static final String SUCCESS = \"success\";\n+  static final String ERROR_TYPE_REQUEST = \"R\";\n+  static final String ERROR_TYPE_SERVER = \"@\";\n+\n+  static final String DAS_STATUS_EVENT_TYPE = \"analysisServerStatus\";\n+  static final String[] ERROR_TYPES = new String[]{\n+    AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR,\n+    AnalysisErrorType.COMPILE_TIME_ERROR,\n+    AnalysisErrorType.HINT,\n+    AnalysisErrorType.LINT,\n+    AnalysisErrorType.STATIC_TYPE_WARNING,\n+    AnalysisErrorType.STATIC_WARNING,\n+    AnalysisErrorType.SYNTACTIC_ERROR\n+  };\n+\n+  static final String LOG_ENTRY_KIND = \"kind\";\n+  static final String LOG_ENTRY_TIME = \"time\";\n+  static final String LOG_ENTRY_DATA = \"data\";\n+  static final String LOG_ENTRY_SDK_VERSION = \"sdkVersion\";\n+\n+  // variables to throttle certain, high frequency events\n+  private static final int COMPUTED_ERROR_SAMPLE_RATE = 100;\n+  @SuppressWarnings(\"ConstantConditions\")\n+  @NotNull private static final Duration INTERVAL_TO_REPORT_MEMORY_USAGE = Duration.ofHours(1);\n+  @NotNull final RequestListener requestListener;\n+  @NotNull final ResponseListener responseListener;\n+  @NotNull final DartQuickFixListener quickFixListener;\n+  // instance members\n+  @NotNull private final Project project;\n+  @NotNull private final Map<String, List<AnalysisError>> pathToErrors;\n+  @NotNull private final Map<String, Instant> pathToErrorTimestamps;\n+  @NotNull private final Map<String, Instant> pathToHighlightTimestamps;\n+  @NotNull private final Map<String, Instant> pathToOutlineTimestamps;\n+  @NotNull private final Map<String, RequestDetails> requestToDetails;\n+  @NotNull private final FileEditorManagerListener fileEditorManagerListener;\n+  LookupSelectionHandler lookupSelectionHandler;\n+  private int computedErrorCounter = 0;\n+  @NotNull private Instant nextMemoryUsageLoggedInstant = Instant.EPOCH;\n+\n+  FlutterAnalysisServerListener(@NotNull Project project) {\n+    this.project = project;\n+    this.pathToErrors = new HashMap<>();\n+    this.pathToErrorTimestamps = new HashMap<>();\n+    this.pathToHighlightTimestamps = new HashMap<>();\n+    this.pathToOutlineTimestamps = new HashMap<>();\n+    this.requestToDetails = new HashMap<>();\n+    LookupManager.getInstance(project).addPropertyChangeListener(this::onPropertyChange);\n+\n+    this.fileEditorManagerListener = new FileEditorManagerListener() {\n+      @Override\n+      public void fileOpened(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n+        // Record the time that this file was opened so that we'll be able to log\n+        // relative timings for errors, highlights, outlines, etc.\n+        String filePath = file.getPath();\n+        Instant nowInstant = Instant.now();\n+        pathToErrorTimestamps.put(filePath, nowInstant);\n+        pathToHighlightTimestamps.put(filePath, nowInstant);\n+        pathToOutlineTimestamps.put(filePath, nowInstant);\n+      }\n+\n+      @Override\n+      public void selectionChanged(@NotNull FileEditorManagerEvent event) {\n+      }\n+\n+      @Override\n+      public void fileClosed(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n+      }\n+    };\n+    project.getMessageBus().connect().subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER, fileEditorManagerListener);\n+    this.quickFixListener = new QuickFixListener();\n+    this.requestListener = new FlutterRequestListener();\n+    this.responseListener = new FlutterResponseListener();\n+    DartAnalysisServerService analysisServer = DartAnalysisServerService.getInstance(project);\n+    analysisServer.setServerLogSubscription(true);\n+    analysisServer.addQuickFixListener(this.quickFixListener);\n+    analysisServer.addRequestListener(this.requestListener);\n+    analysisServer.addResponseListener(this.responseListener);\n+  }\n+\n+  @NotNull\n+  public static FlutterAnalysisServerListener getInstance(@NotNull final Project project) {\n+    return Objects.requireNonNull(project.getService(FlutterAnalysisServerListener.class));\n+  }\n+\n+  @NotNull\n+  private static String safelyGetString(JsonObject jsonObject, String memberName) {\n+    if (jsonObject != null && StringUtil.isNotEmpty(memberName)) {\n+      JsonElement jsonElement = jsonObject.get(memberName);\n+      if (jsonElement != null) {\n+        return Objects.requireNonNull(jsonElement.getAsString());\n+      }\n+    }\n+    return \"\";\n+  }\n+\n+  @Override\n+  public void dispose() {\n+    // This is deprecated and marked for removal in 2021.3. If it is removed we will\n+    // have to do some funny stuff to support older versions of Android Studio.\n+    LookupManager.getInstance(project).removePropertyChangeListener(this::onPropertyChange);\n+  }\n+\n+  @Override\n+  public void computedAnalyzedFiles(List<String> list) {\n+  }\n+\n+  @Override\n+  public void computedAvailableSuggestions(@NotNull List<AvailableSuggestionSet> list, int[] ints) {\n+  }\n+\n+  @Override\n+  public void computedCompletion(String completionId,\n+                                 int replacementOffset,\n+                                 int replacementLength,\n+                                 List<CompletionSuggestion> completionSuggestions,\n+                                 List<IncludedSuggestionSet> includedSuggestionSets,\n+                                 List<String> includedElementKinds,\n+                                 List<IncludedSuggestionRelevanceTag> includedSuggestionRelevanceTags,\n+                                 boolean isLast,\n+                                 String libraryFilePathSD) {\n+  }\n+\n+  @Override\n+  public void computedErrors(String path, List<AnalysisError> list) {",
            "html_url": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r835525846",
            "id": 835525846,
            "line": 203,
            "node_id": "PRRC_kwDOA9MwhM4xzRzW",
            "original_commit_id": "1cea9a46645ac63344af583ece3e3c0a1825eb3b",
            "original_line": 203,
            "original_position": 183,
            "original_start_line": null,
            "path": "flutter-idea/src/io/flutter/analytics/FlutterAnalysisServerListener.java",
            "position": 203,
            "pull_request_review_id": 922018280,
            "pull_request_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/835525846/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-03-25T18:38:33Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/835525846",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1226812?v=4",
                "events_url": "https://api.github.com/users/jacob314/events{/privacy}",
                "followers_url": "https://api.github.com/users/jacob314/followers",
                "following_url": "https://api.github.com/users/jacob314/following{/other_user}",
                "gists_url": "https://api.github.com/users/jacob314/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jacob314",
                "id": 1226812,
                "login": "jacob314",
                "node_id": "MDQ6VXNlcjEyMjY4MTI=",
                "organizations_url": "https://api.github.com/users/jacob314/orgs",
                "received_events_url": "https://api.github.com/users/jacob314/received_events",
                "repos_url": "https://api.github.com/users/jacob314/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jacob314/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jacob314/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jacob314"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r835532627"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985"
                },
                "self": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/835532627"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "I'm concerned this is logging too much. If you have 10,000 errors, we are still trying to log 100 events.\r\nWhat are we trying to achieve by logging the error codes?",
            "commit_id": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "created_at": "2022-03-25T18:48:53Z",
            "diff_hunk": "@@ -0,0 +1,521 @@\n+package io.flutter.analytics;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.dart.server.AnalysisServerListenerAdapter;\n+import com.google.dart.server.RequestListener;\n+import com.google.dart.server.ResponseListener;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.intellij.codeInsight.lookup.LookupEvent;\n+import com.intellij.codeInsight.lookup.LookupListener;\n+import com.intellij.codeInsight.lookup.LookupManager;\n+import com.intellij.codeInsight.lookup.impl.LookupImpl;\n+import com.intellij.openapi.Disposable;\n+import com.intellij.openapi.application.ApplicationManager;\n+import com.intellij.openapi.editor.Editor;\n+import com.intellij.openapi.fileEditor.FileEditorManager;\n+import com.intellij.openapi.fileEditor.FileEditorManagerEvent;\n+import com.intellij.openapi.fileEditor.FileEditorManagerListener;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.util.text.StringUtil;\n+import com.intellij.openapi.vfs.VirtualFile;\n+import com.intellij.psi.PsiFile;\n+import com.jetbrains.lang.dart.analyzer.DartAnalysisServerService;\n+import com.jetbrains.lang.dart.fixes.DartQuickFix;\n+import com.jetbrains.lang.dart.fixes.DartQuickFixListener;\n+import io.flutter.FlutterInitializer;\n+import io.flutter.utils.FileUtils;\n+import org.dartlang.analysis.server.protocol.*;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.beans.PropertyChangeEvent;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+@SuppressWarnings(\"LocalCanBeFinal\")\n+public final class FlutterAnalysisServerListener extends AnalysisServerListenerAdapter implements Disposable {\n+  // statics\n+  static final String COMPUTED_ERROR = \"computedError\";\n+  static final String INITIAL_COMPUTE_ERRORS_TIME = \"initialComputeErrorsTime\";\n+  static final String INITIAL_HIGHLIGHTS_TIME = \"initialHighlightsTime\";\n+  static final String INITIAL_OUTLINE_TIME = \"initialOutlineTime\";\n+  static final String ROUND_TRIP_TIME = \"roundTripTime\";\n+  static final String QUICK_FIX = \"quickFix\";\n+  static final String UNKNOWN_LOOKUP_STRING = \"<unknown>\";\n+  static final String ANALYSIS_SERVER_LOG = \"analysisServerLog\";\n+  static final String ACCEPTED_COMPLETION = \"acceptedCompletion\";\n+  static final String REJECTED_COMPLETION = \"rejectedCompletion\";\n+  static final String E2E_IJ_COMPLETION_TIME = \"e2eIJCompletionTime\";\n+  static final String ERRORS = \"errors\";\n+  static final String WARNINGS = \"warnings\";\n+  static final String HINTS = \"hints\";\n+  static final String LINTS = \"lints\";\n+  static final String DURATION = \"duration\";\n+  static final String FAILURE = \"failure\";\n+  static final String SUCCESS = \"success\";\n+  static final String ERROR_TYPE_REQUEST = \"R\";\n+  static final String ERROR_TYPE_SERVER = \"@\";\n+\n+  static final String DAS_STATUS_EVENT_TYPE = \"analysisServerStatus\";\n+  static final String[] ERROR_TYPES = new String[]{\n+    AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR,\n+    AnalysisErrorType.COMPILE_TIME_ERROR,\n+    AnalysisErrorType.HINT,\n+    AnalysisErrorType.LINT,\n+    AnalysisErrorType.STATIC_TYPE_WARNING,\n+    AnalysisErrorType.STATIC_WARNING,\n+    AnalysisErrorType.SYNTACTIC_ERROR\n+  };\n+\n+  static final String LOG_ENTRY_KIND = \"kind\";\n+  static final String LOG_ENTRY_TIME = \"time\";\n+  static final String LOG_ENTRY_DATA = \"data\";\n+  static final String LOG_ENTRY_SDK_VERSION = \"sdkVersion\";\n+\n+  // variables to throttle certain, high frequency events\n+  private static final int COMPUTED_ERROR_SAMPLE_RATE = 100;\n+  @SuppressWarnings(\"ConstantConditions\")\n+  @NotNull private static final Duration INTERVAL_TO_REPORT_MEMORY_USAGE = Duration.ofHours(1);\n+  @NotNull final RequestListener requestListener;\n+  @NotNull final ResponseListener responseListener;\n+  @NotNull final DartQuickFixListener quickFixListener;\n+  // instance members\n+  @NotNull private final Project project;\n+  @NotNull private final Map<String, List<AnalysisError>> pathToErrors;\n+  @NotNull private final Map<String, Instant> pathToErrorTimestamps;\n+  @NotNull private final Map<String, Instant> pathToHighlightTimestamps;\n+  @NotNull private final Map<String, Instant> pathToOutlineTimestamps;\n+  @NotNull private final Map<String, RequestDetails> requestToDetails;\n+  @NotNull private final FileEditorManagerListener fileEditorManagerListener;\n+  LookupSelectionHandler lookupSelectionHandler;\n+  private int computedErrorCounter = 0;\n+  @NotNull private Instant nextMemoryUsageLoggedInstant = Instant.EPOCH;\n+\n+  FlutterAnalysisServerListener(@NotNull Project project) {\n+    this.project = project;\n+    this.pathToErrors = new HashMap<>();\n+    this.pathToErrorTimestamps = new HashMap<>();\n+    this.pathToHighlightTimestamps = new HashMap<>();\n+    this.pathToOutlineTimestamps = new HashMap<>();\n+    this.requestToDetails = new HashMap<>();\n+    LookupManager.getInstance(project).addPropertyChangeListener(this::onPropertyChange);\n+\n+    this.fileEditorManagerListener = new FileEditorManagerListener() {\n+      @Override\n+      public void fileOpened(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n+        // Record the time that this file was opened so that we'll be able to log\n+        // relative timings for errors, highlights, outlines, etc.\n+        String filePath = file.getPath();\n+        Instant nowInstant = Instant.now();\n+        pathToErrorTimestamps.put(filePath, nowInstant);\n+        pathToHighlightTimestamps.put(filePath, nowInstant);\n+        pathToOutlineTimestamps.put(filePath, nowInstant);\n+      }\n+\n+      @Override\n+      public void selectionChanged(@NotNull FileEditorManagerEvent event) {\n+      }\n+\n+      @Override\n+      public void fileClosed(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n+      }\n+    };\n+    project.getMessageBus().connect().subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER, fileEditorManagerListener);\n+    this.quickFixListener = new QuickFixListener();\n+    this.requestListener = new FlutterRequestListener();\n+    this.responseListener = new FlutterResponseListener();\n+    DartAnalysisServerService analysisServer = DartAnalysisServerService.getInstance(project);\n+    analysisServer.setServerLogSubscription(true);\n+    analysisServer.addQuickFixListener(this.quickFixListener);\n+    analysisServer.addRequestListener(this.requestListener);\n+    analysisServer.addResponseListener(this.responseListener);\n+  }\n+\n+  @NotNull\n+  public static FlutterAnalysisServerListener getInstance(@NotNull final Project project) {\n+    return Objects.requireNonNull(project.getService(FlutterAnalysisServerListener.class));\n+  }\n+\n+  @NotNull\n+  private static String safelyGetString(JsonObject jsonObject, String memberName) {\n+    if (jsonObject != null && StringUtil.isNotEmpty(memberName)) {\n+      JsonElement jsonElement = jsonObject.get(memberName);\n+      if (jsonElement != null) {\n+        return Objects.requireNonNull(jsonElement.getAsString());\n+      }\n+    }\n+    return \"\";\n+  }\n+\n+  @Override\n+  public void dispose() {\n+    // This is deprecated and marked for removal in 2021.3. If it is removed we will\n+    // have to do some funny stuff to support older versions of Android Studio.\n+    LookupManager.getInstance(project).removePropertyChangeListener(this::onPropertyChange);\n+  }\n+\n+  @Override\n+  public void computedAnalyzedFiles(List<String> list) {\n+  }\n+\n+  @Override\n+  public void computedAvailableSuggestions(@NotNull List<AvailableSuggestionSet> list, int[] ints) {\n+  }\n+\n+  @Override\n+  public void computedCompletion(String completionId,\n+                                 int replacementOffset,\n+                                 int replacementLength,\n+                                 List<CompletionSuggestion> completionSuggestions,\n+                                 List<IncludedSuggestionSet> includedSuggestionSets,\n+                                 List<String> includedElementKinds,\n+                                 List<IncludedSuggestionRelevanceTag> includedSuggestionRelevanceTags,\n+                                 boolean isLast,\n+                                 String libraryFilePathSD) {\n+  }\n+\n+  @Override\n+  public void computedErrors(String path, List<AnalysisError> list) {\n+    assert list != null;\n+    list.forEach(this::logAnalysisError);\n+    pathToErrors.put(path, list);\n+    assert path != null;\n+    maybeLogInitialAnalysisTime(INITIAL_COMPUTE_ERRORS_TIME, path, pathToErrorTimestamps);\n+  }\n+\n+  @NotNull\n+  public List<AnalysisError> getAnalysisErrorsForFile(String path) {\n+    if (path == null) {\n+      return AnalysisError.EMPTY_LIST;\n+    }\n+    return Objects.requireNonNull(pathToErrors.getOrDefault(path, AnalysisError.EMPTY_LIST));\n+  }\n+\n+  /**\n+   * Iterate through all files in this {@link Project}, counting how many of each {@link\n+   * AnalysisErrorType} is in each file. The returned {@link HashMap} will contain the set of String\n+   * keys in ERROR_TYPES and values with the mentioned sums, converted to Strings.\n+   */\n+  @NotNull\n+  private HashMap<String, Integer> getTotalAnalysisErrorCounts() {\n+    // Create a zero-filled array of length ERROR_TYPES.length.\n+    int[] errorCountsArray = new int[ERROR_TYPES.length];\n+\n+    // Iterate through each file in this project.\n+    for (String keyPath : pathToErrors.keySet()) {\n+      // Get the list of AnalysisErrors and remove any todos from the list, these are ignored in the\n+      // Dart Problems view, and can be ignored for any dashboard work.\n+      assert keyPath != null;\n+      List<AnalysisError> errors = getAnalysisErrorsForFile(keyPath);\n+      errors.removeIf(e -> {\n+        assert e != null;\n+        return Objects.equals(e.getType(), AnalysisErrorType.TODO);\n+      });\n+      if (errors.isEmpty()) {\n+        continue;\n+      }\n+\n+      // For this file, count how many of each ERROR_TYPES type we have and add this count to each\n+      // errorCountsArray[*]\n+      for (int i = 0; i < ERROR_TYPES.length; i++) {\n+        final int j = i;\n+        errorCountsArray[j] += errors.stream().filter(e -> {\n+          assert e != null;\n+          return Objects.equals(e.getType(), ERROR_TYPES[j]);\n+        }).count();\n+      }\n+    }\n+\n+    // Finally, create and return the final HashMap.\n+    HashMap<String, Integer> errorCounts = new HashMap<>();\n+    for (int i = 0; i < ERROR_TYPES.length; i++) {\n+      errorCounts.put(ERROR_TYPES[i], errorCountsArray[i]);\n+    }\n+    return errorCounts;\n+  }\n+\n+  @Override\n+  public void computedHighlights(String path, List<HighlightRegion> list) {\n+    assert path != null;\n+    maybeLogInitialAnalysisTime(INITIAL_HIGHLIGHTS_TIME, path, pathToHighlightTimestamps);\n+  }\n+\n+  @Override\n+  public void computedImplemented(String s, List<ImplementedClass> list, List<ImplementedMember> list1) {\n+  }\n+\n+  @Override\n+  public void computedLaunchData(String s, String s1, String[] strings) {\n+  }\n+\n+  @Override\n+  public void computedNavigation(String s, List<NavigationRegion> list) {\n+  }\n+\n+  @Override\n+  public void computedOccurrences(String s, List<Occurrences> list) {\n+  }\n+\n+  @Override\n+  public void computedOutline(String path, Outline outline) {\n+    assert path != null;\n+    maybeLogInitialAnalysisTime(INITIAL_OUTLINE_TIME, path, pathToOutlineTimestamps);\n+  }\n+\n+  @Override\n+  public void computedOverrides(String s, List<OverrideMember> list) {\n+  }\n+\n+  @Override\n+  public void computedClosingLabels(String s, List<ClosingLabel> list) {\n+  }\n+\n+  @Override\n+  public void computedSearchResults(String s, List<SearchResult> list, boolean b) {\n+  }\n+\n+  @Override\n+  public void flushedResults(List<String> list) {\n+  }\n+\n+  @Override\n+  public void requestError(RequestError requestError) {\n+    assert requestError != null;\n+    String code = requestError.getCode();\n+    if (code == null) {\n+      code = requestError.getMessage(); // test: requestErrorNoCode()\n+    }\n+    String stack = requestError.getStackTrace();\n+    String exception = composeException(ERROR_TYPE_REQUEST, code, stack);\n+    FlutterInitializer.getAnalytics().sendException(exception, false); // test: requestError()\n+  }\n+\n+  /**\n+   * Build an exception parameter containing type, code, and stack. Limit it to 150 chars.\n+   *\n+   * @param type  \"R\" for request error, \"S\" for server error\n+   * @param code  error code or message\n+   * @param stack stack trace\n+   * @return exception description, value of \"exd\" parameter in analytics\n+   */\n+  private static String composeException(@NotNull String type, @Nullable String code, @Nullable String stack) {\n+    String exception = type + \" \";\n+    if (code != null && !code.isEmpty()) {\n+      exception += code;\n+      if (stack != null && !stack.isEmpty()) {\n+        exception += \"\\n\" + stack;\n+      }\n+    }\n+    else if (stack != null && !stack.isEmpty()) {\n+      exception += stack;\n+    }\n+    else {\n+      exception += \"exception\";\n+    }\n+    if (exception.length() > 150) {\n+      exception = exception.substring(0, 149);\n+    }\n+    return exception;\n+  }\n+\n+  @Override\n+  public void serverConnected(String s) {\n+  }\n+\n+  @Override\n+  public void serverError(boolean isFatal, String message, String stackTraceString) {\n+    String exception = composeException(ERROR_TYPE_SERVER, message, stackTraceString);\n+    FlutterInitializer.getAnalytics().sendException(exception, isFatal); // test: serverError()\n+  }\n+\n+  @Override\n+  public void serverIncompatibleVersion(String s) {\n+  }\n+\n+  @Override\n+  public void serverStatus(AnalysisStatus analysisStatus, PubStatus pubStatus) {\n+    assert analysisStatus != null;\n+    if (!analysisStatus.isAnalyzing()) {\n+      @NotNull HashMap<String, Integer> errorCounts = getTotalAnalysisErrorCounts();\n+      int errorCount = 0;\n+      errorCount += extractCount(errorCounts, AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR);\n+      errorCount += extractCount(errorCounts, AnalysisErrorType.COMPILE_TIME_ERROR);\n+      errorCount += extractCount(errorCounts, AnalysisErrorType.SYNTACTIC_ERROR);\n+      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, ERRORS, errorCount); // test: serverStatus()\n+      int warningCount = 0;\n+      warningCount += extractCount(errorCounts, AnalysisErrorType.STATIC_TYPE_WARNING);\n+      warningCount += extractCount(errorCounts, AnalysisErrorType.STATIC_WARNING);\n+      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, WARNINGS, warningCount); // test: serverStatus()\n+      int hintCount = extractCount(errorCounts, AnalysisErrorType.HINT);\n+      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, HINTS, hintCount); // test: serverStatus()\n+      int lintCount = extractCount(errorCounts, AnalysisErrorType.LINT);\n+      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, LINTS, lintCount); // test: serverStatus()\n+    }\n+  }\n+\n+  private static int extractCount(@NotNull Map<String, Integer> errorCounts, String name) {\n+    //noinspection Java8MapApi,ConstantConditions\n+    return errorCounts.containsKey(AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR) ? errorCounts.get(\n+      AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR) : 0;\n+  }\n+\n+  @Override\n+  public void computedExistingImports(String file, Map<String, Map<String, Set<String>>> existingImports) {\n+  }\n+\n+  private static void logCompletion(@NotNull String selection, int prefixLength, @NotNull String eventType) {\n+    FlutterInitializer.getAnalytics().sendEventMetric(eventType, selection, prefixLength); // test: acceptedCompletion(), lookupCanceled()\n+  }\n+\n+  void logE2ECompletionSuccessMS(long e2eCompletionMS) {\n+    FlutterInitializer.getAnalytics().sendTiming(E2E_IJ_COMPLETION_TIME, SUCCESS, e2eCompletionMS); // test: logE2ECompletionSuccessMS()\n+  }\n+\n+  void logE2ECompletionErrorMS(long e2eCompletionMS) {\n+    FlutterInitializer.getAnalytics().sendTiming(E2E_IJ_COMPLETION_TIME, FAILURE, e2eCompletionMS); // test: logE2ECompletionErrorMS()\n+  }\n+\n+  private void logAnalysisError(@Nullable AnalysisError error) {",
            "html_url": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r835532627",
            "id": 835532627,
            "line": null,
            "node_id": "PRRC_kwDOA9MwhM4xzTdT",
            "original_commit_id": "1cea9a46645ac63344af583ece3e3c0a1825eb3b",
            "original_line": 387,
            "original_position": 383,
            "original_start_line": null,
            "path": "flutter-idea/src/io/flutter/analytics/FlutterAnalysisServerListener.java",
            "position": null,
            "pull_request_review_id": 922027870,
            "pull_request_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/835532627/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-03-25T18:48:53Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/835532627",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1226812?v=4",
                "events_url": "https://api.github.com/users/jacob314/events{/privacy}",
                "followers_url": "https://api.github.com/users/jacob314/followers",
                "following_url": "https://api.github.com/users/jacob314/following{/other_user}",
                "gists_url": "https://api.github.com/users/jacob314/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jacob314",
                "id": 1226812,
                "login": "jacob314",
                "node_id": "MDQ6VXNlcjEyMjY4MTI=",
                "organizations_url": "https://api.github.com/users/jacob314/orgs",
                "received_events_url": "https://api.github.com/users/jacob314/received_events",
                "repos_url": "https://api.github.com/users/jacob314/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jacob314/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jacob314/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jacob314"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r835534901"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985"
                },
                "self": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/835534901"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "what happens if you restart the analysis server? Do we get a new event with new errors.\r\nWish we had a merged Dart and Flutter plugin so we didn't have to duplicate this logic that the analysis errors window already handles.",
            "commit_id": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "created_at": "2022-03-25T18:52:31Z",
            "diff_hunk": "@@ -0,0 +1,521 @@\n+package io.flutter.analytics;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.dart.server.AnalysisServerListenerAdapter;\n+import com.google.dart.server.RequestListener;\n+import com.google.dart.server.ResponseListener;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.intellij.codeInsight.lookup.LookupEvent;\n+import com.intellij.codeInsight.lookup.LookupListener;\n+import com.intellij.codeInsight.lookup.LookupManager;\n+import com.intellij.codeInsight.lookup.impl.LookupImpl;\n+import com.intellij.openapi.Disposable;\n+import com.intellij.openapi.application.ApplicationManager;\n+import com.intellij.openapi.editor.Editor;\n+import com.intellij.openapi.fileEditor.FileEditorManager;\n+import com.intellij.openapi.fileEditor.FileEditorManagerEvent;\n+import com.intellij.openapi.fileEditor.FileEditorManagerListener;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.util.text.StringUtil;\n+import com.intellij.openapi.vfs.VirtualFile;\n+import com.intellij.psi.PsiFile;\n+import com.jetbrains.lang.dart.analyzer.DartAnalysisServerService;\n+import com.jetbrains.lang.dart.fixes.DartQuickFix;\n+import com.jetbrains.lang.dart.fixes.DartQuickFixListener;\n+import io.flutter.FlutterInitializer;\n+import io.flutter.utils.FileUtils;\n+import org.dartlang.analysis.server.protocol.*;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.beans.PropertyChangeEvent;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+@SuppressWarnings(\"LocalCanBeFinal\")\n+public final class FlutterAnalysisServerListener extends AnalysisServerListenerAdapter implements Disposable {\n+  // statics\n+  static final String COMPUTED_ERROR = \"computedError\";\n+  static final String INITIAL_COMPUTE_ERRORS_TIME = \"initialComputeErrorsTime\";\n+  static final String INITIAL_HIGHLIGHTS_TIME = \"initialHighlightsTime\";\n+  static final String INITIAL_OUTLINE_TIME = \"initialOutlineTime\";\n+  static final String ROUND_TRIP_TIME = \"roundTripTime\";\n+  static final String QUICK_FIX = \"quickFix\";\n+  static final String UNKNOWN_LOOKUP_STRING = \"<unknown>\";\n+  static final String ANALYSIS_SERVER_LOG = \"analysisServerLog\";\n+  static final String ACCEPTED_COMPLETION = \"acceptedCompletion\";\n+  static final String REJECTED_COMPLETION = \"rejectedCompletion\";\n+  static final String E2E_IJ_COMPLETION_TIME = \"e2eIJCompletionTime\";\n+  static final String ERRORS = \"errors\";\n+  static final String WARNINGS = \"warnings\";\n+  static final String HINTS = \"hints\";\n+  static final String LINTS = \"lints\";\n+  static final String DURATION = \"duration\";\n+  static final String FAILURE = \"failure\";\n+  static final String SUCCESS = \"success\";\n+  static final String ERROR_TYPE_REQUEST = \"R\";\n+  static final String ERROR_TYPE_SERVER = \"@\";\n+\n+  static final String DAS_STATUS_EVENT_TYPE = \"analysisServerStatus\";\n+  static final String[] ERROR_TYPES = new String[]{\n+    AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR,\n+    AnalysisErrorType.COMPILE_TIME_ERROR,\n+    AnalysisErrorType.HINT,\n+    AnalysisErrorType.LINT,\n+    AnalysisErrorType.STATIC_TYPE_WARNING,\n+    AnalysisErrorType.STATIC_WARNING,\n+    AnalysisErrorType.SYNTACTIC_ERROR\n+  };\n+\n+  static final String LOG_ENTRY_KIND = \"kind\";\n+  static final String LOG_ENTRY_TIME = \"time\";\n+  static final String LOG_ENTRY_DATA = \"data\";\n+  static final String LOG_ENTRY_SDK_VERSION = \"sdkVersion\";\n+\n+  // variables to throttle certain, high frequency events\n+  private static final int COMPUTED_ERROR_SAMPLE_RATE = 100;\n+  @SuppressWarnings(\"ConstantConditions\")\n+  @NotNull private static final Duration INTERVAL_TO_REPORT_MEMORY_USAGE = Duration.ofHours(1);\n+  @NotNull final RequestListener requestListener;\n+  @NotNull final ResponseListener responseListener;\n+  @NotNull final DartQuickFixListener quickFixListener;\n+  // instance members\n+  @NotNull private final Project project;\n+  @NotNull private final Map<String, List<AnalysisError>> pathToErrors;\n+  @NotNull private final Map<String, Instant> pathToErrorTimestamps;\n+  @NotNull private final Map<String, Instant> pathToHighlightTimestamps;\n+  @NotNull private final Map<String, Instant> pathToOutlineTimestamps;\n+  @NotNull private final Map<String, RequestDetails> requestToDetails;\n+  @NotNull private final FileEditorManagerListener fileEditorManagerListener;\n+  LookupSelectionHandler lookupSelectionHandler;\n+  private int computedErrorCounter = 0;\n+  @NotNull private Instant nextMemoryUsageLoggedInstant = Instant.EPOCH;\n+\n+  FlutterAnalysisServerListener(@NotNull Project project) {\n+    this.project = project;\n+    this.pathToErrors = new HashMap<>();\n+    this.pathToErrorTimestamps = new HashMap<>();\n+    this.pathToHighlightTimestamps = new HashMap<>();\n+    this.pathToOutlineTimestamps = new HashMap<>();\n+    this.requestToDetails = new HashMap<>();\n+    LookupManager.getInstance(project).addPropertyChangeListener(this::onPropertyChange);\n+\n+    this.fileEditorManagerListener = new FileEditorManagerListener() {\n+      @Override\n+      public void fileOpened(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n+        // Record the time that this file was opened so that we'll be able to log\n+        // relative timings for errors, highlights, outlines, etc.\n+        String filePath = file.getPath();\n+        Instant nowInstant = Instant.now();\n+        pathToErrorTimestamps.put(filePath, nowInstant);\n+        pathToHighlightTimestamps.put(filePath, nowInstant);\n+        pathToOutlineTimestamps.put(filePath, nowInstant);\n+      }\n+\n+      @Override\n+      public void selectionChanged(@NotNull FileEditorManagerEvent event) {\n+      }\n+\n+      @Override\n+      public void fileClosed(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n+      }\n+    };\n+    project.getMessageBus().connect().subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER, fileEditorManagerListener);\n+    this.quickFixListener = new QuickFixListener();\n+    this.requestListener = new FlutterRequestListener();\n+    this.responseListener = new FlutterResponseListener();\n+    DartAnalysisServerService analysisServer = DartAnalysisServerService.getInstance(project);\n+    analysisServer.setServerLogSubscription(true);\n+    analysisServer.addQuickFixListener(this.quickFixListener);\n+    analysisServer.addRequestListener(this.requestListener);\n+    analysisServer.addResponseListener(this.responseListener);\n+  }\n+\n+  @NotNull\n+  public static FlutterAnalysisServerListener getInstance(@NotNull final Project project) {\n+    return Objects.requireNonNull(project.getService(FlutterAnalysisServerListener.class));\n+  }\n+\n+  @NotNull\n+  private static String safelyGetString(JsonObject jsonObject, String memberName) {\n+    if (jsonObject != null && StringUtil.isNotEmpty(memberName)) {\n+      JsonElement jsonElement = jsonObject.get(memberName);\n+      if (jsonElement != null) {\n+        return Objects.requireNonNull(jsonElement.getAsString());\n+      }\n+    }\n+    return \"\";\n+  }\n+\n+  @Override\n+  public void dispose() {\n+    // This is deprecated and marked for removal in 2021.3. If it is removed we will\n+    // have to do some funny stuff to support older versions of Android Studio.\n+    LookupManager.getInstance(project).removePropertyChangeListener(this::onPropertyChange);\n+  }\n+\n+  @Override\n+  public void computedAnalyzedFiles(List<String> list) {\n+  }\n+\n+  @Override\n+  public void computedAvailableSuggestions(@NotNull List<AvailableSuggestionSet> list, int[] ints) {\n+  }\n+\n+  @Override\n+  public void computedCompletion(String completionId,\n+                                 int replacementOffset,\n+                                 int replacementLength,\n+                                 List<CompletionSuggestion> completionSuggestions,\n+                                 List<IncludedSuggestionSet> includedSuggestionSets,\n+                                 List<String> includedElementKinds,\n+                                 List<IncludedSuggestionRelevanceTag> includedSuggestionRelevanceTags,\n+                                 boolean isLast,\n+                                 String libraryFilePathSD) {\n+  }\n+\n+  @Override\n+  public void computedErrors(String path, List<AnalysisError> list) {\n+    assert list != null;\n+    list.forEach(this::logAnalysisError);\n+    pathToErrors.put(path, list);",
            "html_url": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r835534901",
            "id": 835534901,
            "line": 205,
            "node_id": "PRRC_kwDOA9MwhM4xzUA1",
            "original_commit_id": "1cea9a46645ac63344af583ece3e3c0a1825eb3b",
            "original_line": 205,
            "original_position": 186,
            "original_start_line": null,
            "path": "flutter-idea/src/io/flutter/analytics/FlutterAnalysisServerListener.java",
            "position": 205,
            "pull_request_review_id": 922031184,
            "pull_request_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/835534901/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-03-25T18:52:31Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/835534901",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1226812?v=4",
                "events_url": "https://api.github.com/users/jacob314/events{/privacy}",
                "followers_url": "https://api.github.com/users/jacob314/followers",
                "following_url": "https://api.github.com/users/jacob314/following{/other_user}",
                "gists_url": "https://api.github.com/users/jacob314/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jacob314",
                "id": 1226812,
                "login": "jacob314",
                "node_id": "MDQ6VXNlcjEyMjY4MTI=",
                "organizations_url": "https://api.github.com/users/jacob314/orgs",
                "received_events_url": "https://api.github.com/users/jacob314/received_events",
                "repos_url": "https://api.github.com/users/jacob314/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jacob314/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jacob314/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jacob314"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r835662484"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985"
                },
                "self": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/835662484"
                }
            },
            "author_association": "MEMBER",
            "body": "Not every file, but all Dart files plus some unexpected files. All three `AndroidManifest.xml` files were checked plus `pubspec.yaml`. Also `analysis_options.yaml`.",
            "commit_id": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "created_at": "2022-03-25T23:15:15Z",
            "diff_hunk": "@@ -0,0 +1,521 @@\n+package io.flutter.analytics;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.dart.server.AnalysisServerListenerAdapter;\n+import com.google.dart.server.RequestListener;\n+import com.google.dart.server.ResponseListener;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.intellij.codeInsight.lookup.LookupEvent;\n+import com.intellij.codeInsight.lookup.LookupListener;\n+import com.intellij.codeInsight.lookup.LookupManager;\n+import com.intellij.codeInsight.lookup.impl.LookupImpl;\n+import com.intellij.openapi.Disposable;\n+import com.intellij.openapi.application.ApplicationManager;\n+import com.intellij.openapi.editor.Editor;\n+import com.intellij.openapi.fileEditor.FileEditorManager;\n+import com.intellij.openapi.fileEditor.FileEditorManagerEvent;\n+import com.intellij.openapi.fileEditor.FileEditorManagerListener;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.util.text.StringUtil;\n+import com.intellij.openapi.vfs.VirtualFile;\n+import com.intellij.psi.PsiFile;\n+import com.jetbrains.lang.dart.analyzer.DartAnalysisServerService;\n+import com.jetbrains.lang.dart.fixes.DartQuickFix;\n+import com.jetbrains.lang.dart.fixes.DartQuickFixListener;\n+import io.flutter.FlutterInitializer;\n+import io.flutter.utils.FileUtils;\n+import org.dartlang.analysis.server.protocol.*;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.beans.PropertyChangeEvent;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+@SuppressWarnings(\"LocalCanBeFinal\")\n+public final class FlutterAnalysisServerListener extends AnalysisServerListenerAdapter implements Disposable {\n+  // statics\n+  static final String COMPUTED_ERROR = \"computedError\";\n+  static final String INITIAL_COMPUTE_ERRORS_TIME = \"initialComputeErrorsTime\";\n+  static final String INITIAL_HIGHLIGHTS_TIME = \"initialHighlightsTime\";\n+  static final String INITIAL_OUTLINE_TIME = \"initialOutlineTime\";\n+  static final String ROUND_TRIP_TIME = \"roundTripTime\";\n+  static final String QUICK_FIX = \"quickFix\";\n+  static final String UNKNOWN_LOOKUP_STRING = \"<unknown>\";\n+  static final String ANALYSIS_SERVER_LOG = \"analysisServerLog\";\n+  static final String ACCEPTED_COMPLETION = \"acceptedCompletion\";\n+  static final String REJECTED_COMPLETION = \"rejectedCompletion\";\n+  static final String E2E_IJ_COMPLETION_TIME = \"e2eIJCompletionTime\";\n+  static final String ERRORS = \"errors\";\n+  static final String WARNINGS = \"warnings\";\n+  static final String HINTS = \"hints\";\n+  static final String LINTS = \"lints\";\n+  static final String DURATION = \"duration\";\n+  static final String FAILURE = \"failure\";\n+  static final String SUCCESS = \"success\";\n+  static final String ERROR_TYPE_REQUEST = \"R\";\n+  static final String ERROR_TYPE_SERVER = \"@\";\n+\n+  static final String DAS_STATUS_EVENT_TYPE = \"analysisServerStatus\";\n+  static final String[] ERROR_TYPES = new String[]{\n+    AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR,\n+    AnalysisErrorType.COMPILE_TIME_ERROR,\n+    AnalysisErrorType.HINT,\n+    AnalysisErrorType.LINT,\n+    AnalysisErrorType.STATIC_TYPE_WARNING,\n+    AnalysisErrorType.STATIC_WARNING,\n+    AnalysisErrorType.SYNTACTIC_ERROR\n+  };\n+\n+  static final String LOG_ENTRY_KIND = \"kind\";\n+  static final String LOG_ENTRY_TIME = \"time\";\n+  static final String LOG_ENTRY_DATA = \"data\";\n+  static final String LOG_ENTRY_SDK_VERSION = \"sdkVersion\";\n+\n+  // variables to throttle certain, high frequency events\n+  private static final int COMPUTED_ERROR_SAMPLE_RATE = 100;\n+  @SuppressWarnings(\"ConstantConditions\")\n+  @NotNull private static final Duration INTERVAL_TO_REPORT_MEMORY_USAGE = Duration.ofHours(1);\n+  @NotNull final RequestListener requestListener;\n+  @NotNull final ResponseListener responseListener;\n+  @NotNull final DartQuickFixListener quickFixListener;\n+  // instance members\n+  @NotNull private final Project project;\n+  @NotNull private final Map<String, List<AnalysisError>> pathToErrors;\n+  @NotNull private final Map<String, Instant> pathToErrorTimestamps;\n+  @NotNull private final Map<String, Instant> pathToHighlightTimestamps;\n+  @NotNull private final Map<String, Instant> pathToOutlineTimestamps;\n+  @NotNull private final Map<String, RequestDetails> requestToDetails;\n+  @NotNull private final FileEditorManagerListener fileEditorManagerListener;\n+  LookupSelectionHandler lookupSelectionHandler;\n+  private int computedErrorCounter = 0;\n+  @NotNull private Instant nextMemoryUsageLoggedInstant = Instant.EPOCH;\n+\n+  FlutterAnalysisServerListener(@NotNull Project project) {\n+    this.project = project;\n+    this.pathToErrors = new HashMap<>();\n+    this.pathToErrorTimestamps = new HashMap<>();\n+    this.pathToHighlightTimestamps = new HashMap<>();\n+    this.pathToOutlineTimestamps = new HashMap<>();\n+    this.requestToDetails = new HashMap<>();\n+    LookupManager.getInstance(project).addPropertyChangeListener(this::onPropertyChange);\n+\n+    this.fileEditorManagerListener = new FileEditorManagerListener() {\n+      @Override\n+      public void fileOpened(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n+        // Record the time that this file was opened so that we'll be able to log\n+        // relative timings for errors, highlights, outlines, etc.\n+        String filePath = file.getPath();\n+        Instant nowInstant = Instant.now();\n+        pathToErrorTimestamps.put(filePath, nowInstant);\n+        pathToHighlightTimestamps.put(filePath, nowInstant);\n+        pathToOutlineTimestamps.put(filePath, nowInstant);\n+      }\n+\n+      @Override\n+      public void selectionChanged(@NotNull FileEditorManagerEvent event) {\n+      }\n+\n+      @Override\n+      public void fileClosed(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n+      }\n+    };\n+    project.getMessageBus().connect().subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER, fileEditorManagerListener);\n+    this.quickFixListener = new QuickFixListener();\n+    this.requestListener = new FlutterRequestListener();\n+    this.responseListener = new FlutterResponseListener();\n+    DartAnalysisServerService analysisServer = DartAnalysisServerService.getInstance(project);\n+    analysisServer.setServerLogSubscription(true);\n+    analysisServer.addQuickFixListener(this.quickFixListener);\n+    analysisServer.addRequestListener(this.requestListener);\n+    analysisServer.addResponseListener(this.responseListener);\n+  }\n+\n+  @NotNull\n+  public static FlutterAnalysisServerListener getInstance(@NotNull final Project project) {\n+    return Objects.requireNonNull(project.getService(FlutterAnalysisServerListener.class));\n+  }\n+\n+  @NotNull\n+  private static String safelyGetString(JsonObject jsonObject, String memberName) {\n+    if (jsonObject != null && StringUtil.isNotEmpty(memberName)) {\n+      JsonElement jsonElement = jsonObject.get(memberName);\n+      if (jsonElement != null) {\n+        return Objects.requireNonNull(jsonElement.getAsString());\n+      }\n+    }\n+    return \"\";\n+  }\n+\n+  @Override\n+  public void dispose() {\n+    // This is deprecated and marked for removal in 2021.3. If it is removed we will\n+    // have to do some funny stuff to support older versions of Android Studio.\n+    LookupManager.getInstance(project).removePropertyChangeListener(this::onPropertyChange);\n+  }\n+\n+  @Override\n+  public void computedAnalyzedFiles(List<String> list) {\n+  }\n+\n+  @Override\n+  public void computedAvailableSuggestions(@NotNull List<AvailableSuggestionSet> list, int[] ints) {\n+  }\n+\n+  @Override\n+  public void computedCompletion(String completionId,\n+                                 int replacementOffset,\n+                                 int replacementLength,\n+                                 List<CompletionSuggestion> completionSuggestions,\n+                                 List<IncludedSuggestionSet> includedSuggestionSets,\n+                                 List<String> includedElementKinds,\n+                                 List<IncludedSuggestionRelevanceTag> includedSuggestionRelevanceTags,\n+                                 boolean isLast,\n+                                 String libraryFilePathSD) {\n+  }\n+\n+  @Override\n+  public void computedErrors(String path, List<AnalysisError> list) {",
            "html_url": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r835662484",
            "id": 835662484,
            "in_reply_to_id": 835525846,
            "line": 203,
            "node_id": "PRRC_kwDOA9MwhM4xzzKU",
            "original_commit_id": "1cea9a46645ac63344af583ece3e3c0a1825eb3b",
            "original_line": 203,
            "original_position": 183,
            "original_start_line": null,
            "path": "flutter-idea/src/io/flutter/analytics/FlutterAnalysisServerListener.java",
            "position": 203,
            "pull_request_review_id": 922209052,
            "pull_request_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/835662484/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-03-25T23:29:08Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/835662484",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r835666217"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985"
                },
                "self": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/835666217"
                }
            },
            "author_association": "MEMBER",
            "body": "Yes. It would make sense to check if the file had already been analyzed and, if the errors are the same, ignore it, I think.",
            "commit_id": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "created_at": "2022-03-25T23:31:07Z",
            "diff_hunk": "@@ -0,0 +1,521 @@\n+package io.flutter.analytics;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.dart.server.AnalysisServerListenerAdapter;\n+import com.google.dart.server.RequestListener;\n+import com.google.dart.server.ResponseListener;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.intellij.codeInsight.lookup.LookupEvent;\n+import com.intellij.codeInsight.lookup.LookupListener;\n+import com.intellij.codeInsight.lookup.LookupManager;\n+import com.intellij.codeInsight.lookup.impl.LookupImpl;\n+import com.intellij.openapi.Disposable;\n+import com.intellij.openapi.application.ApplicationManager;\n+import com.intellij.openapi.editor.Editor;\n+import com.intellij.openapi.fileEditor.FileEditorManager;\n+import com.intellij.openapi.fileEditor.FileEditorManagerEvent;\n+import com.intellij.openapi.fileEditor.FileEditorManagerListener;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.util.text.StringUtil;\n+import com.intellij.openapi.vfs.VirtualFile;\n+import com.intellij.psi.PsiFile;\n+import com.jetbrains.lang.dart.analyzer.DartAnalysisServerService;\n+import com.jetbrains.lang.dart.fixes.DartQuickFix;\n+import com.jetbrains.lang.dart.fixes.DartQuickFixListener;\n+import io.flutter.FlutterInitializer;\n+import io.flutter.utils.FileUtils;\n+import org.dartlang.analysis.server.protocol.*;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.beans.PropertyChangeEvent;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+@SuppressWarnings(\"LocalCanBeFinal\")\n+public final class FlutterAnalysisServerListener extends AnalysisServerListenerAdapter implements Disposable {\n+  // statics\n+  static final String COMPUTED_ERROR = \"computedError\";\n+  static final String INITIAL_COMPUTE_ERRORS_TIME = \"initialComputeErrorsTime\";\n+  static final String INITIAL_HIGHLIGHTS_TIME = \"initialHighlightsTime\";\n+  static final String INITIAL_OUTLINE_TIME = \"initialOutlineTime\";\n+  static final String ROUND_TRIP_TIME = \"roundTripTime\";\n+  static final String QUICK_FIX = \"quickFix\";\n+  static final String UNKNOWN_LOOKUP_STRING = \"<unknown>\";\n+  static final String ANALYSIS_SERVER_LOG = \"analysisServerLog\";\n+  static final String ACCEPTED_COMPLETION = \"acceptedCompletion\";\n+  static final String REJECTED_COMPLETION = \"rejectedCompletion\";\n+  static final String E2E_IJ_COMPLETION_TIME = \"e2eIJCompletionTime\";\n+  static final String ERRORS = \"errors\";\n+  static final String WARNINGS = \"warnings\";\n+  static final String HINTS = \"hints\";\n+  static final String LINTS = \"lints\";\n+  static final String DURATION = \"duration\";\n+  static final String FAILURE = \"failure\";\n+  static final String SUCCESS = \"success\";\n+  static final String ERROR_TYPE_REQUEST = \"R\";\n+  static final String ERROR_TYPE_SERVER = \"@\";\n+\n+  static final String DAS_STATUS_EVENT_TYPE = \"analysisServerStatus\";\n+  static final String[] ERROR_TYPES = new String[]{\n+    AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR,\n+    AnalysisErrorType.COMPILE_TIME_ERROR,\n+    AnalysisErrorType.HINT,\n+    AnalysisErrorType.LINT,\n+    AnalysisErrorType.STATIC_TYPE_WARNING,\n+    AnalysisErrorType.STATIC_WARNING,\n+    AnalysisErrorType.SYNTACTIC_ERROR\n+  };\n+\n+  static final String LOG_ENTRY_KIND = \"kind\";\n+  static final String LOG_ENTRY_TIME = \"time\";\n+  static final String LOG_ENTRY_DATA = \"data\";\n+  static final String LOG_ENTRY_SDK_VERSION = \"sdkVersion\";\n+\n+  // variables to throttle certain, high frequency events\n+  private static final int COMPUTED_ERROR_SAMPLE_RATE = 100;\n+  @SuppressWarnings(\"ConstantConditions\")\n+  @NotNull private static final Duration INTERVAL_TO_REPORT_MEMORY_USAGE = Duration.ofHours(1);\n+  @NotNull final RequestListener requestListener;\n+  @NotNull final ResponseListener responseListener;\n+  @NotNull final DartQuickFixListener quickFixListener;\n+  // instance members\n+  @NotNull private final Project project;\n+  @NotNull private final Map<String, List<AnalysisError>> pathToErrors;\n+  @NotNull private final Map<String, Instant> pathToErrorTimestamps;\n+  @NotNull private final Map<String, Instant> pathToHighlightTimestamps;\n+  @NotNull private final Map<String, Instant> pathToOutlineTimestamps;\n+  @NotNull private final Map<String, RequestDetails> requestToDetails;\n+  @NotNull private final FileEditorManagerListener fileEditorManagerListener;\n+  LookupSelectionHandler lookupSelectionHandler;\n+  private int computedErrorCounter = 0;\n+  @NotNull private Instant nextMemoryUsageLoggedInstant = Instant.EPOCH;\n+\n+  FlutterAnalysisServerListener(@NotNull Project project) {\n+    this.project = project;\n+    this.pathToErrors = new HashMap<>();\n+    this.pathToErrorTimestamps = new HashMap<>();\n+    this.pathToHighlightTimestamps = new HashMap<>();\n+    this.pathToOutlineTimestamps = new HashMap<>();\n+    this.requestToDetails = new HashMap<>();\n+    LookupManager.getInstance(project).addPropertyChangeListener(this::onPropertyChange);\n+\n+    this.fileEditorManagerListener = new FileEditorManagerListener() {\n+      @Override\n+      public void fileOpened(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n+        // Record the time that this file was opened so that we'll be able to log\n+        // relative timings for errors, highlights, outlines, etc.\n+        String filePath = file.getPath();\n+        Instant nowInstant = Instant.now();\n+        pathToErrorTimestamps.put(filePath, nowInstant);\n+        pathToHighlightTimestamps.put(filePath, nowInstant);\n+        pathToOutlineTimestamps.put(filePath, nowInstant);\n+      }\n+\n+      @Override\n+      public void selectionChanged(@NotNull FileEditorManagerEvent event) {\n+      }\n+\n+      @Override\n+      public void fileClosed(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n+      }\n+    };\n+    project.getMessageBus().connect().subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER, fileEditorManagerListener);\n+    this.quickFixListener = new QuickFixListener();\n+    this.requestListener = new FlutterRequestListener();\n+    this.responseListener = new FlutterResponseListener();\n+    DartAnalysisServerService analysisServer = DartAnalysisServerService.getInstance(project);\n+    analysisServer.setServerLogSubscription(true);\n+    analysisServer.addQuickFixListener(this.quickFixListener);\n+    analysisServer.addRequestListener(this.requestListener);\n+    analysisServer.addResponseListener(this.responseListener);\n+  }\n+\n+  @NotNull\n+  public static FlutterAnalysisServerListener getInstance(@NotNull final Project project) {\n+    return Objects.requireNonNull(project.getService(FlutterAnalysisServerListener.class));\n+  }\n+\n+  @NotNull\n+  private static String safelyGetString(JsonObject jsonObject, String memberName) {\n+    if (jsonObject != null && StringUtil.isNotEmpty(memberName)) {\n+      JsonElement jsonElement = jsonObject.get(memberName);\n+      if (jsonElement != null) {\n+        return Objects.requireNonNull(jsonElement.getAsString());\n+      }\n+    }\n+    return \"\";\n+  }\n+\n+  @Override\n+  public void dispose() {\n+    // This is deprecated and marked for removal in 2021.3. If it is removed we will\n+    // have to do some funny stuff to support older versions of Android Studio.\n+    LookupManager.getInstance(project).removePropertyChangeListener(this::onPropertyChange);\n+  }\n+\n+  @Override\n+  public void computedAnalyzedFiles(List<String> list) {\n+  }\n+\n+  @Override\n+  public void computedAvailableSuggestions(@NotNull List<AvailableSuggestionSet> list, int[] ints) {\n+  }\n+\n+  @Override\n+  public void computedCompletion(String completionId,\n+                                 int replacementOffset,\n+                                 int replacementLength,\n+                                 List<CompletionSuggestion> completionSuggestions,\n+                                 List<IncludedSuggestionSet> includedSuggestionSets,\n+                                 List<String> includedElementKinds,\n+                                 List<IncludedSuggestionRelevanceTag> includedSuggestionRelevanceTags,\n+                                 boolean isLast,\n+                                 String libraryFilePathSD) {\n+  }\n+\n+  @Override\n+  public void computedErrors(String path, List<AnalysisError> list) {\n+    assert list != null;\n+    list.forEach(this::logAnalysisError);\n+    pathToErrors.put(path, list);",
            "html_url": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r835666217",
            "id": 835666217,
            "in_reply_to_id": 835534901,
            "line": 205,
            "node_id": "PRRC_kwDOA9MwhM4xz0Ep",
            "original_commit_id": "1cea9a46645ac63344af583ece3e3c0a1825eb3b",
            "original_line": 205,
            "original_position": 186,
            "original_start_line": null,
            "path": "flutter-idea/src/io/flutter/analytics/FlutterAnalysisServerListener.java",
            "position": 205,
            "pull_request_review_id": 922213706,
            "pull_request_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/835666217/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-03-28T21:13:45Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/835666217",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r835666900"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985"
                },
                "self": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/835666900"
                }
            },
            "author_association": "MEMBER",
            "body": "Actually, we log 100 events plus the analysis time of every error in an open editor. So, that's potentially worse. We'd have to check with @jwren for design rationale.",
            "commit_id": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "created_at": "2022-03-25T23:33:53Z",
            "diff_hunk": "@@ -0,0 +1,521 @@\n+package io.flutter.analytics;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.dart.server.AnalysisServerListenerAdapter;\n+import com.google.dart.server.RequestListener;\n+import com.google.dart.server.ResponseListener;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.intellij.codeInsight.lookup.LookupEvent;\n+import com.intellij.codeInsight.lookup.LookupListener;\n+import com.intellij.codeInsight.lookup.LookupManager;\n+import com.intellij.codeInsight.lookup.impl.LookupImpl;\n+import com.intellij.openapi.Disposable;\n+import com.intellij.openapi.application.ApplicationManager;\n+import com.intellij.openapi.editor.Editor;\n+import com.intellij.openapi.fileEditor.FileEditorManager;\n+import com.intellij.openapi.fileEditor.FileEditorManagerEvent;\n+import com.intellij.openapi.fileEditor.FileEditorManagerListener;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.util.text.StringUtil;\n+import com.intellij.openapi.vfs.VirtualFile;\n+import com.intellij.psi.PsiFile;\n+import com.jetbrains.lang.dart.analyzer.DartAnalysisServerService;\n+import com.jetbrains.lang.dart.fixes.DartQuickFix;\n+import com.jetbrains.lang.dart.fixes.DartQuickFixListener;\n+import io.flutter.FlutterInitializer;\n+import io.flutter.utils.FileUtils;\n+import org.dartlang.analysis.server.protocol.*;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.beans.PropertyChangeEvent;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+@SuppressWarnings(\"LocalCanBeFinal\")\n+public final class FlutterAnalysisServerListener extends AnalysisServerListenerAdapter implements Disposable {\n+  // statics\n+  static final String COMPUTED_ERROR = \"computedError\";\n+  static final String INITIAL_COMPUTE_ERRORS_TIME = \"initialComputeErrorsTime\";\n+  static final String INITIAL_HIGHLIGHTS_TIME = \"initialHighlightsTime\";\n+  static final String INITIAL_OUTLINE_TIME = \"initialOutlineTime\";\n+  static final String ROUND_TRIP_TIME = \"roundTripTime\";\n+  static final String QUICK_FIX = \"quickFix\";\n+  static final String UNKNOWN_LOOKUP_STRING = \"<unknown>\";\n+  static final String ANALYSIS_SERVER_LOG = \"analysisServerLog\";\n+  static final String ACCEPTED_COMPLETION = \"acceptedCompletion\";\n+  static final String REJECTED_COMPLETION = \"rejectedCompletion\";\n+  static final String E2E_IJ_COMPLETION_TIME = \"e2eIJCompletionTime\";\n+  static final String ERRORS = \"errors\";\n+  static final String WARNINGS = \"warnings\";\n+  static final String HINTS = \"hints\";\n+  static final String LINTS = \"lints\";\n+  static final String DURATION = \"duration\";\n+  static final String FAILURE = \"failure\";\n+  static final String SUCCESS = \"success\";\n+  static final String ERROR_TYPE_REQUEST = \"R\";\n+  static final String ERROR_TYPE_SERVER = \"@\";\n+\n+  static final String DAS_STATUS_EVENT_TYPE = \"analysisServerStatus\";\n+  static final String[] ERROR_TYPES = new String[]{\n+    AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR,\n+    AnalysisErrorType.COMPILE_TIME_ERROR,\n+    AnalysisErrorType.HINT,\n+    AnalysisErrorType.LINT,\n+    AnalysisErrorType.STATIC_TYPE_WARNING,\n+    AnalysisErrorType.STATIC_WARNING,\n+    AnalysisErrorType.SYNTACTIC_ERROR\n+  };\n+\n+  static final String LOG_ENTRY_KIND = \"kind\";\n+  static final String LOG_ENTRY_TIME = \"time\";\n+  static final String LOG_ENTRY_DATA = \"data\";\n+  static final String LOG_ENTRY_SDK_VERSION = \"sdkVersion\";\n+\n+  // variables to throttle certain, high frequency events\n+  private static final int COMPUTED_ERROR_SAMPLE_RATE = 100;\n+  @SuppressWarnings(\"ConstantConditions\")\n+  @NotNull private static final Duration INTERVAL_TO_REPORT_MEMORY_USAGE = Duration.ofHours(1);\n+  @NotNull final RequestListener requestListener;\n+  @NotNull final ResponseListener responseListener;\n+  @NotNull final DartQuickFixListener quickFixListener;\n+  // instance members\n+  @NotNull private final Project project;\n+  @NotNull private final Map<String, List<AnalysisError>> pathToErrors;\n+  @NotNull private final Map<String, Instant> pathToErrorTimestamps;\n+  @NotNull private final Map<String, Instant> pathToHighlightTimestamps;\n+  @NotNull private final Map<String, Instant> pathToOutlineTimestamps;\n+  @NotNull private final Map<String, RequestDetails> requestToDetails;\n+  @NotNull private final FileEditorManagerListener fileEditorManagerListener;\n+  LookupSelectionHandler lookupSelectionHandler;\n+  private int computedErrorCounter = 0;\n+  @NotNull private Instant nextMemoryUsageLoggedInstant = Instant.EPOCH;\n+\n+  FlutterAnalysisServerListener(@NotNull Project project) {\n+    this.project = project;\n+    this.pathToErrors = new HashMap<>();\n+    this.pathToErrorTimestamps = new HashMap<>();\n+    this.pathToHighlightTimestamps = new HashMap<>();\n+    this.pathToOutlineTimestamps = new HashMap<>();\n+    this.requestToDetails = new HashMap<>();\n+    LookupManager.getInstance(project).addPropertyChangeListener(this::onPropertyChange);\n+\n+    this.fileEditorManagerListener = new FileEditorManagerListener() {\n+      @Override\n+      public void fileOpened(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n+        // Record the time that this file was opened so that we'll be able to log\n+        // relative timings for errors, highlights, outlines, etc.\n+        String filePath = file.getPath();\n+        Instant nowInstant = Instant.now();\n+        pathToErrorTimestamps.put(filePath, nowInstant);\n+        pathToHighlightTimestamps.put(filePath, nowInstant);\n+        pathToOutlineTimestamps.put(filePath, nowInstant);\n+      }\n+\n+      @Override\n+      public void selectionChanged(@NotNull FileEditorManagerEvent event) {\n+      }\n+\n+      @Override\n+      public void fileClosed(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n+      }\n+    };\n+    project.getMessageBus().connect().subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER, fileEditorManagerListener);\n+    this.quickFixListener = new QuickFixListener();\n+    this.requestListener = new FlutterRequestListener();\n+    this.responseListener = new FlutterResponseListener();\n+    DartAnalysisServerService analysisServer = DartAnalysisServerService.getInstance(project);\n+    analysisServer.setServerLogSubscription(true);\n+    analysisServer.addQuickFixListener(this.quickFixListener);\n+    analysisServer.addRequestListener(this.requestListener);\n+    analysisServer.addResponseListener(this.responseListener);\n+  }\n+\n+  @NotNull\n+  public static FlutterAnalysisServerListener getInstance(@NotNull final Project project) {\n+    return Objects.requireNonNull(project.getService(FlutterAnalysisServerListener.class));\n+  }\n+\n+  @NotNull\n+  private static String safelyGetString(JsonObject jsonObject, String memberName) {\n+    if (jsonObject != null && StringUtil.isNotEmpty(memberName)) {\n+      JsonElement jsonElement = jsonObject.get(memberName);\n+      if (jsonElement != null) {\n+        return Objects.requireNonNull(jsonElement.getAsString());\n+      }\n+    }\n+    return \"\";\n+  }\n+\n+  @Override\n+  public void dispose() {\n+    // This is deprecated and marked for removal in 2021.3. If it is removed we will\n+    // have to do some funny stuff to support older versions of Android Studio.\n+    LookupManager.getInstance(project).removePropertyChangeListener(this::onPropertyChange);\n+  }\n+\n+  @Override\n+  public void computedAnalyzedFiles(List<String> list) {\n+  }\n+\n+  @Override\n+  public void computedAvailableSuggestions(@NotNull List<AvailableSuggestionSet> list, int[] ints) {\n+  }\n+\n+  @Override\n+  public void computedCompletion(String completionId,\n+                                 int replacementOffset,\n+                                 int replacementLength,\n+                                 List<CompletionSuggestion> completionSuggestions,\n+                                 List<IncludedSuggestionSet> includedSuggestionSets,\n+                                 List<String> includedElementKinds,\n+                                 List<IncludedSuggestionRelevanceTag> includedSuggestionRelevanceTags,\n+                                 boolean isLast,\n+                                 String libraryFilePathSD) {\n+  }\n+\n+  @Override\n+  public void computedErrors(String path, List<AnalysisError> list) {\n+    assert list != null;\n+    list.forEach(this::logAnalysisError);\n+    pathToErrors.put(path, list);\n+    assert path != null;\n+    maybeLogInitialAnalysisTime(INITIAL_COMPUTE_ERRORS_TIME, path, pathToErrorTimestamps);\n+  }\n+\n+  @NotNull\n+  public List<AnalysisError> getAnalysisErrorsForFile(String path) {\n+    if (path == null) {\n+      return AnalysisError.EMPTY_LIST;\n+    }\n+    return Objects.requireNonNull(pathToErrors.getOrDefault(path, AnalysisError.EMPTY_LIST));\n+  }\n+\n+  /**\n+   * Iterate through all files in this {@link Project}, counting how many of each {@link\n+   * AnalysisErrorType} is in each file. The returned {@link HashMap} will contain the set of String\n+   * keys in ERROR_TYPES and values with the mentioned sums, converted to Strings.\n+   */\n+  @NotNull\n+  private HashMap<String, Integer> getTotalAnalysisErrorCounts() {\n+    // Create a zero-filled array of length ERROR_TYPES.length.\n+    int[] errorCountsArray = new int[ERROR_TYPES.length];\n+\n+    // Iterate through each file in this project.\n+    for (String keyPath : pathToErrors.keySet()) {\n+      // Get the list of AnalysisErrors and remove any todos from the list, these are ignored in the\n+      // Dart Problems view, and can be ignored for any dashboard work.\n+      assert keyPath != null;\n+      List<AnalysisError> errors = getAnalysisErrorsForFile(keyPath);\n+      errors.removeIf(e -> {\n+        assert e != null;\n+        return Objects.equals(e.getType(), AnalysisErrorType.TODO);\n+      });\n+      if (errors.isEmpty()) {\n+        continue;\n+      }\n+\n+      // For this file, count how many of each ERROR_TYPES type we have and add this count to each\n+      // errorCountsArray[*]\n+      for (int i = 0; i < ERROR_TYPES.length; i++) {\n+        final int j = i;\n+        errorCountsArray[j] += errors.stream().filter(e -> {\n+          assert e != null;\n+          return Objects.equals(e.getType(), ERROR_TYPES[j]);\n+        }).count();\n+      }\n+    }\n+\n+    // Finally, create and return the final HashMap.\n+    HashMap<String, Integer> errorCounts = new HashMap<>();\n+    for (int i = 0; i < ERROR_TYPES.length; i++) {\n+      errorCounts.put(ERROR_TYPES[i], errorCountsArray[i]);\n+    }\n+    return errorCounts;\n+  }\n+\n+  @Override\n+  public void computedHighlights(String path, List<HighlightRegion> list) {\n+    assert path != null;\n+    maybeLogInitialAnalysisTime(INITIAL_HIGHLIGHTS_TIME, path, pathToHighlightTimestamps);\n+  }\n+\n+  @Override\n+  public void computedImplemented(String s, List<ImplementedClass> list, List<ImplementedMember> list1) {\n+  }\n+\n+  @Override\n+  public void computedLaunchData(String s, String s1, String[] strings) {\n+  }\n+\n+  @Override\n+  public void computedNavigation(String s, List<NavigationRegion> list) {\n+  }\n+\n+  @Override\n+  public void computedOccurrences(String s, List<Occurrences> list) {\n+  }\n+\n+  @Override\n+  public void computedOutline(String path, Outline outline) {\n+    assert path != null;\n+    maybeLogInitialAnalysisTime(INITIAL_OUTLINE_TIME, path, pathToOutlineTimestamps);\n+  }\n+\n+  @Override\n+  public void computedOverrides(String s, List<OverrideMember> list) {\n+  }\n+\n+  @Override\n+  public void computedClosingLabels(String s, List<ClosingLabel> list) {\n+  }\n+\n+  @Override\n+  public void computedSearchResults(String s, List<SearchResult> list, boolean b) {\n+  }\n+\n+  @Override\n+  public void flushedResults(List<String> list) {\n+  }\n+\n+  @Override\n+  public void requestError(RequestError requestError) {\n+    assert requestError != null;\n+    String code = requestError.getCode();\n+    if (code == null) {\n+      code = requestError.getMessage(); // test: requestErrorNoCode()\n+    }\n+    String stack = requestError.getStackTrace();\n+    String exception = composeException(ERROR_TYPE_REQUEST, code, stack);\n+    FlutterInitializer.getAnalytics().sendException(exception, false); // test: requestError()\n+  }\n+\n+  /**\n+   * Build an exception parameter containing type, code, and stack. Limit it to 150 chars.\n+   *\n+   * @param type  \"R\" for request error, \"S\" for server error\n+   * @param code  error code or message\n+   * @param stack stack trace\n+   * @return exception description, value of \"exd\" parameter in analytics\n+   */\n+  private static String composeException(@NotNull String type, @Nullable String code, @Nullable String stack) {\n+    String exception = type + \" \";\n+    if (code != null && !code.isEmpty()) {\n+      exception += code;\n+      if (stack != null && !stack.isEmpty()) {\n+        exception += \"\\n\" + stack;\n+      }\n+    }\n+    else if (stack != null && !stack.isEmpty()) {\n+      exception += stack;\n+    }\n+    else {\n+      exception += \"exception\";\n+    }\n+    if (exception.length() > 150) {\n+      exception = exception.substring(0, 149);\n+    }\n+    return exception;\n+  }\n+\n+  @Override\n+  public void serverConnected(String s) {\n+  }\n+\n+  @Override\n+  public void serverError(boolean isFatal, String message, String stackTraceString) {\n+    String exception = composeException(ERROR_TYPE_SERVER, message, stackTraceString);\n+    FlutterInitializer.getAnalytics().sendException(exception, isFatal); // test: serverError()\n+  }\n+\n+  @Override\n+  public void serverIncompatibleVersion(String s) {\n+  }\n+\n+  @Override\n+  public void serverStatus(AnalysisStatus analysisStatus, PubStatus pubStatus) {\n+    assert analysisStatus != null;\n+    if (!analysisStatus.isAnalyzing()) {\n+      @NotNull HashMap<String, Integer> errorCounts = getTotalAnalysisErrorCounts();\n+      int errorCount = 0;\n+      errorCount += extractCount(errorCounts, AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR);\n+      errorCount += extractCount(errorCounts, AnalysisErrorType.COMPILE_TIME_ERROR);\n+      errorCount += extractCount(errorCounts, AnalysisErrorType.SYNTACTIC_ERROR);\n+      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, ERRORS, errorCount); // test: serverStatus()\n+      int warningCount = 0;\n+      warningCount += extractCount(errorCounts, AnalysisErrorType.STATIC_TYPE_WARNING);\n+      warningCount += extractCount(errorCounts, AnalysisErrorType.STATIC_WARNING);\n+      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, WARNINGS, warningCount); // test: serverStatus()\n+      int hintCount = extractCount(errorCounts, AnalysisErrorType.HINT);\n+      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, HINTS, hintCount); // test: serverStatus()\n+      int lintCount = extractCount(errorCounts, AnalysisErrorType.LINT);\n+      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, LINTS, lintCount); // test: serverStatus()\n+    }\n+  }\n+\n+  private static int extractCount(@NotNull Map<String, Integer> errorCounts, String name) {\n+    //noinspection Java8MapApi,ConstantConditions\n+    return errorCounts.containsKey(AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR) ? errorCounts.get(\n+      AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR) : 0;\n+  }\n+\n+  @Override\n+  public void computedExistingImports(String file, Map<String, Map<String, Set<String>>> existingImports) {\n+  }\n+\n+  private static void logCompletion(@NotNull String selection, int prefixLength, @NotNull String eventType) {\n+    FlutterInitializer.getAnalytics().sendEventMetric(eventType, selection, prefixLength); // test: acceptedCompletion(), lookupCanceled()\n+  }\n+\n+  void logE2ECompletionSuccessMS(long e2eCompletionMS) {\n+    FlutterInitializer.getAnalytics().sendTiming(E2E_IJ_COMPLETION_TIME, SUCCESS, e2eCompletionMS); // test: logE2ECompletionSuccessMS()\n+  }\n+\n+  void logE2ECompletionErrorMS(long e2eCompletionMS) {\n+    FlutterInitializer.getAnalytics().sendTiming(E2E_IJ_COMPLETION_TIME, FAILURE, e2eCompletionMS); // test: logE2ECompletionErrorMS()\n+  }\n+\n+  private void logAnalysisError(@Nullable AnalysisError error) {",
            "html_url": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r835666900",
            "id": 835666900,
            "in_reply_to_id": 835532627,
            "line": null,
            "node_id": "PRRC_kwDOA9MwhM4xz0PU",
            "original_commit_id": "1cea9a46645ac63344af583ece3e3c0a1825eb3b",
            "original_line": 387,
            "original_position": 383,
            "original_start_line": null,
            "path": "flutter-idea/src/io/flutter/analytics/FlutterAnalysisServerListener.java",
            "position": null,
            "pull_request_review_id": 922213706,
            "pull_request_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/835666900/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-03-28T21:13:45Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/835666900",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r836855727"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985"
                },
                "self": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/836855727"
                }
            },
            "author_association": "MEMBER",
            "body": "@jwren Do you think this test makes sense? And will it be expensive?",
            "commit_id": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "created_at": "2022-03-28T21:13:08Z",
            "diff_hunk": "@@ -0,0 +1,525 @@\n+package io.flutter.analytics;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.dart.server.AnalysisServerListenerAdapter;\n+import com.google.dart.server.RequestListener;\n+import com.google.dart.server.ResponseListener;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.intellij.codeInsight.lookup.LookupEvent;\n+import com.intellij.codeInsight.lookup.LookupListener;\n+import com.intellij.codeInsight.lookup.LookupManager;\n+import com.intellij.codeInsight.lookup.impl.LookupImpl;\n+import com.intellij.openapi.Disposable;\n+import com.intellij.openapi.application.ApplicationManager;\n+import com.intellij.openapi.editor.Editor;\n+import com.intellij.openapi.fileEditor.FileEditorManager;\n+import com.intellij.openapi.fileEditor.FileEditorManagerEvent;\n+import com.intellij.openapi.fileEditor.FileEditorManagerListener;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.util.text.StringUtil;\n+import com.intellij.openapi.vfs.VirtualFile;\n+import com.intellij.psi.PsiFile;\n+import com.jetbrains.lang.dart.analyzer.DartAnalysisServerService;\n+import com.jetbrains.lang.dart.fixes.DartQuickFix;\n+import com.jetbrains.lang.dart.fixes.DartQuickFixListener;\n+import io.flutter.FlutterInitializer;\n+import io.flutter.utils.FileUtils;\n+import org.dartlang.analysis.server.protocol.*;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.beans.PropertyChangeEvent;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+@SuppressWarnings(\"LocalCanBeFinal\")\n+public final class FlutterAnalysisServerListener extends AnalysisServerListenerAdapter implements Disposable {\n+  // statics\n+  static final String COMPUTED_ERROR = \"computedError\";\n+  static final String INITIAL_COMPUTE_ERRORS_TIME = \"initialComputeErrorsTime\";\n+  static final String INITIAL_HIGHLIGHTS_TIME = \"initialHighlightsTime\";\n+  static final String INITIAL_OUTLINE_TIME = \"initialOutlineTime\";\n+  static final String ROUND_TRIP_TIME = \"roundTripTime\";\n+  static final String QUICK_FIX = \"quickFix\";\n+  static final String UNKNOWN_LOOKUP_STRING = \"<unknown>\";\n+  static final String ANALYSIS_SERVER_LOG = \"analysisServerLog\";\n+  static final String ACCEPTED_COMPLETION = \"acceptedCompletion\";\n+  static final String REJECTED_COMPLETION = \"rejectedCompletion\";\n+  static final String E2E_IJ_COMPLETION_TIME = \"e2eIJCompletionTime\";\n+  static final String ERRORS = \"errors\";\n+  static final String WARNINGS = \"warnings\";\n+  static final String HINTS = \"hints\";\n+  static final String LINTS = \"lints\";\n+  static final String DURATION = \"duration\";\n+  static final String FAILURE = \"failure\";\n+  static final String SUCCESS = \"success\";\n+  static final String ERROR_TYPE_REQUEST = \"R\";\n+  static final String ERROR_TYPE_SERVER = \"@\";\n+\n+  static final String DAS_STATUS_EVENT_TYPE = \"analysisServerStatus\";\n+  static final String[] ERROR_TYPES = new String[]{\n+    AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR,\n+    AnalysisErrorType.COMPILE_TIME_ERROR,\n+    AnalysisErrorType.HINT,\n+    AnalysisErrorType.LINT,\n+    AnalysisErrorType.STATIC_TYPE_WARNING,\n+    AnalysisErrorType.STATIC_WARNING,\n+    AnalysisErrorType.SYNTACTIC_ERROR\n+  };\n+\n+  static final String LOG_ENTRY_KIND = \"kind\";\n+  static final String LOG_ENTRY_TIME = \"time\";\n+  static final String LOG_ENTRY_DATA = \"data\";\n+  static final String LOG_ENTRY_SDK_VERSION = \"sdkVersion\";\n+\n+  // variables to throttle certain, high frequency events\n+  private static final int COMPUTED_ERROR_SAMPLE_RATE = 100;\n+  @SuppressWarnings(\"ConstantConditions\")\n+  @NotNull private static final Duration INTERVAL_TO_REPORT_MEMORY_USAGE = Duration.ofHours(1);\n+  @NotNull final RequestListener requestListener;\n+  @NotNull final ResponseListener responseListener;\n+  @NotNull final DartQuickFixListener quickFixListener;\n+  // instance members\n+  @NotNull private final Project project;\n+  @NotNull private final Map<String, List<AnalysisError>> pathToErrors;\n+  @NotNull private final Map<String, Instant> pathToErrorTimestamps;\n+  @NotNull private final Map<String, Instant> pathToHighlightTimestamps;\n+  @NotNull private final Map<String, Instant> pathToOutlineTimestamps;\n+  @NotNull private final Map<String, RequestDetails> requestToDetails;\n+  @NotNull private final FileEditorManagerListener fileEditorManagerListener;\n+  LookupSelectionHandler lookupSelectionHandler;\n+  private int computedErrorCounter = 0;\n+  @NotNull private Instant nextMemoryUsageLoggedInstant = Instant.EPOCH;\n+\n+  FlutterAnalysisServerListener(@NotNull Project project) {\n+    this.project = project;\n+    this.pathToErrors = new HashMap<>();\n+    this.pathToErrorTimestamps = new HashMap<>();\n+    this.pathToHighlightTimestamps = new HashMap<>();\n+    this.pathToOutlineTimestamps = new HashMap<>();\n+    this.requestToDetails = new HashMap<>();\n+    LookupManager.getInstance(project).addPropertyChangeListener(this::onPropertyChange);\n+\n+    this.fileEditorManagerListener = new FileEditorManagerListener() {\n+      @Override\n+      public void fileOpened(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n+        // Record the time that this file was opened so that we'll be able to log\n+        // relative timings for errors, highlights, outlines, etc.\n+        String filePath = file.getPath();\n+        Instant nowInstant = Instant.now();\n+        pathToErrorTimestamps.put(filePath, nowInstant);\n+        pathToHighlightTimestamps.put(filePath, nowInstant);\n+        pathToOutlineTimestamps.put(filePath, nowInstant);\n+      }\n+\n+      @Override\n+      public void selectionChanged(@NotNull FileEditorManagerEvent event) {\n+      }\n+\n+      @Override\n+      public void fileClosed(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n+      }\n+    };\n+    project.getMessageBus().connect().subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER, fileEditorManagerListener);\n+    this.quickFixListener = new QuickFixListener();\n+    this.requestListener = new FlutterRequestListener();\n+    this.responseListener = new FlutterResponseListener();\n+    DartAnalysisServerService analysisServer = DartAnalysisServerService.getInstance(project);\n+    analysisServer.setServerLogSubscription(true);\n+    analysisServer.addQuickFixListener(this.quickFixListener);\n+    analysisServer.addRequestListener(this.requestListener);\n+    analysisServer.addResponseListener(this.responseListener);\n+  }\n+\n+  @NotNull\n+  public static FlutterAnalysisServerListener getInstance(@NotNull final Project project) {\n+    return Objects.requireNonNull(project.getService(FlutterAnalysisServerListener.class));\n+  }\n+\n+  @NotNull\n+  private static String safelyGetString(JsonObject jsonObject, String memberName) {\n+    if (jsonObject != null && StringUtil.isNotEmpty(memberName)) {\n+      JsonElement jsonElement = jsonObject.get(memberName);\n+      if (jsonElement != null) {\n+        return Objects.requireNonNull(jsonElement.getAsString());\n+      }\n+    }\n+    return \"\";\n+  }\n+\n+  @Override\n+  public void dispose() {\n+    // This is deprecated and marked for removal in 2021.3. If it is removed we will\n+    // have to do some funny stuff to support older versions of Android Studio.\n+    LookupManager.getInstance(project).removePropertyChangeListener(this::onPropertyChange);\n+  }\n+\n+  @Override\n+  public void computedAnalyzedFiles(List<String> list) {\n+  }\n+\n+  @Override\n+  public void computedAvailableSuggestions(@NotNull List<AvailableSuggestionSet> list, int[] ints) {\n+  }\n+\n+  @Override\n+  public void computedCompletion(String completionId,\n+                                 int replacementOffset,\n+                                 int replacementLength,\n+                                 List<CompletionSuggestion> completionSuggestions,\n+                                 List<IncludedSuggestionSet> includedSuggestionSets,\n+                                 List<String> includedElementKinds,\n+                                 List<IncludedSuggestionRelevanceTag> includedSuggestionRelevanceTags,\n+                                 boolean isLast,\n+                                 String libraryFilePathSD) {\n+  }\n+\n+  @Override\n+  public void computedErrors(String path, List<AnalysisError> list) {\n+    assert list != null;\n+    List<AnalysisError> existing = pathToErrors.get(path);\n+    if (existing != null && existing.equals(list)) {",
            "html_url": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r836855727",
            "id": 836855727,
            "line": null,
            "node_id": "PRRC_kwDOA9MwhM4x4Wev",
            "original_commit_id": "fdacbf5ec95357ea6714a3cb05376a755c2c7637",
            "original_line": 183,
            "original_position": 186,
            "original_start_line": null,
            "path": "flutter-idea/src/io/flutter/analytics/FlutterAnalysisServerListener.java",
            "position": null,
            "pull_request_review_id": 922213706,
            "pull_request_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/836855727/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-03-28T21:13:45Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/836855727",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r836857070"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985"
                },
                "self": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/836857070"
                }
            },
            "author_association": "MEMBER",
            "body": "I added that test and asked for an opinion from jwren.",
            "commit_id": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "created_at": "2022-03-28T21:15:09Z",
            "diff_hunk": "@@ -0,0 +1,521 @@\n+package io.flutter.analytics;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.dart.server.AnalysisServerListenerAdapter;\n+import com.google.dart.server.RequestListener;\n+import com.google.dart.server.ResponseListener;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.intellij.codeInsight.lookup.LookupEvent;\n+import com.intellij.codeInsight.lookup.LookupListener;\n+import com.intellij.codeInsight.lookup.LookupManager;\n+import com.intellij.codeInsight.lookup.impl.LookupImpl;\n+import com.intellij.openapi.Disposable;\n+import com.intellij.openapi.application.ApplicationManager;\n+import com.intellij.openapi.editor.Editor;\n+import com.intellij.openapi.fileEditor.FileEditorManager;\n+import com.intellij.openapi.fileEditor.FileEditorManagerEvent;\n+import com.intellij.openapi.fileEditor.FileEditorManagerListener;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.util.text.StringUtil;\n+import com.intellij.openapi.vfs.VirtualFile;\n+import com.intellij.psi.PsiFile;\n+import com.jetbrains.lang.dart.analyzer.DartAnalysisServerService;\n+import com.jetbrains.lang.dart.fixes.DartQuickFix;\n+import com.jetbrains.lang.dart.fixes.DartQuickFixListener;\n+import io.flutter.FlutterInitializer;\n+import io.flutter.utils.FileUtils;\n+import org.dartlang.analysis.server.protocol.*;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.beans.PropertyChangeEvent;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+@SuppressWarnings(\"LocalCanBeFinal\")\n+public final class FlutterAnalysisServerListener extends AnalysisServerListenerAdapter implements Disposable {\n+  // statics\n+  static final String COMPUTED_ERROR = \"computedError\";\n+  static final String INITIAL_COMPUTE_ERRORS_TIME = \"initialComputeErrorsTime\";\n+  static final String INITIAL_HIGHLIGHTS_TIME = \"initialHighlightsTime\";\n+  static final String INITIAL_OUTLINE_TIME = \"initialOutlineTime\";\n+  static final String ROUND_TRIP_TIME = \"roundTripTime\";\n+  static final String QUICK_FIX = \"quickFix\";\n+  static final String UNKNOWN_LOOKUP_STRING = \"<unknown>\";\n+  static final String ANALYSIS_SERVER_LOG = \"analysisServerLog\";\n+  static final String ACCEPTED_COMPLETION = \"acceptedCompletion\";\n+  static final String REJECTED_COMPLETION = \"rejectedCompletion\";\n+  static final String E2E_IJ_COMPLETION_TIME = \"e2eIJCompletionTime\";\n+  static final String ERRORS = \"errors\";\n+  static final String WARNINGS = \"warnings\";\n+  static final String HINTS = \"hints\";\n+  static final String LINTS = \"lints\";\n+  static final String DURATION = \"duration\";\n+  static final String FAILURE = \"failure\";\n+  static final String SUCCESS = \"success\";\n+  static final String ERROR_TYPE_REQUEST = \"R\";\n+  static final String ERROR_TYPE_SERVER = \"@\";\n+\n+  static final String DAS_STATUS_EVENT_TYPE = \"analysisServerStatus\";\n+  static final String[] ERROR_TYPES = new String[]{\n+    AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR,\n+    AnalysisErrorType.COMPILE_TIME_ERROR,\n+    AnalysisErrorType.HINT,\n+    AnalysisErrorType.LINT,\n+    AnalysisErrorType.STATIC_TYPE_WARNING,\n+    AnalysisErrorType.STATIC_WARNING,\n+    AnalysisErrorType.SYNTACTIC_ERROR\n+  };\n+\n+  static final String LOG_ENTRY_KIND = \"kind\";\n+  static final String LOG_ENTRY_TIME = \"time\";\n+  static final String LOG_ENTRY_DATA = \"data\";\n+  static final String LOG_ENTRY_SDK_VERSION = \"sdkVersion\";\n+\n+  // variables to throttle certain, high frequency events\n+  private static final int COMPUTED_ERROR_SAMPLE_RATE = 100;\n+  @SuppressWarnings(\"ConstantConditions\")\n+  @NotNull private static final Duration INTERVAL_TO_REPORT_MEMORY_USAGE = Duration.ofHours(1);\n+  @NotNull final RequestListener requestListener;\n+  @NotNull final ResponseListener responseListener;\n+  @NotNull final DartQuickFixListener quickFixListener;\n+  // instance members\n+  @NotNull private final Project project;\n+  @NotNull private final Map<String, List<AnalysisError>> pathToErrors;\n+  @NotNull private final Map<String, Instant> pathToErrorTimestamps;\n+  @NotNull private final Map<String, Instant> pathToHighlightTimestamps;\n+  @NotNull private final Map<String, Instant> pathToOutlineTimestamps;\n+  @NotNull private final Map<String, RequestDetails> requestToDetails;\n+  @NotNull private final FileEditorManagerListener fileEditorManagerListener;\n+  LookupSelectionHandler lookupSelectionHandler;\n+  private int computedErrorCounter = 0;\n+  @NotNull private Instant nextMemoryUsageLoggedInstant = Instant.EPOCH;\n+\n+  FlutterAnalysisServerListener(@NotNull Project project) {\n+    this.project = project;\n+    this.pathToErrors = new HashMap<>();\n+    this.pathToErrorTimestamps = new HashMap<>();\n+    this.pathToHighlightTimestamps = new HashMap<>();\n+    this.pathToOutlineTimestamps = new HashMap<>();\n+    this.requestToDetails = new HashMap<>();\n+    LookupManager.getInstance(project).addPropertyChangeListener(this::onPropertyChange);\n+\n+    this.fileEditorManagerListener = new FileEditorManagerListener() {\n+      @Override\n+      public void fileOpened(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n+        // Record the time that this file was opened so that we'll be able to log\n+        // relative timings for errors, highlights, outlines, etc.\n+        String filePath = file.getPath();\n+        Instant nowInstant = Instant.now();\n+        pathToErrorTimestamps.put(filePath, nowInstant);\n+        pathToHighlightTimestamps.put(filePath, nowInstant);\n+        pathToOutlineTimestamps.put(filePath, nowInstant);\n+      }\n+\n+      @Override\n+      public void selectionChanged(@NotNull FileEditorManagerEvent event) {\n+      }\n+\n+      @Override\n+      public void fileClosed(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n+      }\n+    };\n+    project.getMessageBus().connect().subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER, fileEditorManagerListener);\n+    this.quickFixListener = new QuickFixListener();\n+    this.requestListener = new FlutterRequestListener();\n+    this.responseListener = new FlutterResponseListener();\n+    DartAnalysisServerService analysisServer = DartAnalysisServerService.getInstance(project);\n+    analysisServer.setServerLogSubscription(true);\n+    analysisServer.addQuickFixListener(this.quickFixListener);\n+    analysisServer.addRequestListener(this.requestListener);\n+    analysisServer.addResponseListener(this.responseListener);\n+  }\n+\n+  @NotNull\n+  public static FlutterAnalysisServerListener getInstance(@NotNull final Project project) {\n+    return Objects.requireNonNull(project.getService(FlutterAnalysisServerListener.class));\n+  }\n+\n+  @NotNull\n+  private static String safelyGetString(JsonObject jsonObject, String memberName) {\n+    if (jsonObject != null && StringUtil.isNotEmpty(memberName)) {\n+      JsonElement jsonElement = jsonObject.get(memberName);\n+      if (jsonElement != null) {\n+        return Objects.requireNonNull(jsonElement.getAsString());\n+      }\n+    }\n+    return \"\";\n+  }\n+\n+  @Override\n+  public void dispose() {\n+    // This is deprecated and marked for removal in 2021.3. If it is removed we will\n+    // have to do some funny stuff to support older versions of Android Studio.\n+    LookupManager.getInstance(project).removePropertyChangeListener(this::onPropertyChange);\n+  }\n+\n+  @Override\n+  public void computedAnalyzedFiles(List<String> list) {\n+  }\n+\n+  @Override\n+  public void computedAvailableSuggestions(@NotNull List<AvailableSuggestionSet> list, int[] ints) {\n+  }\n+\n+  @Override\n+  public void computedCompletion(String completionId,\n+                                 int replacementOffset,\n+                                 int replacementLength,\n+                                 List<CompletionSuggestion> completionSuggestions,\n+                                 List<IncludedSuggestionSet> includedSuggestionSets,\n+                                 List<String> includedElementKinds,\n+                                 List<IncludedSuggestionRelevanceTag> includedSuggestionRelevanceTags,\n+                                 boolean isLast,\n+                                 String libraryFilePathSD) {\n+  }\n+\n+  @Override\n+  public void computedErrors(String path, List<AnalysisError> list) {\n+    assert list != null;\n+    list.forEach(this::logAnalysisError);\n+    pathToErrors.put(path, list);",
            "html_url": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r836857070",
            "id": 836857070,
            "in_reply_to_id": 835534901,
            "line": 205,
            "node_id": "PRRC_kwDOA9MwhM4x4Wzu",
            "original_commit_id": "1cea9a46645ac63344af583ece3e3c0a1825eb3b",
            "original_line": 205,
            "original_position": 186,
            "original_start_line": null,
            "path": "flutter-idea/src/io/flutter/analytics/FlutterAnalysisServerListener.java",
            "position": 205,
            "pull_request_review_id": 923762219,
            "pull_request_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/836857070/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-03-28T21:15:09Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/836857070",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r836874355"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985"
                },
                "self": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/836874355"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "We need to log far fewer events. Logging analytics needs to not be the reason why users have poor performance or complain our tools use too much of their bandwidth. I would suggest changing all these analytics so a single analytic event or a couple of events are logged summarizing the state of all errors reported rather than ever emitting events proportional to the number of errors or files.",
            "commit_id": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "created_at": "2022-03-28T21:42:11Z",
            "diff_hunk": "@@ -0,0 +1,521 @@\n+package io.flutter.analytics;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.dart.server.AnalysisServerListenerAdapter;\n+import com.google.dart.server.RequestListener;\n+import com.google.dart.server.ResponseListener;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.intellij.codeInsight.lookup.LookupEvent;\n+import com.intellij.codeInsight.lookup.LookupListener;\n+import com.intellij.codeInsight.lookup.LookupManager;\n+import com.intellij.codeInsight.lookup.impl.LookupImpl;\n+import com.intellij.openapi.Disposable;\n+import com.intellij.openapi.application.ApplicationManager;\n+import com.intellij.openapi.editor.Editor;\n+import com.intellij.openapi.fileEditor.FileEditorManager;\n+import com.intellij.openapi.fileEditor.FileEditorManagerEvent;\n+import com.intellij.openapi.fileEditor.FileEditorManagerListener;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.util.text.StringUtil;\n+import com.intellij.openapi.vfs.VirtualFile;\n+import com.intellij.psi.PsiFile;\n+import com.jetbrains.lang.dart.analyzer.DartAnalysisServerService;\n+import com.jetbrains.lang.dart.fixes.DartQuickFix;\n+import com.jetbrains.lang.dart.fixes.DartQuickFixListener;\n+import io.flutter.FlutterInitializer;\n+import io.flutter.utils.FileUtils;\n+import org.dartlang.analysis.server.protocol.*;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.beans.PropertyChangeEvent;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+@SuppressWarnings(\"LocalCanBeFinal\")\n+public final class FlutterAnalysisServerListener extends AnalysisServerListenerAdapter implements Disposable {\n+  // statics\n+  static final String COMPUTED_ERROR = \"computedError\";\n+  static final String INITIAL_COMPUTE_ERRORS_TIME = \"initialComputeErrorsTime\";\n+  static final String INITIAL_HIGHLIGHTS_TIME = \"initialHighlightsTime\";\n+  static final String INITIAL_OUTLINE_TIME = \"initialOutlineTime\";\n+  static final String ROUND_TRIP_TIME = \"roundTripTime\";\n+  static final String QUICK_FIX = \"quickFix\";\n+  static final String UNKNOWN_LOOKUP_STRING = \"<unknown>\";\n+  static final String ANALYSIS_SERVER_LOG = \"analysisServerLog\";\n+  static final String ACCEPTED_COMPLETION = \"acceptedCompletion\";\n+  static final String REJECTED_COMPLETION = \"rejectedCompletion\";\n+  static final String E2E_IJ_COMPLETION_TIME = \"e2eIJCompletionTime\";\n+  static final String ERRORS = \"errors\";\n+  static final String WARNINGS = \"warnings\";\n+  static final String HINTS = \"hints\";\n+  static final String LINTS = \"lints\";\n+  static final String DURATION = \"duration\";\n+  static final String FAILURE = \"failure\";\n+  static final String SUCCESS = \"success\";\n+  static final String ERROR_TYPE_REQUEST = \"R\";\n+  static final String ERROR_TYPE_SERVER = \"@\";\n+\n+  static final String DAS_STATUS_EVENT_TYPE = \"analysisServerStatus\";\n+  static final String[] ERROR_TYPES = new String[]{\n+    AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR,\n+    AnalysisErrorType.COMPILE_TIME_ERROR,\n+    AnalysisErrorType.HINT,\n+    AnalysisErrorType.LINT,\n+    AnalysisErrorType.STATIC_TYPE_WARNING,\n+    AnalysisErrorType.STATIC_WARNING,\n+    AnalysisErrorType.SYNTACTIC_ERROR\n+  };\n+\n+  static final String LOG_ENTRY_KIND = \"kind\";\n+  static final String LOG_ENTRY_TIME = \"time\";\n+  static final String LOG_ENTRY_DATA = \"data\";\n+  static final String LOG_ENTRY_SDK_VERSION = \"sdkVersion\";\n+\n+  // variables to throttle certain, high frequency events\n+  private static final int COMPUTED_ERROR_SAMPLE_RATE = 100;\n+  @SuppressWarnings(\"ConstantConditions\")\n+  @NotNull private static final Duration INTERVAL_TO_REPORT_MEMORY_USAGE = Duration.ofHours(1);\n+  @NotNull final RequestListener requestListener;\n+  @NotNull final ResponseListener responseListener;\n+  @NotNull final DartQuickFixListener quickFixListener;\n+  // instance members\n+  @NotNull private final Project project;\n+  @NotNull private final Map<String, List<AnalysisError>> pathToErrors;\n+  @NotNull private final Map<String, Instant> pathToErrorTimestamps;\n+  @NotNull private final Map<String, Instant> pathToHighlightTimestamps;\n+  @NotNull private final Map<String, Instant> pathToOutlineTimestamps;\n+  @NotNull private final Map<String, RequestDetails> requestToDetails;\n+  @NotNull private final FileEditorManagerListener fileEditorManagerListener;\n+  LookupSelectionHandler lookupSelectionHandler;\n+  private int computedErrorCounter = 0;\n+  @NotNull private Instant nextMemoryUsageLoggedInstant = Instant.EPOCH;\n+\n+  FlutterAnalysisServerListener(@NotNull Project project) {\n+    this.project = project;\n+    this.pathToErrors = new HashMap<>();\n+    this.pathToErrorTimestamps = new HashMap<>();\n+    this.pathToHighlightTimestamps = new HashMap<>();\n+    this.pathToOutlineTimestamps = new HashMap<>();\n+    this.requestToDetails = new HashMap<>();\n+    LookupManager.getInstance(project).addPropertyChangeListener(this::onPropertyChange);\n+\n+    this.fileEditorManagerListener = new FileEditorManagerListener() {\n+      @Override\n+      public void fileOpened(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n+        // Record the time that this file was opened so that we'll be able to log\n+        // relative timings for errors, highlights, outlines, etc.\n+        String filePath = file.getPath();\n+        Instant nowInstant = Instant.now();\n+        pathToErrorTimestamps.put(filePath, nowInstant);\n+        pathToHighlightTimestamps.put(filePath, nowInstant);\n+        pathToOutlineTimestamps.put(filePath, nowInstant);\n+      }\n+\n+      @Override\n+      public void selectionChanged(@NotNull FileEditorManagerEvent event) {\n+      }\n+\n+      @Override\n+      public void fileClosed(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n+      }\n+    };\n+    project.getMessageBus().connect().subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER, fileEditorManagerListener);\n+    this.quickFixListener = new QuickFixListener();\n+    this.requestListener = new FlutterRequestListener();\n+    this.responseListener = new FlutterResponseListener();\n+    DartAnalysisServerService analysisServer = DartAnalysisServerService.getInstance(project);\n+    analysisServer.setServerLogSubscription(true);\n+    analysisServer.addQuickFixListener(this.quickFixListener);\n+    analysisServer.addRequestListener(this.requestListener);\n+    analysisServer.addResponseListener(this.responseListener);\n+  }\n+\n+  @NotNull\n+  public static FlutterAnalysisServerListener getInstance(@NotNull final Project project) {\n+    return Objects.requireNonNull(project.getService(FlutterAnalysisServerListener.class));\n+  }\n+\n+  @NotNull\n+  private static String safelyGetString(JsonObject jsonObject, String memberName) {\n+    if (jsonObject != null && StringUtil.isNotEmpty(memberName)) {\n+      JsonElement jsonElement = jsonObject.get(memberName);\n+      if (jsonElement != null) {\n+        return Objects.requireNonNull(jsonElement.getAsString());\n+      }\n+    }\n+    return \"\";\n+  }\n+\n+  @Override\n+  public void dispose() {\n+    // This is deprecated and marked for removal in 2021.3. If it is removed we will\n+    // have to do some funny stuff to support older versions of Android Studio.\n+    LookupManager.getInstance(project).removePropertyChangeListener(this::onPropertyChange);\n+  }\n+\n+  @Override\n+  public void computedAnalyzedFiles(List<String> list) {\n+  }\n+\n+  @Override\n+  public void computedAvailableSuggestions(@NotNull List<AvailableSuggestionSet> list, int[] ints) {\n+  }\n+\n+  @Override\n+  public void computedCompletion(String completionId,\n+                                 int replacementOffset,\n+                                 int replacementLength,\n+                                 List<CompletionSuggestion> completionSuggestions,\n+                                 List<IncludedSuggestionSet> includedSuggestionSets,\n+                                 List<String> includedElementKinds,\n+                                 List<IncludedSuggestionRelevanceTag> includedSuggestionRelevanceTags,\n+                                 boolean isLast,\n+                                 String libraryFilePathSD) {\n+  }\n+\n+  @Override\n+  public void computedErrors(String path, List<AnalysisError> list) {\n+    assert list != null;\n+    list.forEach(this::logAnalysisError);\n+    pathToErrors.put(path, list);\n+    assert path != null;\n+    maybeLogInitialAnalysisTime(INITIAL_COMPUTE_ERRORS_TIME, path, pathToErrorTimestamps);\n+  }\n+\n+  @NotNull\n+  public List<AnalysisError> getAnalysisErrorsForFile(String path) {\n+    if (path == null) {\n+      return AnalysisError.EMPTY_LIST;\n+    }\n+    return Objects.requireNonNull(pathToErrors.getOrDefault(path, AnalysisError.EMPTY_LIST));\n+  }\n+\n+  /**\n+   * Iterate through all files in this {@link Project}, counting how many of each {@link\n+   * AnalysisErrorType} is in each file. The returned {@link HashMap} will contain the set of String\n+   * keys in ERROR_TYPES and values with the mentioned sums, converted to Strings.\n+   */\n+  @NotNull\n+  private HashMap<String, Integer> getTotalAnalysisErrorCounts() {\n+    // Create a zero-filled array of length ERROR_TYPES.length.\n+    int[] errorCountsArray = new int[ERROR_TYPES.length];\n+\n+    // Iterate through each file in this project.\n+    for (String keyPath : pathToErrors.keySet()) {\n+      // Get the list of AnalysisErrors and remove any todos from the list, these are ignored in the\n+      // Dart Problems view, and can be ignored for any dashboard work.\n+      assert keyPath != null;\n+      List<AnalysisError> errors = getAnalysisErrorsForFile(keyPath);\n+      errors.removeIf(e -> {\n+        assert e != null;\n+        return Objects.equals(e.getType(), AnalysisErrorType.TODO);\n+      });\n+      if (errors.isEmpty()) {\n+        continue;\n+      }\n+\n+      // For this file, count how many of each ERROR_TYPES type we have and add this count to each\n+      // errorCountsArray[*]\n+      for (int i = 0; i < ERROR_TYPES.length; i++) {\n+        final int j = i;\n+        errorCountsArray[j] += errors.stream().filter(e -> {\n+          assert e != null;\n+          return Objects.equals(e.getType(), ERROR_TYPES[j]);\n+        }).count();\n+      }\n+    }\n+\n+    // Finally, create and return the final HashMap.\n+    HashMap<String, Integer> errorCounts = new HashMap<>();\n+    for (int i = 0; i < ERROR_TYPES.length; i++) {\n+      errorCounts.put(ERROR_TYPES[i], errorCountsArray[i]);\n+    }\n+    return errorCounts;\n+  }\n+\n+  @Override\n+  public void computedHighlights(String path, List<HighlightRegion> list) {\n+    assert path != null;\n+    maybeLogInitialAnalysisTime(INITIAL_HIGHLIGHTS_TIME, path, pathToHighlightTimestamps);\n+  }\n+\n+  @Override\n+  public void computedImplemented(String s, List<ImplementedClass> list, List<ImplementedMember> list1) {\n+  }\n+\n+  @Override\n+  public void computedLaunchData(String s, String s1, String[] strings) {\n+  }\n+\n+  @Override\n+  public void computedNavigation(String s, List<NavigationRegion> list) {\n+  }\n+\n+  @Override\n+  public void computedOccurrences(String s, List<Occurrences> list) {\n+  }\n+\n+  @Override\n+  public void computedOutline(String path, Outline outline) {\n+    assert path != null;\n+    maybeLogInitialAnalysisTime(INITIAL_OUTLINE_TIME, path, pathToOutlineTimestamps);\n+  }\n+\n+  @Override\n+  public void computedOverrides(String s, List<OverrideMember> list) {\n+  }\n+\n+  @Override\n+  public void computedClosingLabels(String s, List<ClosingLabel> list) {\n+  }\n+\n+  @Override\n+  public void computedSearchResults(String s, List<SearchResult> list, boolean b) {\n+  }\n+\n+  @Override\n+  public void flushedResults(List<String> list) {\n+  }\n+\n+  @Override\n+  public void requestError(RequestError requestError) {\n+    assert requestError != null;\n+    String code = requestError.getCode();\n+    if (code == null) {\n+      code = requestError.getMessage(); // test: requestErrorNoCode()\n+    }\n+    String stack = requestError.getStackTrace();\n+    String exception = composeException(ERROR_TYPE_REQUEST, code, stack);\n+    FlutterInitializer.getAnalytics().sendException(exception, false); // test: requestError()\n+  }\n+\n+  /**\n+   * Build an exception parameter containing type, code, and stack. Limit it to 150 chars.\n+   *\n+   * @param type  \"R\" for request error, \"S\" for server error\n+   * @param code  error code or message\n+   * @param stack stack trace\n+   * @return exception description, value of \"exd\" parameter in analytics\n+   */\n+  private static String composeException(@NotNull String type, @Nullable String code, @Nullable String stack) {\n+    String exception = type + \" \";\n+    if (code != null && !code.isEmpty()) {\n+      exception += code;\n+      if (stack != null && !stack.isEmpty()) {\n+        exception += \"\\n\" + stack;\n+      }\n+    }\n+    else if (stack != null && !stack.isEmpty()) {\n+      exception += stack;\n+    }\n+    else {\n+      exception += \"exception\";\n+    }\n+    if (exception.length() > 150) {\n+      exception = exception.substring(0, 149);\n+    }\n+    return exception;\n+  }\n+\n+  @Override\n+  public void serverConnected(String s) {\n+  }\n+\n+  @Override\n+  public void serverError(boolean isFatal, String message, String stackTraceString) {\n+    String exception = composeException(ERROR_TYPE_SERVER, message, stackTraceString);\n+    FlutterInitializer.getAnalytics().sendException(exception, isFatal); // test: serverError()\n+  }\n+\n+  @Override\n+  public void serverIncompatibleVersion(String s) {\n+  }\n+\n+  @Override\n+  public void serverStatus(AnalysisStatus analysisStatus, PubStatus pubStatus) {\n+    assert analysisStatus != null;\n+    if (!analysisStatus.isAnalyzing()) {\n+      @NotNull HashMap<String, Integer> errorCounts = getTotalAnalysisErrorCounts();\n+      int errorCount = 0;\n+      errorCount += extractCount(errorCounts, AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR);\n+      errorCount += extractCount(errorCounts, AnalysisErrorType.COMPILE_TIME_ERROR);\n+      errorCount += extractCount(errorCounts, AnalysisErrorType.SYNTACTIC_ERROR);\n+      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, ERRORS, errorCount); // test: serverStatus()\n+      int warningCount = 0;\n+      warningCount += extractCount(errorCounts, AnalysisErrorType.STATIC_TYPE_WARNING);\n+      warningCount += extractCount(errorCounts, AnalysisErrorType.STATIC_WARNING);\n+      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, WARNINGS, warningCount); // test: serverStatus()\n+      int hintCount = extractCount(errorCounts, AnalysisErrorType.HINT);\n+      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, HINTS, hintCount); // test: serverStatus()\n+      int lintCount = extractCount(errorCounts, AnalysisErrorType.LINT);\n+      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, LINTS, lintCount); // test: serverStatus()\n+    }\n+  }\n+\n+  private static int extractCount(@NotNull Map<String, Integer> errorCounts, String name) {\n+    //noinspection Java8MapApi,ConstantConditions\n+    return errorCounts.containsKey(AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR) ? errorCounts.get(\n+      AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR) : 0;\n+  }\n+\n+  @Override\n+  public void computedExistingImports(String file, Map<String, Map<String, Set<String>>> existingImports) {\n+  }\n+\n+  private static void logCompletion(@NotNull String selection, int prefixLength, @NotNull String eventType) {\n+    FlutterInitializer.getAnalytics().sendEventMetric(eventType, selection, prefixLength); // test: acceptedCompletion(), lookupCanceled()\n+  }\n+\n+  void logE2ECompletionSuccessMS(long e2eCompletionMS) {\n+    FlutterInitializer.getAnalytics().sendTiming(E2E_IJ_COMPLETION_TIME, SUCCESS, e2eCompletionMS); // test: logE2ECompletionSuccessMS()\n+  }\n+\n+  void logE2ECompletionErrorMS(long e2eCompletionMS) {\n+    FlutterInitializer.getAnalytics().sendTiming(E2E_IJ_COMPLETION_TIME, FAILURE, e2eCompletionMS); // test: logE2ECompletionErrorMS()\n+  }\n+\n+  private void logAnalysisError(@Nullable AnalysisError error) {",
            "html_url": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r836874355",
            "id": 836874355,
            "in_reply_to_id": 835532627,
            "line": null,
            "node_id": "PRRC_kwDOA9MwhM4x4bBz",
            "original_commit_id": "1cea9a46645ac63344af583ece3e3c0a1825eb3b",
            "original_line": 387,
            "original_position": 383,
            "original_start_line": null,
            "path": "flutter-idea/src/io/flutter/analytics/FlutterAnalysisServerListener.java",
            "position": null,
            "pull_request_review_id": 923785557,
            "pull_request_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/836874355/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-03-28T21:42:12Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/836874355",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1226812?v=4",
                "events_url": "https://api.github.com/users/jacob314/events{/privacy}",
                "followers_url": "https://api.github.com/users/jacob314/followers",
                "following_url": "https://api.github.com/users/jacob314/following{/other_user}",
                "gists_url": "https://api.github.com/users/jacob314/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jacob314",
                "id": 1226812,
                "login": "jacob314",
                "node_id": "MDQ6VXNlcjEyMjY4MTI=",
                "organizations_url": "https://api.github.com/users/jacob314/orgs",
                "received_events_url": "https://api.github.com/users/jacob314/received_events",
                "repos_url": "https://api.github.com/users/jacob314/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jacob314/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jacob314/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jacob314"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r836926931"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985"
                },
                "self": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/836926931"
                }
            },
            "author_association": "MEMBER",
            "body": "I think this will be straight-forward to change. I'll drop the call to `logAnalysisError` for each error and clean up unused elements. We already log the summary info in `serverStatus`.",
            "commit_id": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "created_at": "2022-03-28T23:16:12Z",
            "diff_hunk": "@@ -0,0 +1,521 @@\n+package io.flutter.analytics;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.dart.server.AnalysisServerListenerAdapter;\n+import com.google.dart.server.RequestListener;\n+import com.google.dart.server.ResponseListener;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.intellij.codeInsight.lookup.LookupEvent;\n+import com.intellij.codeInsight.lookup.LookupListener;\n+import com.intellij.codeInsight.lookup.LookupManager;\n+import com.intellij.codeInsight.lookup.impl.LookupImpl;\n+import com.intellij.openapi.Disposable;\n+import com.intellij.openapi.application.ApplicationManager;\n+import com.intellij.openapi.editor.Editor;\n+import com.intellij.openapi.fileEditor.FileEditorManager;\n+import com.intellij.openapi.fileEditor.FileEditorManagerEvent;\n+import com.intellij.openapi.fileEditor.FileEditorManagerListener;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.util.text.StringUtil;\n+import com.intellij.openapi.vfs.VirtualFile;\n+import com.intellij.psi.PsiFile;\n+import com.jetbrains.lang.dart.analyzer.DartAnalysisServerService;\n+import com.jetbrains.lang.dart.fixes.DartQuickFix;\n+import com.jetbrains.lang.dart.fixes.DartQuickFixListener;\n+import io.flutter.FlutterInitializer;\n+import io.flutter.utils.FileUtils;\n+import org.dartlang.analysis.server.protocol.*;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.beans.PropertyChangeEvent;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+@SuppressWarnings(\"LocalCanBeFinal\")\n+public final class FlutterAnalysisServerListener extends AnalysisServerListenerAdapter implements Disposable {\n+  // statics\n+  static final String COMPUTED_ERROR = \"computedError\";\n+  static final String INITIAL_COMPUTE_ERRORS_TIME = \"initialComputeErrorsTime\";\n+  static final String INITIAL_HIGHLIGHTS_TIME = \"initialHighlightsTime\";\n+  static final String INITIAL_OUTLINE_TIME = \"initialOutlineTime\";\n+  static final String ROUND_TRIP_TIME = \"roundTripTime\";\n+  static final String QUICK_FIX = \"quickFix\";\n+  static final String UNKNOWN_LOOKUP_STRING = \"<unknown>\";\n+  static final String ANALYSIS_SERVER_LOG = \"analysisServerLog\";\n+  static final String ACCEPTED_COMPLETION = \"acceptedCompletion\";\n+  static final String REJECTED_COMPLETION = \"rejectedCompletion\";\n+  static final String E2E_IJ_COMPLETION_TIME = \"e2eIJCompletionTime\";\n+  static final String ERRORS = \"errors\";\n+  static final String WARNINGS = \"warnings\";\n+  static final String HINTS = \"hints\";\n+  static final String LINTS = \"lints\";\n+  static final String DURATION = \"duration\";\n+  static final String FAILURE = \"failure\";\n+  static final String SUCCESS = \"success\";\n+  static final String ERROR_TYPE_REQUEST = \"R\";\n+  static final String ERROR_TYPE_SERVER = \"@\";\n+\n+  static final String DAS_STATUS_EVENT_TYPE = \"analysisServerStatus\";\n+  static final String[] ERROR_TYPES = new String[]{\n+    AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR,\n+    AnalysisErrorType.COMPILE_TIME_ERROR,\n+    AnalysisErrorType.HINT,\n+    AnalysisErrorType.LINT,\n+    AnalysisErrorType.STATIC_TYPE_WARNING,\n+    AnalysisErrorType.STATIC_WARNING,\n+    AnalysisErrorType.SYNTACTIC_ERROR\n+  };\n+\n+  static final String LOG_ENTRY_KIND = \"kind\";\n+  static final String LOG_ENTRY_TIME = \"time\";\n+  static final String LOG_ENTRY_DATA = \"data\";\n+  static final String LOG_ENTRY_SDK_VERSION = \"sdkVersion\";\n+\n+  // variables to throttle certain, high frequency events\n+  private static final int COMPUTED_ERROR_SAMPLE_RATE = 100;\n+  @SuppressWarnings(\"ConstantConditions\")\n+  @NotNull private static final Duration INTERVAL_TO_REPORT_MEMORY_USAGE = Duration.ofHours(1);\n+  @NotNull final RequestListener requestListener;\n+  @NotNull final ResponseListener responseListener;\n+  @NotNull final DartQuickFixListener quickFixListener;\n+  // instance members\n+  @NotNull private final Project project;\n+  @NotNull private final Map<String, List<AnalysisError>> pathToErrors;\n+  @NotNull private final Map<String, Instant> pathToErrorTimestamps;\n+  @NotNull private final Map<String, Instant> pathToHighlightTimestamps;\n+  @NotNull private final Map<String, Instant> pathToOutlineTimestamps;\n+  @NotNull private final Map<String, RequestDetails> requestToDetails;\n+  @NotNull private final FileEditorManagerListener fileEditorManagerListener;\n+  LookupSelectionHandler lookupSelectionHandler;\n+  private int computedErrorCounter = 0;\n+  @NotNull private Instant nextMemoryUsageLoggedInstant = Instant.EPOCH;\n+\n+  FlutterAnalysisServerListener(@NotNull Project project) {\n+    this.project = project;\n+    this.pathToErrors = new HashMap<>();\n+    this.pathToErrorTimestamps = new HashMap<>();\n+    this.pathToHighlightTimestamps = new HashMap<>();\n+    this.pathToOutlineTimestamps = new HashMap<>();\n+    this.requestToDetails = new HashMap<>();\n+    LookupManager.getInstance(project).addPropertyChangeListener(this::onPropertyChange);\n+\n+    this.fileEditorManagerListener = new FileEditorManagerListener() {\n+      @Override\n+      public void fileOpened(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n+        // Record the time that this file was opened so that we'll be able to log\n+        // relative timings for errors, highlights, outlines, etc.\n+        String filePath = file.getPath();\n+        Instant nowInstant = Instant.now();\n+        pathToErrorTimestamps.put(filePath, nowInstant);\n+        pathToHighlightTimestamps.put(filePath, nowInstant);\n+        pathToOutlineTimestamps.put(filePath, nowInstant);\n+      }\n+\n+      @Override\n+      public void selectionChanged(@NotNull FileEditorManagerEvent event) {\n+      }\n+\n+      @Override\n+      public void fileClosed(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n+      }\n+    };\n+    project.getMessageBus().connect().subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER, fileEditorManagerListener);\n+    this.quickFixListener = new QuickFixListener();\n+    this.requestListener = new FlutterRequestListener();\n+    this.responseListener = new FlutterResponseListener();\n+    DartAnalysisServerService analysisServer = DartAnalysisServerService.getInstance(project);\n+    analysisServer.setServerLogSubscription(true);\n+    analysisServer.addQuickFixListener(this.quickFixListener);\n+    analysisServer.addRequestListener(this.requestListener);\n+    analysisServer.addResponseListener(this.responseListener);\n+  }\n+\n+  @NotNull\n+  public static FlutterAnalysisServerListener getInstance(@NotNull final Project project) {\n+    return Objects.requireNonNull(project.getService(FlutterAnalysisServerListener.class));\n+  }\n+\n+  @NotNull\n+  private static String safelyGetString(JsonObject jsonObject, String memberName) {\n+    if (jsonObject != null && StringUtil.isNotEmpty(memberName)) {\n+      JsonElement jsonElement = jsonObject.get(memberName);\n+      if (jsonElement != null) {\n+        return Objects.requireNonNull(jsonElement.getAsString());\n+      }\n+    }\n+    return \"\";\n+  }\n+\n+  @Override\n+  public void dispose() {\n+    // This is deprecated and marked for removal in 2021.3. If it is removed we will\n+    // have to do some funny stuff to support older versions of Android Studio.\n+    LookupManager.getInstance(project).removePropertyChangeListener(this::onPropertyChange);\n+  }\n+\n+  @Override\n+  public void computedAnalyzedFiles(List<String> list) {\n+  }\n+\n+  @Override\n+  public void computedAvailableSuggestions(@NotNull List<AvailableSuggestionSet> list, int[] ints) {\n+  }\n+\n+  @Override\n+  public void computedCompletion(String completionId,\n+                                 int replacementOffset,\n+                                 int replacementLength,\n+                                 List<CompletionSuggestion> completionSuggestions,\n+                                 List<IncludedSuggestionSet> includedSuggestionSets,\n+                                 List<String> includedElementKinds,\n+                                 List<IncludedSuggestionRelevanceTag> includedSuggestionRelevanceTags,\n+                                 boolean isLast,\n+                                 String libraryFilePathSD) {\n+  }\n+\n+  @Override\n+  public void computedErrors(String path, List<AnalysisError> list) {\n+    assert list != null;\n+    list.forEach(this::logAnalysisError);\n+    pathToErrors.put(path, list);\n+    assert path != null;\n+    maybeLogInitialAnalysisTime(INITIAL_COMPUTE_ERRORS_TIME, path, pathToErrorTimestamps);\n+  }\n+\n+  @NotNull\n+  public List<AnalysisError> getAnalysisErrorsForFile(String path) {\n+    if (path == null) {\n+      return AnalysisError.EMPTY_LIST;\n+    }\n+    return Objects.requireNonNull(pathToErrors.getOrDefault(path, AnalysisError.EMPTY_LIST));\n+  }\n+\n+  /**\n+   * Iterate through all files in this {@link Project}, counting how many of each {@link\n+   * AnalysisErrorType} is in each file. The returned {@link HashMap} will contain the set of String\n+   * keys in ERROR_TYPES and values with the mentioned sums, converted to Strings.\n+   */\n+  @NotNull\n+  private HashMap<String, Integer> getTotalAnalysisErrorCounts() {\n+    // Create a zero-filled array of length ERROR_TYPES.length.\n+    int[] errorCountsArray = new int[ERROR_TYPES.length];\n+\n+    // Iterate through each file in this project.\n+    for (String keyPath : pathToErrors.keySet()) {\n+      // Get the list of AnalysisErrors and remove any todos from the list, these are ignored in the\n+      // Dart Problems view, and can be ignored for any dashboard work.\n+      assert keyPath != null;\n+      List<AnalysisError> errors = getAnalysisErrorsForFile(keyPath);\n+      errors.removeIf(e -> {\n+        assert e != null;\n+        return Objects.equals(e.getType(), AnalysisErrorType.TODO);\n+      });\n+      if (errors.isEmpty()) {\n+        continue;\n+      }\n+\n+      // For this file, count how many of each ERROR_TYPES type we have and add this count to each\n+      // errorCountsArray[*]\n+      for (int i = 0; i < ERROR_TYPES.length; i++) {\n+        final int j = i;\n+        errorCountsArray[j] += errors.stream().filter(e -> {\n+          assert e != null;\n+          return Objects.equals(e.getType(), ERROR_TYPES[j]);\n+        }).count();\n+      }\n+    }\n+\n+    // Finally, create and return the final HashMap.\n+    HashMap<String, Integer> errorCounts = new HashMap<>();\n+    for (int i = 0; i < ERROR_TYPES.length; i++) {\n+      errorCounts.put(ERROR_TYPES[i], errorCountsArray[i]);\n+    }\n+    return errorCounts;\n+  }\n+\n+  @Override\n+  public void computedHighlights(String path, List<HighlightRegion> list) {\n+    assert path != null;\n+    maybeLogInitialAnalysisTime(INITIAL_HIGHLIGHTS_TIME, path, pathToHighlightTimestamps);\n+  }\n+\n+  @Override\n+  public void computedImplemented(String s, List<ImplementedClass> list, List<ImplementedMember> list1) {\n+  }\n+\n+  @Override\n+  public void computedLaunchData(String s, String s1, String[] strings) {\n+  }\n+\n+  @Override\n+  public void computedNavigation(String s, List<NavigationRegion> list) {\n+  }\n+\n+  @Override\n+  public void computedOccurrences(String s, List<Occurrences> list) {\n+  }\n+\n+  @Override\n+  public void computedOutline(String path, Outline outline) {\n+    assert path != null;\n+    maybeLogInitialAnalysisTime(INITIAL_OUTLINE_TIME, path, pathToOutlineTimestamps);\n+  }\n+\n+  @Override\n+  public void computedOverrides(String s, List<OverrideMember> list) {\n+  }\n+\n+  @Override\n+  public void computedClosingLabels(String s, List<ClosingLabel> list) {\n+  }\n+\n+  @Override\n+  public void computedSearchResults(String s, List<SearchResult> list, boolean b) {\n+  }\n+\n+  @Override\n+  public void flushedResults(List<String> list) {\n+  }\n+\n+  @Override\n+  public void requestError(RequestError requestError) {\n+    assert requestError != null;\n+    String code = requestError.getCode();\n+    if (code == null) {\n+      code = requestError.getMessage(); // test: requestErrorNoCode()\n+    }\n+    String stack = requestError.getStackTrace();\n+    String exception = composeException(ERROR_TYPE_REQUEST, code, stack);\n+    FlutterInitializer.getAnalytics().sendException(exception, false); // test: requestError()\n+  }\n+\n+  /**\n+   * Build an exception parameter containing type, code, and stack. Limit it to 150 chars.\n+   *\n+   * @param type  \"R\" for request error, \"S\" for server error\n+   * @param code  error code or message\n+   * @param stack stack trace\n+   * @return exception description, value of \"exd\" parameter in analytics\n+   */\n+  private static String composeException(@NotNull String type, @Nullable String code, @Nullable String stack) {\n+    String exception = type + \" \";\n+    if (code != null && !code.isEmpty()) {\n+      exception += code;\n+      if (stack != null && !stack.isEmpty()) {\n+        exception += \"\\n\" + stack;\n+      }\n+    }\n+    else if (stack != null && !stack.isEmpty()) {\n+      exception += stack;\n+    }\n+    else {\n+      exception += \"exception\";\n+    }\n+    if (exception.length() > 150) {\n+      exception = exception.substring(0, 149);\n+    }\n+    return exception;\n+  }\n+\n+  @Override\n+  public void serverConnected(String s) {\n+  }\n+\n+  @Override\n+  public void serverError(boolean isFatal, String message, String stackTraceString) {\n+    String exception = composeException(ERROR_TYPE_SERVER, message, stackTraceString);\n+    FlutterInitializer.getAnalytics().sendException(exception, isFatal); // test: serverError()\n+  }\n+\n+  @Override\n+  public void serverIncompatibleVersion(String s) {\n+  }\n+\n+  @Override\n+  public void serverStatus(AnalysisStatus analysisStatus, PubStatus pubStatus) {\n+    assert analysisStatus != null;\n+    if (!analysisStatus.isAnalyzing()) {\n+      @NotNull HashMap<String, Integer> errorCounts = getTotalAnalysisErrorCounts();\n+      int errorCount = 0;\n+      errorCount += extractCount(errorCounts, AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR);\n+      errorCount += extractCount(errorCounts, AnalysisErrorType.COMPILE_TIME_ERROR);\n+      errorCount += extractCount(errorCounts, AnalysisErrorType.SYNTACTIC_ERROR);\n+      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, ERRORS, errorCount); // test: serverStatus()\n+      int warningCount = 0;\n+      warningCount += extractCount(errorCounts, AnalysisErrorType.STATIC_TYPE_WARNING);\n+      warningCount += extractCount(errorCounts, AnalysisErrorType.STATIC_WARNING);\n+      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, WARNINGS, warningCount); // test: serverStatus()\n+      int hintCount = extractCount(errorCounts, AnalysisErrorType.HINT);\n+      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, HINTS, hintCount); // test: serverStatus()\n+      int lintCount = extractCount(errorCounts, AnalysisErrorType.LINT);\n+      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, LINTS, lintCount); // test: serverStatus()\n+    }\n+  }\n+\n+  private static int extractCount(@NotNull Map<String, Integer> errorCounts, String name) {\n+    //noinspection Java8MapApi,ConstantConditions\n+    return errorCounts.containsKey(AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR) ? errorCounts.get(\n+      AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR) : 0;\n+  }\n+\n+  @Override\n+  public void computedExistingImports(String file, Map<String, Map<String, Set<String>>> existingImports) {\n+  }\n+\n+  private static void logCompletion(@NotNull String selection, int prefixLength, @NotNull String eventType) {\n+    FlutterInitializer.getAnalytics().sendEventMetric(eventType, selection, prefixLength); // test: acceptedCompletion(), lookupCanceled()\n+  }\n+\n+  void logE2ECompletionSuccessMS(long e2eCompletionMS) {\n+    FlutterInitializer.getAnalytics().sendTiming(E2E_IJ_COMPLETION_TIME, SUCCESS, e2eCompletionMS); // test: logE2ECompletionSuccessMS()\n+  }\n+\n+  void logE2ECompletionErrorMS(long e2eCompletionMS) {\n+    FlutterInitializer.getAnalytics().sendTiming(E2E_IJ_COMPLETION_TIME, FAILURE, e2eCompletionMS); // test: logE2ECompletionErrorMS()\n+  }\n+\n+  private void logAnalysisError(@Nullable AnalysisError error) {",
            "html_url": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r836926931",
            "id": 836926931,
            "in_reply_to_id": 835532627,
            "line": null,
            "node_id": "PRRC_kwDOA9MwhM4x4n3T",
            "original_commit_id": "1cea9a46645ac63344af583ece3e3c0a1825eb3b",
            "original_line": 387,
            "original_position": 383,
            "original_start_line": null,
            "path": "flutter-idea/src/io/flutter/analytics/FlutterAnalysisServerListener.java",
            "position": null,
            "pull_request_review_id": 923854981,
            "pull_request_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/836926931/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-03-28T23:16:12Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/836926931",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r837737359"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985"
                },
                "self": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/837737359"
                }
            },
            "author_association": "MEMBER",
            "body": "Done! PTAL",
            "commit_id": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "created_at": "2022-03-29T17:36:36Z",
            "diff_hunk": "@@ -0,0 +1,521 @@\n+package io.flutter.analytics;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.dart.server.AnalysisServerListenerAdapter;\n+import com.google.dart.server.RequestListener;\n+import com.google.dart.server.ResponseListener;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.intellij.codeInsight.lookup.LookupEvent;\n+import com.intellij.codeInsight.lookup.LookupListener;\n+import com.intellij.codeInsight.lookup.LookupManager;\n+import com.intellij.codeInsight.lookup.impl.LookupImpl;\n+import com.intellij.openapi.Disposable;\n+import com.intellij.openapi.application.ApplicationManager;\n+import com.intellij.openapi.editor.Editor;\n+import com.intellij.openapi.fileEditor.FileEditorManager;\n+import com.intellij.openapi.fileEditor.FileEditorManagerEvent;\n+import com.intellij.openapi.fileEditor.FileEditorManagerListener;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.util.text.StringUtil;\n+import com.intellij.openapi.vfs.VirtualFile;\n+import com.intellij.psi.PsiFile;\n+import com.jetbrains.lang.dart.analyzer.DartAnalysisServerService;\n+import com.jetbrains.lang.dart.fixes.DartQuickFix;\n+import com.jetbrains.lang.dart.fixes.DartQuickFixListener;\n+import io.flutter.FlutterInitializer;\n+import io.flutter.utils.FileUtils;\n+import org.dartlang.analysis.server.protocol.*;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.beans.PropertyChangeEvent;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+@SuppressWarnings(\"LocalCanBeFinal\")\n+public final class FlutterAnalysisServerListener extends AnalysisServerListenerAdapter implements Disposable {\n+  // statics\n+  static final String COMPUTED_ERROR = \"computedError\";\n+  static final String INITIAL_COMPUTE_ERRORS_TIME = \"initialComputeErrorsTime\";\n+  static final String INITIAL_HIGHLIGHTS_TIME = \"initialHighlightsTime\";\n+  static final String INITIAL_OUTLINE_TIME = \"initialOutlineTime\";\n+  static final String ROUND_TRIP_TIME = \"roundTripTime\";\n+  static final String QUICK_FIX = \"quickFix\";\n+  static final String UNKNOWN_LOOKUP_STRING = \"<unknown>\";\n+  static final String ANALYSIS_SERVER_LOG = \"analysisServerLog\";\n+  static final String ACCEPTED_COMPLETION = \"acceptedCompletion\";\n+  static final String REJECTED_COMPLETION = \"rejectedCompletion\";\n+  static final String E2E_IJ_COMPLETION_TIME = \"e2eIJCompletionTime\";\n+  static final String ERRORS = \"errors\";\n+  static final String WARNINGS = \"warnings\";\n+  static final String HINTS = \"hints\";\n+  static final String LINTS = \"lints\";\n+  static final String DURATION = \"duration\";\n+  static final String FAILURE = \"failure\";\n+  static final String SUCCESS = \"success\";\n+  static final String ERROR_TYPE_REQUEST = \"R\";\n+  static final String ERROR_TYPE_SERVER = \"@\";\n+\n+  static final String DAS_STATUS_EVENT_TYPE = \"analysisServerStatus\";\n+  static final String[] ERROR_TYPES = new String[]{\n+    AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR,\n+    AnalysisErrorType.COMPILE_TIME_ERROR,\n+    AnalysisErrorType.HINT,\n+    AnalysisErrorType.LINT,\n+    AnalysisErrorType.STATIC_TYPE_WARNING,\n+    AnalysisErrorType.STATIC_WARNING,\n+    AnalysisErrorType.SYNTACTIC_ERROR\n+  };\n+\n+  static final String LOG_ENTRY_KIND = \"kind\";\n+  static final String LOG_ENTRY_TIME = \"time\";\n+  static final String LOG_ENTRY_DATA = \"data\";\n+  static final String LOG_ENTRY_SDK_VERSION = \"sdkVersion\";\n+\n+  // variables to throttle certain, high frequency events\n+  private static final int COMPUTED_ERROR_SAMPLE_RATE = 100;\n+  @SuppressWarnings(\"ConstantConditions\")\n+  @NotNull private static final Duration INTERVAL_TO_REPORT_MEMORY_USAGE = Duration.ofHours(1);\n+  @NotNull final RequestListener requestListener;\n+  @NotNull final ResponseListener responseListener;\n+  @NotNull final DartQuickFixListener quickFixListener;\n+  // instance members\n+  @NotNull private final Project project;\n+  @NotNull private final Map<String, List<AnalysisError>> pathToErrors;\n+  @NotNull private final Map<String, Instant> pathToErrorTimestamps;\n+  @NotNull private final Map<String, Instant> pathToHighlightTimestamps;\n+  @NotNull private final Map<String, Instant> pathToOutlineTimestamps;\n+  @NotNull private final Map<String, RequestDetails> requestToDetails;\n+  @NotNull private final FileEditorManagerListener fileEditorManagerListener;\n+  LookupSelectionHandler lookupSelectionHandler;\n+  private int computedErrorCounter = 0;\n+  @NotNull private Instant nextMemoryUsageLoggedInstant = Instant.EPOCH;\n+\n+  FlutterAnalysisServerListener(@NotNull Project project) {\n+    this.project = project;\n+    this.pathToErrors = new HashMap<>();\n+    this.pathToErrorTimestamps = new HashMap<>();\n+    this.pathToHighlightTimestamps = new HashMap<>();\n+    this.pathToOutlineTimestamps = new HashMap<>();\n+    this.requestToDetails = new HashMap<>();\n+    LookupManager.getInstance(project).addPropertyChangeListener(this::onPropertyChange);\n+\n+    this.fileEditorManagerListener = new FileEditorManagerListener() {\n+      @Override\n+      public void fileOpened(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n+        // Record the time that this file was opened so that we'll be able to log\n+        // relative timings for errors, highlights, outlines, etc.\n+        String filePath = file.getPath();\n+        Instant nowInstant = Instant.now();\n+        pathToErrorTimestamps.put(filePath, nowInstant);\n+        pathToHighlightTimestamps.put(filePath, nowInstant);\n+        pathToOutlineTimestamps.put(filePath, nowInstant);\n+      }\n+\n+      @Override\n+      public void selectionChanged(@NotNull FileEditorManagerEvent event) {\n+      }\n+\n+      @Override\n+      public void fileClosed(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n+      }\n+    };\n+    project.getMessageBus().connect().subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER, fileEditorManagerListener);\n+    this.quickFixListener = new QuickFixListener();\n+    this.requestListener = new FlutterRequestListener();\n+    this.responseListener = new FlutterResponseListener();\n+    DartAnalysisServerService analysisServer = DartAnalysisServerService.getInstance(project);\n+    analysisServer.setServerLogSubscription(true);\n+    analysisServer.addQuickFixListener(this.quickFixListener);\n+    analysisServer.addRequestListener(this.requestListener);\n+    analysisServer.addResponseListener(this.responseListener);\n+  }\n+\n+  @NotNull\n+  public static FlutterAnalysisServerListener getInstance(@NotNull final Project project) {\n+    return Objects.requireNonNull(project.getService(FlutterAnalysisServerListener.class));\n+  }\n+\n+  @NotNull\n+  private static String safelyGetString(JsonObject jsonObject, String memberName) {\n+    if (jsonObject != null && StringUtil.isNotEmpty(memberName)) {\n+      JsonElement jsonElement = jsonObject.get(memberName);\n+      if (jsonElement != null) {\n+        return Objects.requireNonNull(jsonElement.getAsString());\n+      }\n+    }\n+    return \"\";\n+  }\n+\n+  @Override\n+  public void dispose() {\n+    // This is deprecated and marked for removal in 2021.3. If it is removed we will\n+    // have to do some funny stuff to support older versions of Android Studio.\n+    LookupManager.getInstance(project).removePropertyChangeListener(this::onPropertyChange);\n+  }\n+\n+  @Override\n+  public void computedAnalyzedFiles(List<String> list) {\n+  }\n+\n+  @Override\n+  public void computedAvailableSuggestions(@NotNull List<AvailableSuggestionSet> list, int[] ints) {\n+  }\n+\n+  @Override\n+  public void computedCompletion(String completionId,\n+                                 int replacementOffset,\n+                                 int replacementLength,\n+                                 List<CompletionSuggestion> completionSuggestions,\n+                                 List<IncludedSuggestionSet> includedSuggestionSets,\n+                                 List<String> includedElementKinds,\n+                                 List<IncludedSuggestionRelevanceTag> includedSuggestionRelevanceTags,\n+                                 boolean isLast,\n+                                 String libraryFilePathSD) {\n+  }\n+\n+  @Override\n+  public void computedErrors(String path, List<AnalysisError> list) {\n+    assert list != null;\n+    list.forEach(this::logAnalysisError);\n+    pathToErrors.put(path, list);\n+    assert path != null;\n+    maybeLogInitialAnalysisTime(INITIAL_COMPUTE_ERRORS_TIME, path, pathToErrorTimestamps);\n+  }\n+\n+  @NotNull\n+  public List<AnalysisError> getAnalysisErrorsForFile(String path) {\n+    if (path == null) {\n+      return AnalysisError.EMPTY_LIST;\n+    }\n+    return Objects.requireNonNull(pathToErrors.getOrDefault(path, AnalysisError.EMPTY_LIST));\n+  }\n+\n+  /**\n+   * Iterate through all files in this {@link Project}, counting how many of each {@link\n+   * AnalysisErrorType} is in each file. The returned {@link HashMap} will contain the set of String\n+   * keys in ERROR_TYPES and values with the mentioned sums, converted to Strings.\n+   */\n+  @NotNull\n+  private HashMap<String, Integer> getTotalAnalysisErrorCounts() {\n+    // Create a zero-filled array of length ERROR_TYPES.length.\n+    int[] errorCountsArray = new int[ERROR_TYPES.length];\n+\n+    // Iterate through each file in this project.\n+    for (String keyPath : pathToErrors.keySet()) {\n+      // Get the list of AnalysisErrors and remove any todos from the list, these are ignored in the\n+      // Dart Problems view, and can be ignored for any dashboard work.\n+      assert keyPath != null;\n+      List<AnalysisError> errors = getAnalysisErrorsForFile(keyPath);\n+      errors.removeIf(e -> {\n+        assert e != null;\n+        return Objects.equals(e.getType(), AnalysisErrorType.TODO);\n+      });\n+      if (errors.isEmpty()) {\n+        continue;\n+      }\n+\n+      // For this file, count how many of each ERROR_TYPES type we have and add this count to each\n+      // errorCountsArray[*]\n+      for (int i = 0; i < ERROR_TYPES.length; i++) {\n+        final int j = i;\n+        errorCountsArray[j] += errors.stream().filter(e -> {\n+          assert e != null;\n+          return Objects.equals(e.getType(), ERROR_TYPES[j]);\n+        }).count();\n+      }\n+    }\n+\n+    // Finally, create and return the final HashMap.\n+    HashMap<String, Integer> errorCounts = new HashMap<>();\n+    for (int i = 0; i < ERROR_TYPES.length; i++) {\n+      errorCounts.put(ERROR_TYPES[i], errorCountsArray[i]);\n+    }\n+    return errorCounts;\n+  }\n+\n+  @Override\n+  public void computedHighlights(String path, List<HighlightRegion> list) {\n+    assert path != null;\n+    maybeLogInitialAnalysisTime(INITIAL_HIGHLIGHTS_TIME, path, pathToHighlightTimestamps);\n+  }\n+\n+  @Override\n+  public void computedImplemented(String s, List<ImplementedClass> list, List<ImplementedMember> list1) {\n+  }\n+\n+  @Override\n+  public void computedLaunchData(String s, String s1, String[] strings) {\n+  }\n+\n+  @Override\n+  public void computedNavigation(String s, List<NavigationRegion> list) {\n+  }\n+\n+  @Override\n+  public void computedOccurrences(String s, List<Occurrences> list) {\n+  }\n+\n+  @Override\n+  public void computedOutline(String path, Outline outline) {\n+    assert path != null;\n+    maybeLogInitialAnalysisTime(INITIAL_OUTLINE_TIME, path, pathToOutlineTimestamps);\n+  }\n+\n+  @Override\n+  public void computedOverrides(String s, List<OverrideMember> list) {\n+  }\n+\n+  @Override\n+  public void computedClosingLabels(String s, List<ClosingLabel> list) {\n+  }\n+\n+  @Override\n+  public void computedSearchResults(String s, List<SearchResult> list, boolean b) {\n+  }\n+\n+  @Override\n+  public void flushedResults(List<String> list) {\n+  }\n+\n+  @Override\n+  public void requestError(RequestError requestError) {\n+    assert requestError != null;\n+    String code = requestError.getCode();\n+    if (code == null) {\n+      code = requestError.getMessage(); // test: requestErrorNoCode()\n+    }\n+    String stack = requestError.getStackTrace();\n+    String exception = composeException(ERROR_TYPE_REQUEST, code, stack);\n+    FlutterInitializer.getAnalytics().sendException(exception, false); // test: requestError()\n+  }\n+\n+  /**\n+   * Build an exception parameter containing type, code, and stack. Limit it to 150 chars.\n+   *\n+   * @param type  \"R\" for request error, \"S\" for server error\n+   * @param code  error code or message\n+   * @param stack stack trace\n+   * @return exception description, value of \"exd\" parameter in analytics\n+   */\n+  private static String composeException(@NotNull String type, @Nullable String code, @Nullable String stack) {\n+    String exception = type + \" \";\n+    if (code != null && !code.isEmpty()) {\n+      exception += code;\n+      if (stack != null && !stack.isEmpty()) {\n+        exception += \"\\n\" + stack;\n+      }\n+    }\n+    else if (stack != null && !stack.isEmpty()) {\n+      exception += stack;\n+    }\n+    else {\n+      exception += \"exception\";\n+    }\n+    if (exception.length() > 150) {\n+      exception = exception.substring(0, 149);\n+    }\n+    return exception;\n+  }\n+\n+  @Override\n+  public void serverConnected(String s) {\n+  }\n+\n+  @Override\n+  public void serverError(boolean isFatal, String message, String stackTraceString) {\n+    String exception = composeException(ERROR_TYPE_SERVER, message, stackTraceString);\n+    FlutterInitializer.getAnalytics().sendException(exception, isFatal); // test: serverError()\n+  }\n+\n+  @Override\n+  public void serverIncompatibleVersion(String s) {\n+  }\n+\n+  @Override\n+  public void serverStatus(AnalysisStatus analysisStatus, PubStatus pubStatus) {\n+    assert analysisStatus != null;\n+    if (!analysisStatus.isAnalyzing()) {\n+      @NotNull HashMap<String, Integer> errorCounts = getTotalAnalysisErrorCounts();\n+      int errorCount = 0;\n+      errorCount += extractCount(errorCounts, AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR);\n+      errorCount += extractCount(errorCounts, AnalysisErrorType.COMPILE_TIME_ERROR);\n+      errorCount += extractCount(errorCounts, AnalysisErrorType.SYNTACTIC_ERROR);\n+      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, ERRORS, errorCount); // test: serverStatus()\n+      int warningCount = 0;\n+      warningCount += extractCount(errorCounts, AnalysisErrorType.STATIC_TYPE_WARNING);\n+      warningCount += extractCount(errorCounts, AnalysisErrorType.STATIC_WARNING);\n+      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, WARNINGS, warningCount); // test: serverStatus()\n+      int hintCount = extractCount(errorCounts, AnalysisErrorType.HINT);\n+      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, HINTS, hintCount); // test: serverStatus()\n+      int lintCount = extractCount(errorCounts, AnalysisErrorType.LINT);\n+      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, LINTS, lintCount); // test: serverStatus()\n+    }\n+  }\n+\n+  private static int extractCount(@NotNull Map<String, Integer> errorCounts, String name) {\n+    //noinspection Java8MapApi,ConstantConditions\n+    return errorCounts.containsKey(AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR) ? errorCounts.get(\n+      AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR) : 0;\n+  }\n+\n+  @Override\n+  public void computedExistingImports(String file, Map<String, Map<String, Set<String>>> existingImports) {\n+  }\n+\n+  private static void logCompletion(@NotNull String selection, int prefixLength, @NotNull String eventType) {\n+    FlutterInitializer.getAnalytics().sendEventMetric(eventType, selection, prefixLength); // test: acceptedCompletion(), lookupCanceled()\n+  }\n+\n+  void logE2ECompletionSuccessMS(long e2eCompletionMS) {\n+    FlutterInitializer.getAnalytics().sendTiming(E2E_IJ_COMPLETION_TIME, SUCCESS, e2eCompletionMS); // test: logE2ECompletionSuccessMS()\n+  }\n+\n+  void logE2ECompletionErrorMS(long e2eCompletionMS) {\n+    FlutterInitializer.getAnalytics().sendTiming(E2E_IJ_COMPLETION_TIME, FAILURE, e2eCompletionMS); // test: logE2ECompletionErrorMS()\n+  }\n+\n+  private void logAnalysisError(@Nullable AnalysisError error) {",
            "html_url": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r837737359",
            "id": 837737359,
            "in_reply_to_id": 835532627,
            "line": null,
            "node_id": "PRRC_kwDOA9MwhM4x7tuP",
            "original_commit_id": "1cea9a46645ac63344af583ece3e3c0a1825eb3b",
            "original_line": 387,
            "original_position": 383,
            "original_start_line": null,
            "path": "flutter-idea/src/io/flutter/analytics/FlutterAnalysisServerListener.java",
            "position": null,
            "pull_request_review_id": 924995767,
            "pull_request_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/837737359/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-03-29T17:36:36Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/837737359",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r847807508"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985"
                },
                "self": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/847807508"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "did you mean to include this change in the CL?",
            "commit_id": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "created_at": "2022-04-11T23:05:53Z",
            "diff_hunk": "@@ -13,7 +13,7 @@\n           <option value=\"runIde\" />\n         </list>\n       </option>\n-      <option name=\"vmOptions\" />",
            "html_url": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r847807508",
            "id": 847807508,
            "line": null,
            "node_id": "PRRC_kwDOA9MwhM4yiIQU",
            "original_commit_id": "8f372a685a8aa4df77034312b88101dfcd2ba81b",
            "original_line": 16,
            "original_position": 4,
            "original_start_line": null,
            "path": ".idea/runConfigurations/flutter_idea__runIde_.xml",
            "position": null,
            "pull_request_review_id": 938694432,
            "pull_request_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/847807508/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-04-11T23:05:53Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/847807508",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1226812?v=4",
                "events_url": "https://api.github.com/users/jacob314/events{/privacy}",
                "followers_url": "https://api.github.com/users/jacob314/followers",
                "following_url": "https://api.github.com/users/jacob314/following{/other_user}",
                "gists_url": "https://api.github.com/users/jacob314/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jacob314",
                "id": 1226812,
                "login": "jacob314",
                "node_id": "MDQ6VXNlcjEyMjY4MTI=",
                "organizations_url": "https://api.github.com/users/jacob314/orgs",
                "received_events_url": "https://api.github.com/users/jacob314/received_events",
                "repos_url": "https://api.github.com/users/jacob314/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jacob314/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jacob314/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jacob314"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r847807896"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985"
                },
                "self": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/847807896"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "tvoid -> to avoid",
            "commit_id": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "created_at": "2022-04-11T23:06:47Z",
            "diff_hunk": "@@ -122,7 +137,14 @@ public void selectionChanged(@NotNull FileEditorManagerEvent event) {\n       public void fileClosed(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n       }\n     };\n-    project.getMessageBus().connect().subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER, fileEditorManagerListener);\n+    messageBusConnection.subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER, fileEditorManagerListener);\n+    messageBusConnection.subscribe(ProjectManager.TOPIC, new ProjectManagerListener() {\n+      public void projectClosing(@NotNull Project project) {\n+        messageBusConnection.disconnect(); // Do this first tvoid memory leaks when switching pojects.",
            "html_url": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r847807896",
            "id": 847807896,
            "line": null,
            "node_id": "PRRC_kwDOA9MwhM4yiIWY",
            "original_commit_id": "8f372a685a8aa4df77034312b88101dfcd2ba81b",
            "original_line": 143,
            "original_position": 75,
            "original_start_line": null,
            "path": "flutter-idea/src/io/flutter/analytics/FlutterAnalysisServerListener.java",
            "position": null,
            "pull_request_review_id": 938694904,
            "pull_request_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/847807896/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-04-11T23:06:47Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/847807896",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1226812?v=4",
                "events_url": "https://api.github.com/users/jacob314/events{/privacy}",
                "followers_url": "https://api.github.com/users/jacob314/followers",
                "following_url": "https://api.github.com/users/jacob314/following{/other_user}",
                "gists_url": "https://api.github.com/users/jacob314/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jacob314",
                "id": 1226812,
                "login": "jacob314",
                "node_id": "MDQ6VXNlcjEyMjY4MTI=",
                "organizations_url": "https://api.github.com/users/jacob314/orgs",
                "received_events_url": "https://api.github.com/users/jacob314/received_events",
                "repos_url": "https://api.github.com/users/jacob314/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jacob314/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jacob314/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jacob314"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r847809955"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985"
                },
                "self": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/847809955"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "Why do we zero out the counts? This seems wrong. I would expect these #s should match the # of errors reported in the analysis server window. As is, I'm not clear how I would interpret these #s.",
            "commit_id": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "created_at": "2022-04-11T23:11:23Z",
            "diff_hunk": "@@ -342,51 +367,85 @@ public void serverStatus(AnalysisStatus analysisStatus, PubStatus pubStatus) {\n     assert analysisStatus != null;\n     if (!analysisStatus.isAnalyzing()) {\n       @NotNull HashMap<String, Integer> errorCounts = getTotalAnalysisErrorCounts();\n-      int errorCount = 0;\n+      errorCount = 0;\n       errorCount += extractCount(errorCounts, AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR);\n       errorCount += extractCount(errorCounts, AnalysisErrorType.COMPILE_TIME_ERROR);\n       errorCount += extractCount(errorCounts, AnalysisErrorType.SYNTACTIC_ERROR);\n-      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, ERRORS, errorCount); // test: serverStatus()\n-      int warningCount = 0;\n+      warningCount = 0;\n       warningCount += extractCount(errorCounts, AnalysisErrorType.STATIC_TYPE_WARNING);\n       warningCount += extractCount(errorCounts, AnalysisErrorType.STATIC_WARNING);\n-      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, WARNINGS, warningCount); // test: serverStatus()\n-      int hintCount = extractCount(errorCounts, AnalysisErrorType.HINT);\n-      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, HINTS, hintCount); // test: serverStatus()\n-      int lintCount = extractCount(errorCounts, AnalysisErrorType.LINT);\n-      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, LINTS, lintCount); // test: serverStatus()\n+      hintCount = extractCount(errorCounts, AnalysisErrorType.HINT);\n+      lintCount = extractCount(errorCounts, AnalysisErrorType.LINT);\n+      if (IS_TESTING) {\n+        errorCount = warningCount = hintCount = lintCount = 1;\n+      }\n+      maybeReportErrorCounts();\n     }\n   }\n \n+  private void maybeReport(boolean observeThrottling, @NotNull java.util.function.Consumer<@NotNull Analytics> func) {\n+    if (observeThrottling && !IS_TESTING) {\n+      long currentTimestamp = System.currentTimeMillis();\n+      // Throttle to one report per interval.\n+      if (currentTimestamp - generalTimestamp < GENERAL_REPORT_INTERVAL) {\n+        return;\n+      }\n+      generalTimestamp = currentTimestamp;\n+    }\n+    func.accept(FlutterInitializer.getAnalytics());\n+  }\n+\n+  private void maybeReportErrorCounts() {\n+    long currentTimestamp = System.currentTimeMillis();\n+    // Send accumulated error counts once every defined interval, plus when the project is closed.\n+    if (errorsTimestamp == 0L || currentTimestamp - errorsTimestamp > ERROR_REPORT_INTERVAL || IS_TESTING) {\n+      errorsTimestamp = currentTimestamp;\n+      Analytics analytics = FlutterInitializer.getAnalytics();\n+      LOG.debug(DAS_STATUS_EVENT_TYPE + \" \" + errorCount + \" \" + warningCount + \" \" + hintCount + \" \" + lintCount);\n+      if (errorCount > 0) {\n+        analytics.sendEventMetric(DAS_STATUS_EVENT_TYPE, ERRORS, errorCount); // test: serverStatus()\n+      }\n+      if (warningCount > 0) {\n+        analytics.sendEventMetric(DAS_STATUS_EVENT_TYPE, WARNINGS, warningCount); // test: serverStatus()\n+      }\n+      if (hintCount > 0) {\n+        analytics.sendEventMetric(DAS_STATUS_EVENT_TYPE, HINTS, hintCount); // test: serverStatus()\n+      }\n+      if (lintCount > 0) {\n+        analytics.sendEventMetric(DAS_STATUS_EVENT_TYPE, LINTS, lintCount); // test: serverStatus()\n+      }\n+      errorCount = warningCount = hintCount = lintCount = 0;",
            "html_url": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r847809955",
            "id": 847809955,
            "line": 417,
            "node_id": "PRRC_kwDOA9MwhM4yiI2j",
            "original_commit_id": "8f372a685a8aa4df77034312b88101dfcd2ba81b",
            "original_line": 417,
            "original_position": 201,
            "original_start_line": null,
            "path": "flutter-idea/src/io/flutter/analytics/FlutterAnalysisServerListener.java",
            "position": 417,
            "pull_request_review_id": 938697392,
            "pull_request_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/847809955/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-04-11T23:11:23Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/847809955",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1226812?v=4",
                "events_url": "https://api.github.com/users/jacob314/events{/privacy}",
                "followers_url": "https://api.github.com/users/jacob314/followers",
                "following_url": "https://api.github.com/users/jacob314/following{/other_user}",
                "gists_url": "https://api.github.com/users/jacob314/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jacob314",
                "id": 1226812,
                "login": "jacob314",
                "node_id": "MDQ6VXNlcjEyMjY4MTI=",
                "organizations_url": "https://api.github.com/users/jacob314/orgs",
                "received_events_url": "https://api.github.com/users/jacob314/received_events",
                "repos_url": "https://api.github.com/users/jacob314/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jacob314/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jacob314/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jacob314"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r847811988"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985"
                },
                "self": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/847811988"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "For the completion time, rather than throttling, what you could alternately report a single metric on intellij close that reports the P50, P90, and P95 times for the entire session.\r\nThat would make the completion time numbers less noisy than filtering to only report 1 completion per minute.",
            "commit_id": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "created_at": "2022-04-11T23:16:28Z",
            "diff_hunk": "@@ -342,51 +367,85 @@ public void serverStatus(AnalysisStatus analysisStatus, PubStatus pubStatus) {\n     assert analysisStatus != null;\n     if (!analysisStatus.isAnalyzing()) {\n       @NotNull HashMap<String, Integer> errorCounts = getTotalAnalysisErrorCounts();\n-      int errorCount = 0;\n+      errorCount = 0;\n       errorCount += extractCount(errorCounts, AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR);\n       errorCount += extractCount(errorCounts, AnalysisErrorType.COMPILE_TIME_ERROR);\n       errorCount += extractCount(errorCounts, AnalysisErrorType.SYNTACTIC_ERROR);\n-      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, ERRORS, errorCount); // test: serverStatus()\n-      int warningCount = 0;\n+      warningCount = 0;\n       warningCount += extractCount(errorCounts, AnalysisErrorType.STATIC_TYPE_WARNING);\n       warningCount += extractCount(errorCounts, AnalysisErrorType.STATIC_WARNING);\n-      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, WARNINGS, warningCount); // test: serverStatus()\n-      int hintCount = extractCount(errorCounts, AnalysisErrorType.HINT);\n-      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, HINTS, hintCount); // test: serverStatus()\n-      int lintCount = extractCount(errorCounts, AnalysisErrorType.LINT);\n-      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, LINTS, lintCount); // test: serverStatus()\n+      hintCount = extractCount(errorCounts, AnalysisErrorType.HINT);\n+      lintCount = extractCount(errorCounts, AnalysisErrorType.LINT);\n+      if (IS_TESTING) {\n+        errorCount = warningCount = hintCount = lintCount = 1;\n+      }\n+      maybeReportErrorCounts();\n     }\n   }\n \n+  private void maybeReport(boolean observeThrottling, @NotNull java.util.function.Consumer<@NotNull Analytics> func) {\n+    if (observeThrottling && !IS_TESTING) {\n+      long currentTimestamp = System.currentTimeMillis();\n+      // Throttle to one report per interval.\n+      if (currentTimestamp - generalTimestamp < GENERAL_REPORT_INTERVAL) {\n+        return;\n+      }\n+      generalTimestamp = currentTimestamp;\n+    }\n+    func.accept(FlutterInitializer.getAnalytics());\n+  }\n+\n+  private void maybeReportErrorCounts() {\n+    long currentTimestamp = System.currentTimeMillis();\n+    // Send accumulated error counts once every defined interval, plus when the project is closed.\n+    if (errorsTimestamp == 0L || currentTimestamp - errorsTimestamp > ERROR_REPORT_INTERVAL || IS_TESTING) {\n+      errorsTimestamp = currentTimestamp;\n+      Analytics analytics = FlutterInitializer.getAnalytics();\n+      LOG.debug(DAS_STATUS_EVENT_TYPE + \" \" + errorCount + \" \" + warningCount + \" \" + hintCount + \" \" + lintCount);\n+      if (errorCount > 0) {\n+        analytics.sendEventMetric(DAS_STATUS_EVENT_TYPE, ERRORS, errorCount); // test: serverStatus()\n+      }\n+      if (warningCount > 0) {\n+        analytics.sendEventMetric(DAS_STATUS_EVENT_TYPE, WARNINGS, warningCount); // test: serverStatus()\n+      }\n+      if (hintCount > 0) {\n+        analytics.sendEventMetric(DAS_STATUS_EVENT_TYPE, HINTS, hintCount); // test: serverStatus()\n+      }\n+      if (lintCount > 0) {\n+        analytics.sendEventMetric(DAS_STATUS_EVENT_TYPE, LINTS, lintCount); // test: serverStatus()\n+      }\n+      errorCount = warningCount = hintCount = lintCount = 0;\n+    }\n+  }\n   private static int extractCount(@NotNull Map<String, Integer> errorCounts, String name) {\n     //noinspection Java8MapApi,ConstantConditions\n-    return errorCounts.containsKey(AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR) ? errorCounts.get(\n-      AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR) : 0;\n+    return errorCounts.containsKey(name) ? errorCounts.get(name) : 0;\n   }\n \n   @Override\n   public void computedExistingImports(String file, Map<String, Map<String, Set<String>>> existingImports) {\n   }\n \n-  private static void logCompletion(@NotNull String selection, int prefixLength, @NotNull String eventType) {\n-    FlutterInitializer.getAnalytics().sendEventMetric(eventType, selection, prefixLength); // test: acceptedCompletion(), lookupCanceled()\n+  private void logCompletion(@NotNull String selection, int prefixLength, @NotNull String eventType) {\n+    maybeReport(true, (analytics) -> {\n+      LOG.debug(eventType + \" \" + selection + \" \" + prefixLength);\n+      analytics.sendEventMetric(eventType, selection, prefixLength); // test: acceptedCompletion(), lookupCanceled()\n+    });\n   }\n \n   void logE2ECompletionSuccessMS(long e2eCompletionMS) {\n-    FlutterInitializer.getAnalytics().sendTiming(E2E_IJ_COMPLETION_TIME, SUCCESS, e2eCompletionMS); // test: logE2ECompletionSuccessMS()\n+    maybeReport(true, (analytics) -> {",
            "html_url": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r847811988",
            "id": 847811988,
            "line": 437,
            "node_id": "PRRC_kwDOA9MwhM4yiJWU",
            "original_commit_id": "8f372a685a8aa4df77034312b88101dfcd2ba81b",
            "original_line": 437,
            "original_position": 226,
            "original_start_line": null,
            "path": "flutter-idea/src/io/flutter/analytics/FlutterAnalysisServerListener.java",
            "position": 437,
            "pull_request_review_id": 938700049,
            "pull_request_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/847811988/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-04-11T23:16:29Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/847811988",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1226812?v=4",
                "events_url": "https://api.github.com/users/jacob314/events{/privacy}",
                "followers_url": "https://api.github.com/users/jacob314/followers",
                "following_url": "https://api.github.com/users/jacob314/following{/other_user}",
                "gists_url": "https://api.github.com/users/jacob314/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jacob314",
                "id": 1226812,
                "login": "jacob314",
                "node_id": "MDQ6VXNlcjEyMjY4MTI=",
                "organizations_url": "https://api.github.com/users/jacob314/orgs",
                "received_events_url": "https://api.github.com/users/jacob314/received_events",
                "repos_url": "https://api.github.com/users/jacob314/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jacob314/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jacob314/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jacob314"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r847812920"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985"
                },
                "self": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/847812920"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "reporting the P50, P90, and P95 times for are files in the project would also be less noisy than reporting times for a few files.  Rate limiting like this could also be strange as odds are most files would all be in the first minute of starting analysis.",
            "commit_id": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "created_at": "2022-04-11T23:18:33Z",
            "diff_hunk": "@@ -399,7 +458,10 @@ private void maybeLogInitialAnalysisTime(@NotNull String eventType, @NotNull Str\n   }\n \n   private void logFileAnalysisTime(@NotNull String kind, String path, long analysisTime) {\n-    FlutterInitializer.getAnalytics().sendEvent(kind, DURATION, \"\", Long.toString(analysisTime)); // test: computedErrors()\n+    maybeReport(false, (analytics) -> {",
            "html_url": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r847812920",
            "id": 847812920,
            "line": 461,
            "node_id": "PRRC_kwDOA9MwhM4yiJk4",
            "original_commit_id": "8f372a685a8aa4df77034312b88101dfcd2ba81b",
            "original_line": 461,
            "original_position": 255,
            "original_start_line": null,
            "path": "flutter-idea/src/io/flutter/analytics/FlutterAnalysisServerListener.java",
            "position": 461,
            "pull_request_review_id": 938701238,
            "pull_request_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/847812920/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-04-11T23:18:33Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/847812920",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1226812?v=4",
                "events_url": "https://api.github.com/users/jacob314/events{/privacy}",
                "followers_url": "https://api.github.com/users/jacob314/followers",
                "following_url": "https://api.github.com/users/jacob314/following{/other_user}",
                "gists_url": "https://api.github.com/users/jacob314/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jacob314",
                "id": 1226812,
                "login": "jacob314",
                "node_id": "MDQ6VXNlcjEyMjY4MTI=",
                "organizations_url": "https://api.github.com/users/jacob314/orgs",
                "received_events_url": "https://api.github.com/users/jacob314/received_events",
                "repos_url": "https://api.github.com/users/jacob314/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jacob314/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jacob314/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jacob314"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r847813211"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985"
                },
                "self": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/847813211"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "rate limiting quick fixes like this is fine as I doubt users trigger a lot of quick fixes per minute.",
            "commit_id": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "created_at": "2022-04-11T23:19:11Z",
            "diff_hunk": "@@ -456,52 +523,59 @@ private static boolean isDartLookupEvent(@NotNull LookupEvent event) {\n   private class QuickFixListener implements DartQuickFixListener {\n     @Override\n     public void beforeQuickFixInvoked(@NotNull DartQuickFix intention, @NotNull Editor editor, @NotNull PsiFile file) {\n-      String path = Objects.requireNonNull(file.getVirtualFile()).getPath();\n-      int lineNumber = editor.getCaretModel().getLogicalPosition().line + 1;\n-      @SuppressWarnings(\"ConstantConditions\")\n-      List<String> errorsOnLine =\n-        pathToErrors.containsKey(path) ? pathToErrors.get(path).stream().filter(error -> error.getLocation().getStartLine() == lineNumber)\n-          .map(AnalysisError::getCode).collect(Collectors.toList()) : ImmutableList.of();\n-      FlutterInitializer.getAnalytics().sendEventMetric(QUICK_FIX, intention.getText(), errorsOnLine.size()); // test: quickFix()\n+      maybeReport(true, (analytics) -> {",
            "html_url": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r847813211",
            "id": 847813211,
            "line": 526,
            "node_id": "PRRC_kwDOA9MwhM4yiJpb",
            "original_commit_id": "8f372a685a8aa4df77034312b88101dfcd2ba81b",
            "original_line": 526,
            "original_position": 302,
            "original_start_line": null,
            "path": "flutter-idea/src/io/flutter/analytics/FlutterAnalysisServerListener.java",
            "position": 526,
            "pull_request_review_id": 938701622,
            "pull_request_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/847813211/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-04-11T23:19:12Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/847813211",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1226812?v=4",
                "events_url": "https://api.github.com/users/jacob314/events{/privacy}",
                "followers_url": "https://api.github.com/users/jacob314/followers",
                "following_url": "https://api.github.com/users/jacob314/following{/other_user}",
                "gists_url": "https://api.github.com/users/jacob314/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jacob314",
                "id": 1226812,
                "login": "jacob314",
                "node_id": "MDQ6VXNlcjEyMjY4MTI=",
                "organizations_url": "https://api.github.com/users/jacob314/orgs",
                "received_events_url": "https://api.github.com/users/jacob314/received_events",
                "repos_url": "https://api.github.com/users/jacob314/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jacob314/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jacob314/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jacob314"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r847813970"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985"
                },
                "self": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/847813970"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "have you manually verified that these #s match what the analyzer window shows?",
            "commit_id": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "created_at": "2022-04-11T23:21:07Z",
            "diff_hunk": "@@ -342,51 +367,85 @@ public void serverStatus(AnalysisStatus analysisStatus, PubStatus pubStatus) {\n     assert analysisStatus != null;\n     if (!analysisStatus.isAnalyzing()) {\n       @NotNull HashMap<String, Integer> errorCounts = getTotalAnalysisErrorCounts();\n-      int errorCount = 0;\n+      errorCount = 0;\n       errorCount += extractCount(errorCounts, AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR);\n       errorCount += extractCount(errorCounts, AnalysisErrorType.COMPILE_TIME_ERROR);\n       errorCount += extractCount(errorCounts, AnalysisErrorType.SYNTACTIC_ERROR);\n-      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, ERRORS, errorCount); // test: serverStatus()\n-      int warningCount = 0;\n+      warningCount = 0;\n       warningCount += extractCount(errorCounts, AnalysisErrorType.STATIC_TYPE_WARNING);\n       warningCount += extractCount(errorCounts, AnalysisErrorType.STATIC_WARNING);\n-      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, WARNINGS, warningCount); // test: serverStatus()\n-      int hintCount = extractCount(errorCounts, AnalysisErrorType.HINT);\n-      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, HINTS, hintCount); // test: serverStatus()\n-      int lintCount = extractCount(errorCounts, AnalysisErrorType.LINT);\n-      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, LINTS, lintCount); // test: serverStatus()\n+      hintCount = extractCount(errorCounts, AnalysisErrorType.HINT);\n+      lintCount = extractCount(errorCounts, AnalysisErrorType.LINT);\n+      if (IS_TESTING) {\n+        errorCount = warningCount = hintCount = lintCount = 1;\n+      }\n+      maybeReportErrorCounts();",
            "html_url": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r847813970",
            "id": 847813970,
            "line": 382,
            "node_id": "PRRC_kwDOA9MwhM4yiJ1S",
            "original_commit_id": "8f372a685a8aa4df77034312b88101dfcd2ba81b",
            "original_line": 382,
            "original_position": 166,
            "original_start_line": null,
            "path": "flutter-idea/src/io/flutter/analytics/FlutterAnalysisServerListener.java",
            "position": 382,
            "pull_request_review_id": 938702586,
            "pull_request_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/847813970/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-04-11T23:21:07Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/847813970",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1226812?v=4",
                "events_url": "https://api.github.com/users/jacob314/events{/privacy}",
                "followers_url": "https://api.github.com/users/jacob314/followers",
                "following_url": "https://api.github.com/users/jacob314/following{/other_user}",
                "gists_url": "https://api.github.com/users/jacob314/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jacob314",
                "id": 1226812,
                "login": "jacob314",
                "node_id": "MDQ6VXNlcjEyMjY4MTI=",
                "organizations_url": "https://api.github.com/users/jacob314/orgs",
                "received_events_url": "https://api.github.com/users/jacob314/received_events",
                "repos_url": "https://api.github.com/users/jacob314/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jacob314/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jacob314/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jacob314"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r848614263"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985"
                },
                "self": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/848614263"
                }
            },
            "author_association": "MEMBER",
            "body": "File analysis time is not throttled. The `false` arg turns it off.",
            "commit_id": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "created_at": "2022-04-12T16:04:03Z",
            "diff_hunk": "@@ -399,7 +458,10 @@ private void maybeLogInitialAnalysisTime(@NotNull String eventType, @NotNull Str\n   }\n \n   private void logFileAnalysisTime(@NotNull String kind, String path, long analysisTime) {\n-    FlutterInitializer.getAnalytics().sendEvent(kind, DURATION, \"\", Long.toString(analysisTime)); // test: computedErrors()\n+    maybeReport(false, (analytics) -> {",
            "html_url": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r848614263",
            "id": 848614263,
            "in_reply_to_id": 847812920,
            "line": 461,
            "node_id": "PRRC_kwDOA9MwhM4ylNN3",
            "original_commit_id": "8f372a685a8aa4df77034312b88101dfcd2ba81b",
            "original_line": 461,
            "original_position": 255,
            "original_start_line": null,
            "path": "flutter-idea/src/io/flutter/analytics/FlutterAnalysisServerListener.java",
            "position": 461,
            "pull_request_review_id": 939802293,
            "pull_request_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/848614263/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-04-12T16:04:03Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/848614263",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r848619525"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985"
                },
                "self": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/848619525"
                }
            },
            "author_association": "MEMBER",
            "body": "It's been a while, but yes.",
            "commit_id": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "created_at": "2022-04-12T16:09:37Z",
            "diff_hunk": "@@ -342,51 +367,85 @@ public void serverStatus(AnalysisStatus analysisStatus, PubStatus pubStatus) {\n     assert analysisStatus != null;\n     if (!analysisStatus.isAnalyzing()) {\n       @NotNull HashMap<String, Integer> errorCounts = getTotalAnalysisErrorCounts();\n-      int errorCount = 0;\n+      errorCount = 0;\n       errorCount += extractCount(errorCounts, AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR);\n       errorCount += extractCount(errorCounts, AnalysisErrorType.COMPILE_TIME_ERROR);\n       errorCount += extractCount(errorCounts, AnalysisErrorType.SYNTACTIC_ERROR);\n-      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, ERRORS, errorCount); // test: serverStatus()\n-      int warningCount = 0;\n+      warningCount = 0;\n       warningCount += extractCount(errorCounts, AnalysisErrorType.STATIC_TYPE_WARNING);\n       warningCount += extractCount(errorCounts, AnalysisErrorType.STATIC_WARNING);\n-      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, WARNINGS, warningCount); // test: serverStatus()\n-      int hintCount = extractCount(errorCounts, AnalysisErrorType.HINT);\n-      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, HINTS, hintCount); // test: serverStatus()\n-      int lintCount = extractCount(errorCounts, AnalysisErrorType.LINT);\n-      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, LINTS, lintCount); // test: serverStatus()\n+      hintCount = extractCount(errorCounts, AnalysisErrorType.HINT);\n+      lintCount = extractCount(errorCounts, AnalysisErrorType.LINT);\n+      if (IS_TESTING) {\n+        errorCount = warningCount = hintCount = lintCount = 1;\n+      }\n+      maybeReportErrorCounts();",
            "html_url": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r848619525",
            "id": 848619525,
            "in_reply_to_id": 847813970,
            "line": 382,
            "node_id": "PRRC_kwDOA9MwhM4ylOgF",
            "original_commit_id": "8f372a685a8aa4df77034312b88101dfcd2ba81b",
            "original_line": 382,
            "original_position": 166,
            "original_start_line": null,
            "path": "flutter-idea/src/io/flutter/analytics/FlutterAnalysisServerListener.java",
            "position": 382,
            "pull_request_review_id": 939810137,
            "pull_request_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/848619525/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-04-12T16:09:37Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/848619525",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r848621942"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985"
                },
                "self": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/848621942"
                }
            },
            "author_association": "MEMBER",
            "body": "They are accumulated while analysis is active, then sent when analysis is complete. They need to be zeroed so the accumulated values are accurate.",
            "commit_id": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "created_at": "2022-04-12T16:12:02Z",
            "diff_hunk": "@@ -342,51 +367,85 @@ public void serverStatus(AnalysisStatus analysisStatus, PubStatus pubStatus) {\n     assert analysisStatus != null;\n     if (!analysisStatus.isAnalyzing()) {\n       @NotNull HashMap<String, Integer> errorCounts = getTotalAnalysisErrorCounts();\n-      int errorCount = 0;\n+      errorCount = 0;\n       errorCount += extractCount(errorCounts, AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR);\n       errorCount += extractCount(errorCounts, AnalysisErrorType.COMPILE_TIME_ERROR);\n       errorCount += extractCount(errorCounts, AnalysisErrorType.SYNTACTIC_ERROR);\n-      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, ERRORS, errorCount); // test: serverStatus()\n-      int warningCount = 0;\n+      warningCount = 0;\n       warningCount += extractCount(errorCounts, AnalysisErrorType.STATIC_TYPE_WARNING);\n       warningCount += extractCount(errorCounts, AnalysisErrorType.STATIC_WARNING);\n-      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, WARNINGS, warningCount); // test: serverStatus()\n-      int hintCount = extractCount(errorCounts, AnalysisErrorType.HINT);\n-      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, HINTS, hintCount); // test: serverStatus()\n-      int lintCount = extractCount(errorCounts, AnalysisErrorType.LINT);\n-      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, LINTS, lintCount); // test: serverStatus()\n+      hintCount = extractCount(errorCounts, AnalysisErrorType.HINT);\n+      lintCount = extractCount(errorCounts, AnalysisErrorType.LINT);\n+      if (IS_TESTING) {\n+        errorCount = warningCount = hintCount = lintCount = 1;\n+      }\n+      maybeReportErrorCounts();\n     }\n   }\n \n+  private void maybeReport(boolean observeThrottling, @NotNull java.util.function.Consumer<@NotNull Analytics> func) {\n+    if (observeThrottling && !IS_TESTING) {\n+      long currentTimestamp = System.currentTimeMillis();\n+      // Throttle to one report per interval.\n+      if (currentTimestamp - generalTimestamp < GENERAL_REPORT_INTERVAL) {\n+        return;\n+      }\n+      generalTimestamp = currentTimestamp;\n+    }\n+    func.accept(FlutterInitializer.getAnalytics());\n+  }\n+\n+  private void maybeReportErrorCounts() {\n+    long currentTimestamp = System.currentTimeMillis();\n+    // Send accumulated error counts once every defined interval, plus when the project is closed.\n+    if (errorsTimestamp == 0L || currentTimestamp - errorsTimestamp > ERROR_REPORT_INTERVAL || IS_TESTING) {\n+      errorsTimestamp = currentTimestamp;\n+      Analytics analytics = FlutterInitializer.getAnalytics();\n+      LOG.debug(DAS_STATUS_EVENT_TYPE + \" \" + errorCount + \" \" + warningCount + \" \" + hintCount + \" \" + lintCount);\n+      if (errorCount > 0) {\n+        analytics.sendEventMetric(DAS_STATUS_EVENT_TYPE, ERRORS, errorCount); // test: serverStatus()\n+      }\n+      if (warningCount > 0) {\n+        analytics.sendEventMetric(DAS_STATUS_EVENT_TYPE, WARNINGS, warningCount); // test: serverStatus()\n+      }\n+      if (hintCount > 0) {\n+        analytics.sendEventMetric(DAS_STATUS_EVENT_TYPE, HINTS, hintCount); // test: serverStatus()\n+      }\n+      if (lintCount > 0) {\n+        analytics.sendEventMetric(DAS_STATUS_EVENT_TYPE, LINTS, lintCount); // test: serverStatus()\n+      }\n+      errorCount = warningCount = hintCount = lintCount = 0;",
            "html_url": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r848621942",
            "id": 848621942,
            "in_reply_to_id": 847809955,
            "line": 417,
            "node_id": "PRRC_kwDOA9MwhM4ylPF2",
            "original_commit_id": "8f372a685a8aa4df77034312b88101dfcd2ba81b",
            "original_line": 417,
            "original_position": 201,
            "original_start_line": null,
            "path": "flutter-idea/src/io/flutter/analytics/FlutterAnalysisServerListener.java",
            "position": 417,
            "pull_request_review_id": 939813520,
            "pull_request_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/848621942/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-04-12T16:12:03Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/848621942",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r848622654"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985"
                },
                "self": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/848622654"
                }
            },
            "author_association": "MEMBER",
            "body": "No, I missed that. Although I don't think it matters.",
            "commit_id": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "created_at": "2022-04-12T16:12:44Z",
            "diff_hunk": "@@ -13,7 +13,7 @@\n           <option value=\"runIde\" />\n         </list>\n       </option>\n-      <option name=\"vmOptions\" />",
            "html_url": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r848622654",
            "id": 848622654,
            "in_reply_to_id": 847807508,
            "line": null,
            "node_id": "PRRC_kwDOA9MwhM4ylPQ-",
            "original_commit_id": "8f372a685a8aa4df77034312b88101dfcd2ba81b",
            "original_line": 16,
            "original_position": 4,
            "original_start_line": null,
            "path": ".idea/runConfigurations/flutter_idea__runIde_.xml",
            "position": null,
            "pull_request_review_id": 939814475,
            "pull_request_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/848622654/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-04-12T16:12:45Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/848622654",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r848626016"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985"
                },
                "self": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/848626016"
                }
            },
            "author_association": "MEMBER",
            "body": "Oops, I was wrong. I did add `vmOptions` so removing this empty one is correct.",
            "commit_id": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "created_at": "2022-04-12T16:16:12Z",
            "diff_hunk": "@@ -13,7 +13,7 @@\n           <option value=\"runIde\" />\n         </list>\n       </option>\n-      <option name=\"vmOptions\" />",
            "html_url": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r848626016",
            "id": 848626016,
            "in_reply_to_id": 847807508,
            "line": null,
            "node_id": "PRRC_kwDOA9MwhM4ylQFg",
            "original_commit_id": "8f372a685a8aa4df77034312b88101dfcd2ba81b",
            "original_line": 16,
            "original_position": 4,
            "original_start_line": null,
            "path": ".idea/runConfigurations/flutter_idea__runIde_.xml",
            "position": null,
            "pull_request_review_id": 939819146,
            "pull_request_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/848626016/reactions"
            },
            "side": "LEFT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-04-12T16:16:12Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/848626016",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r848627358"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985"
                },
                "self": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/848627358"
                }
            },
            "author_association": "MEMBER",
            "body": "See the comment below for why we cannot do it when exiting.",
            "commit_id": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "created_at": "2022-04-12T16:17:33Z",
            "diff_hunk": "@@ -342,51 +367,85 @@ public void serverStatus(AnalysisStatus analysisStatus, PubStatus pubStatus) {\n     assert analysisStatus != null;\n     if (!analysisStatus.isAnalyzing()) {\n       @NotNull HashMap<String, Integer> errorCounts = getTotalAnalysisErrorCounts();\n-      int errorCount = 0;\n+      errorCount = 0;\n       errorCount += extractCount(errorCounts, AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR);\n       errorCount += extractCount(errorCounts, AnalysisErrorType.COMPILE_TIME_ERROR);\n       errorCount += extractCount(errorCounts, AnalysisErrorType.SYNTACTIC_ERROR);\n-      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, ERRORS, errorCount); // test: serverStatus()\n-      int warningCount = 0;\n+      warningCount = 0;\n       warningCount += extractCount(errorCounts, AnalysisErrorType.STATIC_TYPE_WARNING);\n       warningCount += extractCount(errorCounts, AnalysisErrorType.STATIC_WARNING);\n-      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, WARNINGS, warningCount); // test: serverStatus()\n-      int hintCount = extractCount(errorCounts, AnalysisErrorType.HINT);\n-      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, HINTS, hintCount); // test: serverStatus()\n-      int lintCount = extractCount(errorCounts, AnalysisErrorType.LINT);\n-      FlutterInitializer.getAnalytics().sendEventMetric(DAS_STATUS_EVENT_TYPE, LINTS, lintCount); // test: serverStatus()\n+      hintCount = extractCount(errorCounts, AnalysisErrorType.HINT);\n+      lintCount = extractCount(errorCounts, AnalysisErrorType.LINT);\n+      if (IS_TESTING) {\n+        errorCount = warningCount = hintCount = lintCount = 1;\n+      }\n+      maybeReportErrorCounts();\n     }\n   }\n \n+  private void maybeReport(boolean observeThrottling, @NotNull java.util.function.Consumer<@NotNull Analytics> func) {\n+    if (observeThrottling && !IS_TESTING) {\n+      long currentTimestamp = System.currentTimeMillis();\n+      // Throttle to one report per interval.\n+      if (currentTimestamp - generalTimestamp < GENERAL_REPORT_INTERVAL) {\n+        return;\n+      }\n+      generalTimestamp = currentTimestamp;\n+    }\n+    func.accept(FlutterInitializer.getAnalytics());\n+  }\n+\n+  private void maybeReportErrorCounts() {\n+    long currentTimestamp = System.currentTimeMillis();\n+    // Send accumulated error counts once every defined interval, plus when the project is closed.\n+    if (errorsTimestamp == 0L || currentTimestamp - errorsTimestamp > ERROR_REPORT_INTERVAL || IS_TESTING) {\n+      errorsTimestamp = currentTimestamp;\n+      Analytics analytics = FlutterInitializer.getAnalytics();\n+      LOG.debug(DAS_STATUS_EVENT_TYPE + \" \" + errorCount + \" \" + warningCount + \" \" + hintCount + \" \" + lintCount);\n+      if (errorCount > 0) {\n+        analytics.sendEventMetric(DAS_STATUS_EVENT_TYPE, ERRORS, errorCount); // test: serverStatus()\n+      }\n+      if (warningCount > 0) {\n+        analytics.sendEventMetric(DAS_STATUS_EVENT_TYPE, WARNINGS, warningCount); // test: serverStatus()\n+      }\n+      if (hintCount > 0) {\n+        analytics.sendEventMetric(DAS_STATUS_EVENT_TYPE, HINTS, hintCount); // test: serverStatus()\n+      }\n+      if (lintCount > 0) {\n+        analytics.sendEventMetric(DAS_STATUS_EVENT_TYPE, LINTS, lintCount); // test: serverStatus()\n+      }\n+      errorCount = warningCount = hintCount = lintCount = 0;\n+    }\n+  }\n   private static int extractCount(@NotNull Map<String, Integer> errorCounts, String name) {\n     //noinspection Java8MapApi,ConstantConditions\n-    return errorCounts.containsKey(AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR) ? errorCounts.get(\n-      AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR) : 0;\n+    return errorCounts.containsKey(name) ? errorCounts.get(name) : 0;\n   }\n \n   @Override\n   public void computedExistingImports(String file, Map<String, Map<String, Set<String>>> existingImports) {\n   }\n \n-  private static void logCompletion(@NotNull String selection, int prefixLength, @NotNull String eventType) {\n-    FlutterInitializer.getAnalytics().sendEventMetric(eventType, selection, prefixLength); // test: acceptedCompletion(), lookupCanceled()\n+  private void logCompletion(@NotNull String selection, int prefixLength, @NotNull String eventType) {\n+    maybeReport(true, (analytics) -> {\n+      LOG.debug(eventType + \" \" + selection + \" \" + prefixLength);\n+      analytics.sendEventMetric(eventType, selection, prefixLength); // test: acceptedCompletion(), lookupCanceled()\n+    });\n   }\n \n   void logE2ECompletionSuccessMS(long e2eCompletionMS) {\n-    FlutterInitializer.getAnalytics().sendTiming(E2E_IJ_COMPLETION_TIME, SUCCESS, e2eCompletionMS); // test: logE2ECompletionSuccessMS()\n+    maybeReport(true, (analytics) -> {",
            "html_url": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r848627358",
            "id": 848627358,
            "in_reply_to_id": 847811988,
            "line": 437,
            "node_id": "PRRC_kwDOA9MwhM4ylQae",
            "original_commit_id": "8f372a685a8aa4df77034312b88101dfcd2ba81b",
            "original_line": 437,
            "original_position": 226,
            "original_start_line": null,
            "path": "flutter-idea/src/io/flutter/analytics/FlutterAnalysisServerListener.java",
            "position": 437,
            "pull_request_review_id": 939821041,
            "pull_request_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/848627358/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-04-12T16:17:34Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/848627358",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r848628803"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985"
                },
                "self": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/848628803"
                }
            },
            "author_association": "MEMBER",
            "body": "Done",
            "commit_id": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "created_at": "2022-04-12T16:19:07Z",
            "diff_hunk": "@@ -122,7 +137,14 @@ public void selectionChanged(@NotNull FileEditorManagerEvent event) {\n       public void fileClosed(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n       }\n     };\n-    project.getMessageBus().connect().subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER, fileEditorManagerListener);\n+    messageBusConnection.subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER, fileEditorManagerListener);\n+    messageBusConnection.subscribe(ProjectManager.TOPIC, new ProjectManagerListener() {\n+      public void projectClosing(@NotNull Project project) {\n+        messageBusConnection.disconnect(); // Do this first tvoid memory leaks when switching pojects.",
            "html_url": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r848628803",
            "id": 848628803,
            "in_reply_to_id": 847807896,
            "line": null,
            "node_id": "PRRC_kwDOA9MwhM4ylQxD",
            "original_commit_id": "8f372a685a8aa4df77034312b88101dfcd2ba81b",
            "original_line": 143,
            "original_position": 75,
            "original_start_line": null,
            "path": "flutter-idea/src/io/flutter/analytics/FlutterAnalysisServerListener.java",
            "position": null,
            "pull_request_review_id": 939823033,
            "pull_request_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/848628803/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-04-12T16:19:07Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/848628803",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            }
        },
        {
            "_links": {
                "html": {
                    "href": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r848899357"
                },
                "pull_request": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985"
                },
                "self": {
                    "href": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/848899357"
                }
            },
            "author_association": "CONTRIBUTOR",
            "body": "No right choice.   We can discuss, there are pros and cons for both (as with all things).  If you don't send the information you won't have the signal that users are re-analyzing which is a signal in-itself, but if you do send the information there will be fuller logs with the same information. ",
            "commit_id": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "created_at": "2022-04-12T21:48:09Z",
            "diff_hunk": "@@ -0,0 +1,521 @@\n+package io.flutter.analytics;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.dart.server.AnalysisServerListenerAdapter;\n+import com.google.dart.server.RequestListener;\n+import com.google.dart.server.ResponseListener;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.intellij.codeInsight.lookup.LookupEvent;\n+import com.intellij.codeInsight.lookup.LookupListener;\n+import com.intellij.codeInsight.lookup.LookupManager;\n+import com.intellij.codeInsight.lookup.impl.LookupImpl;\n+import com.intellij.openapi.Disposable;\n+import com.intellij.openapi.application.ApplicationManager;\n+import com.intellij.openapi.editor.Editor;\n+import com.intellij.openapi.fileEditor.FileEditorManager;\n+import com.intellij.openapi.fileEditor.FileEditorManagerEvent;\n+import com.intellij.openapi.fileEditor.FileEditorManagerListener;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.util.text.StringUtil;\n+import com.intellij.openapi.vfs.VirtualFile;\n+import com.intellij.psi.PsiFile;\n+import com.jetbrains.lang.dart.analyzer.DartAnalysisServerService;\n+import com.jetbrains.lang.dart.fixes.DartQuickFix;\n+import com.jetbrains.lang.dart.fixes.DartQuickFixListener;\n+import io.flutter.FlutterInitializer;\n+import io.flutter.utils.FileUtils;\n+import org.dartlang.analysis.server.protocol.*;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.beans.PropertyChangeEvent;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+@SuppressWarnings(\"LocalCanBeFinal\")\n+public final class FlutterAnalysisServerListener extends AnalysisServerListenerAdapter implements Disposable {\n+  // statics\n+  static final String COMPUTED_ERROR = \"computedError\";\n+  static final String INITIAL_COMPUTE_ERRORS_TIME = \"initialComputeErrorsTime\";\n+  static final String INITIAL_HIGHLIGHTS_TIME = \"initialHighlightsTime\";\n+  static final String INITIAL_OUTLINE_TIME = \"initialOutlineTime\";\n+  static final String ROUND_TRIP_TIME = \"roundTripTime\";\n+  static final String QUICK_FIX = \"quickFix\";\n+  static final String UNKNOWN_LOOKUP_STRING = \"<unknown>\";\n+  static final String ANALYSIS_SERVER_LOG = \"analysisServerLog\";\n+  static final String ACCEPTED_COMPLETION = \"acceptedCompletion\";\n+  static final String REJECTED_COMPLETION = \"rejectedCompletion\";\n+  static final String E2E_IJ_COMPLETION_TIME = \"e2eIJCompletionTime\";\n+  static final String ERRORS = \"errors\";\n+  static final String WARNINGS = \"warnings\";\n+  static final String HINTS = \"hints\";\n+  static final String LINTS = \"lints\";\n+  static final String DURATION = \"duration\";\n+  static final String FAILURE = \"failure\";\n+  static final String SUCCESS = \"success\";\n+  static final String ERROR_TYPE_REQUEST = \"R\";\n+  static final String ERROR_TYPE_SERVER = \"@\";\n+\n+  static final String DAS_STATUS_EVENT_TYPE = \"analysisServerStatus\";\n+  static final String[] ERROR_TYPES = new String[]{\n+    AnalysisErrorType.CHECKED_MODE_COMPILE_TIME_ERROR,\n+    AnalysisErrorType.COMPILE_TIME_ERROR,\n+    AnalysisErrorType.HINT,\n+    AnalysisErrorType.LINT,\n+    AnalysisErrorType.STATIC_TYPE_WARNING,\n+    AnalysisErrorType.STATIC_WARNING,\n+    AnalysisErrorType.SYNTACTIC_ERROR\n+  };\n+\n+  static final String LOG_ENTRY_KIND = \"kind\";\n+  static final String LOG_ENTRY_TIME = \"time\";\n+  static final String LOG_ENTRY_DATA = \"data\";\n+  static final String LOG_ENTRY_SDK_VERSION = \"sdkVersion\";\n+\n+  // variables to throttle certain, high frequency events\n+  private static final int COMPUTED_ERROR_SAMPLE_RATE = 100;\n+  @SuppressWarnings(\"ConstantConditions\")\n+  @NotNull private static final Duration INTERVAL_TO_REPORT_MEMORY_USAGE = Duration.ofHours(1);\n+  @NotNull final RequestListener requestListener;\n+  @NotNull final ResponseListener responseListener;\n+  @NotNull final DartQuickFixListener quickFixListener;\n+  // instance members\n+  @NotNull private final Project project;\n+  @NotNull private final Map<String, List<AnalysisError>> pathToErrors;\n+  @NotNull private final Map<String, Instant> pathToErrorTimestamps;\n+  @NotNull private final Map<String, Instant> pathToHighlightTimestamps;\n+  @NotNull private final Map<String, Instant> pathToOutlineTimestamps;\n+  @NotNull private final Map<String, RequestDetails> requestToDetails;\n+  @NotNull private final FileEditorManagerListener fileEditorManagerListener;\n+  LookupSelectionHandler lookupSelectionHandler;\n+  private int computedErrorCounter = 0;\n+  @NotNull private Instant nextMemoryUsageLoggedInstant = Instant.EPOCH;\n+\n+  FlutterAnalysisServerListener(@NotNull Project project) {\n+    this.project = project;\n+    this.pathToErrors = new HashMap<>();\n+    this.pathToErrorTimestamps = new HashMap<>();\n+    this.pathToHighlightTimestamps = new HashMap<>();\n+    this.pathToOutlineTimestamps = new HashMap<>();\n+    this.requestToDetails = new HashMap<>();\n+    LookupManager.getInstance(project).addPropertyChangeListener(this::onPropertyChange);\n+\n+    this.fileEditorManagerListener = new FileEditorManagerListener() {\n+      @Override\n+      public void fileOpened(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n+        // Record the time that this file was opened so that we'll be able to log\n+        // relative timings for errors, highlights, outlines, etc.\n+        String filePath = file.getPath();\n+        Instant nowInstant = Instant.now();\n+        pathToErrorTimestamps.put(filePath, nowInstant);\n+        pathToHighlightTimestamps.put(filePath, nowInstant);\n+        pathToOutlineTimestamps.put(filePath, nowInstant);\n+      }\n+\n+      @Override\n+      public void selectionChanged(@NotNull FileEditorManagerEvent event) {\n+      }\n+\n+      @Override\n+      public void fileClosed(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n+      }\n+    };\n+    project.getMessageBus().connect().subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER, fileEditorManagerListener);\n+    this.quickFixListener = new QuickFixListener();\n+    this.requestListener = new FlutterRequestListener();\n+    this.responseListener = new FlutterResponseListener();\n+    DartAnalysisServerService analysisServer = DartAnalysisServerService.getInstance(project);\n+    analysisServer.setServerLogSubscription(true);\n+    analysisServer.addQuickFixListener(this.quickFixListener);\n+    analysisServer.addRequestListener(this.requestListener);\n+    analysisServer.addResponseListener(this.responseListener);\n+  }\n+\n+  @NotNull\n+  public static FlutterAnalysisServerListener getInstance(@NotNull final Project project) {\n+    return Objects.requireNonNull(project.getService(FlutterAnalysisServerListener.class));\n+  }\n+\n+  @NotNull\n+  private static String safelyGetString(JsonObject jsonObject, String memberName) {\n+    if (jsonObject != null && StringUtil.isNotEmpty(memberName)) {\n+      JsonElement jsonElement = jsonObject.get(memberName);\n+      if (jsonElement != null) {\n+        return Objects.requireNonNull(jsonElement.getAsString());\n+      }\n+    }\n+    return \"\";\n+  }\n+\n+  @Override\n+  public void dispose() {\n+    // This is deprecated and marked for removal in 2021.3. If it is removed we will\n+    // have to do some funny stuff to support older versions of Android Studio.\n+    LookupManager.getInstance(project).removePropertyChangeListener(this::onPropertyChange);\n+  }\n+\n+  @Override\n+  public void computedAnalyzedFiles(List<String> list) {\n+  }\n+\n+  @Override\n+  public void computedAvailableSuggestions(@NotNull List<AvailableSuggestionSet> list, int[] ints) {\n+  }\n+\n+  @Override\n+  public void computedCompletion(String completionId,\n+                                 int replacementOffset,\n+                                 int replacementLength,\n+                                 List<CompletionSuggestion> completionSuggestions,\n+                                 List<IncludedSuggestionSet> includedSuggestionSets,\n+                                 List<String> includedElementKinds,\n+                                 List<IncludedSuggestionRelevanceTag> includedSuggestionRelevanceTags,\n+                                 boolean isLast,\n+                                 String libraryFilePathSD) {\n+  }\n+\n+  @Override\n+  public void computedErrors(String path, List<AnalysisError> list) {\n+    assert list != null;\n+    list.forEach(this::logAnalysisError);\n+    pathToErrors.put(path, list);",
            "html_url": "https://github.com/flutter/flutter-intellij/pull/5985#discussion_r848899357",
            "id": 848899357,
            "in_reply_to_id": 835534901,
            "line": 205,
            "node_id": "PRRC_kwDOA9MwhM4ymS0d",
            "original_commit_id": "1cea9a46645ac63344af583ece3e3c0a1825eb3b",
            "original_line": 205,
            "original_position": 186,
            "original_start_line": null,
            "path": "flutter-idea/src/io/flutter/analytics/FlutterAnalysisServerListener.java",
            "position": 205,
            "pull_request_review_id": 940189622,
            "pull_request_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985",
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/848899357/reactions"
            },
            "side": "RIGHT",
            "start_line": null,
            "start_side": null,
            "updated_at": "2022-04-12T21:48:09Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments/848899357",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/1533520?v=4",
                "events_url": "https://api.github.com/users/jwren/events{/privacy}",
                "followers_url": "https://api.github.com/users/jwren/followers",
                "following_url": "https://api.github.com/users/jwren/following{/other_user}",
                "gists_url": "https://api.github.com/users/jwren/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/jwren",
                "id": 1533520,
                "login": "jwren",
                "node_id": "MDQ6VXNlcjE1MzM1MjA=",
                "organizations_url": "https://api.github.com/users/jwren/orgs",
                "received_events_url": "https://api.github.com/users/jwren/received_events",
                "repos_url": "https://api.github.com/users/jwren/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/jwren/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/jwren/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/jwren"
            }
        }
    ],
    "comments_url": "https://api.github.com/repos/flutter/flutter-intellij/issues/5985/comments",
    "commit_data": [
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            },
            "comments_url": "https://api.github.com/repos/flutter/flutter-intellij/commits/672cc2cf965f91a492f6422ec3fab5bbd4488156/comments",
            "commit": {
                "author": {
                    "date": "2022-04-06T23:55:09Z",
                    "email": "messick@google.com",
                    "name": "Steve Messick"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-04-08T19:01:33Z",
                    "email": "messick@google.com",
                    "name": "Steve Messick"
                },
                "message": "Recreate branch due to git pilot error",
                "tree": {
                    "sha": "7d4af1b40c8099f28b8227eed35ff6d017b5af04",
                    "url": "https://api.github.com/repos/flutter/flutter-intellij/git/trees/7d4af1b40c8099f28b8227eed35ff6d017b5af04"
                },
                "url": "https://api.github.com/repos/flutter/flutter-intellij/git/commits/672cc2cf965f91a492f6422ec3fab5bbd4488156",
                "verification": {
                    "payload": "tree 7d4af1b40c8099f28b8227eed35ff6d017b5af04\nparent e74192ff4482065ee80a8bcb95b526c6492185ea\nauthor Steve Messick <messick@google.com> 1649289309 -0700\ncommitter Steve Messick <messick@google.com> 1649444493 -0700\n\nRecreate branch due to git pilot error\n",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEpuwtt2aX3tILnSnvyg2b3dm1YxgFAmJQho0ACgkQyg2b3dm1\nYxiItg/9F2X9Uub2oUoaKszGriRdMsce807U1D7wDXwX91S0/I0tVe+vsazTdgtl\nRZtrH0nBUX47uQa3L87r8tPYWeP/PbxME+KXjgA4sMPulcBhDb3OJkBl/MV80bpM\n1/kU3mQI9T5R54bApKQ+7Wrtkook3FlX/F4Ll5gJAajY4o5pP+nIjCxnwC+s3wlg\nP+fmRWFLZICjIEEeLEdPPUR+eewt3SircG6jhmr6rbrl403N8BSywXTl0ZlhdIFQ\n+NBRLaZm/ZepqetU5stECng/jwJd5232BeCfhZvKW804fUXB1sNOJ9BxA0QfHmAp\nwWdaodj8TkkMCGpxs+ZINogxji0MZHSNtWn0f8LBuXqM3TPR618ESfVpz7AU0AcO\n9K7Gb2mBd7/DCdv930H/VOsc1TO8ZdrF2EJwc2MHZaaQL0zv9ktMO4vOuL+Kdtu4\n1cbSwQsAca50U56H+UZzHYlemkJzf+XKSMZY4KLonHiwzWb5d5fuZSDv+qfBuT8O\n1FR47axlNxEaFvJyG2Al30NtqTmAQ1bSTPJQ+JQl7cQVgVhXLaFDQ/ybyCNbnXIp\nZBS0Y+LLTxdphBrFfFigvTCiYs/5vyOhyVQvZWi4NuF3g4gRqBWX+Iq1ifu35df3\nUR51q1rwerCuOQ4hJ9Fr4Z1KcxGEDKLjvlEj04F2ukX+1+7iH8A=\n=GmNM\n-----END PGP SIGNATURE-----",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            },
            "html_url": "https://github.com/flutter/flutter-intellij/commit/672cc2cf965f91a492f6422ec3fab5bbd4488156",
            "node_id": "C_kwDOA9MwhNoAKDY3MmNjMmNmOTY1ZjkxYTQ5MmY2NDIyZWMzZmFiNWJiZDQ0ODgxNTY",
            "parents": [
                {
                    "html_url": "https://github.com/flutter/flutter-intellij/commit/e74192ff4482065ee80a8bcb95b526c6492185ea",
                    "sha": "e74192ff4482065ee80a8bcb95b526c6492185ea",
                    "url": "https://api.github.com/repos/flutter/flutter-intellij/commits/e74192ff4482065ee80a8bcb95b526c6492185ea"
                }
            ],
            "sha": "672cc2cf965f91a492f6422ec3fab5bbd4488156",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/commits/672cc2cf965f91a492f6422ec3fab5bbd4488156"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            },
            "comments_url": "https://api.github.com/repos/flutter/flutter-intellij/commits/09a2c277deca60860819fb58eb66bd2438a7c08e/comments",
            "commit": {
                "author": {
                    "date": "2022-04-07T16:02:43Z",
                    "email": "messick@google.com",
                    "name": "Steve Messick"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-04-08T19:01:34Z",
                    "email": "messick@google.com",
                    "name": "Steve Messick"
                },
                "message": "Fix syntax error",
                "tree": {
                    "sha": "9f89dc84fe9e3966ad8451fb8894bc09d84357cc",
                    "url": "https://api.github.com/repos/flutter/flutter-intellij/git/trees/9f89dc84fe9e3966ad8451fb8894bc09d84357cc"
                },
                "url": "https://api.github.com/repos/flutter/flutter-intellij/git/commits/09a2c277deca60860819fb58eb66bd2438a7c08e",
                "verification": {
                    "payload": "tree 9f89dc84fe9e3966ad8451fb8894bc09d84357cc\nparent 672cc2cf965f91a492f6422ec3fab5bbd4488156\nauthor Steve Messick <messick@google.com> 1649347363 -0700\ncommitter Steve Messick <messick@google.com> 1649444494 -0700\n\nFix syntax error\n",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEpuwtt2aX3tILnSnvyg2b3dm1YxgFAmJQho4ACgkQyg2b3dm1\nYxjSpRAAk//xptV3xydqjU5Ddrdj/acjVXlspxECQBhNYbh/aS7x5cOhd6hsvuSS\nnrEZ/IZ617fA0mwV7th2NoKy6hL8Lh3DAGhwTtGvwML0o9dLqyhPXs+8WqWYrC0w\nKA2TQr3PBslKk2WCOk6eKU+Zne5oaeghMt9WiNMB2R370vCMNhHi6YK+liKwCWhA\nzrCYxYBDdIU6OQzSAIaWbYHVjuimjlIX1uDw2unmfwzEPA8Wc5XMF/NCEz4ipM0g\n6ZnEZn0Gi+z+ncrsdSmfp8cVfrCrqGvYnlNSTak27h1gIr7y/mebLNPFjoJmMO2E\nmeW8V5wcBrgfm/DHyH61xAr3GSTjfAQU2FnBVh5l2d8JSwt4jLKin4CvMZuI02j2\n5cdkQ/R2e5WhDiXLd1cZo8CXZ5WJU1GrJ6Cll4+V3MgcEzklhHbIBrjAAlp6RpE9\nJrxGcIv/l4PzpgVyetmnCl1DOD4CutHM2hOFd5CDlQ56Ibyco39STeJ0NuqvD9vr\n2Ixpnz83rob49zRNjzskKSNcGtj0AI8Ey+4AnuqzlshgV61ToC7ra5NpbErWVIhJ\ntKZOugDXgYKg9i70uY7NhUsTn+yeQWrCeUPNqVCD6SVzN3UKdIKsZYWFZNKJgBIq\n65Sox3uVds1XN9FVEUWyVLvAuVBrbQrGdRjUvZVwg405M+4W708=\n=c7pF\n-----END PGP SIGNATURE-----",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            },
            "html_url": "https://github.com/flutter/flutter-intellij/commit/09a2c277deca60860819fb58eb66bd2438a7c08e",
            "node_id": "C_kwDOA9MwhNoAKDA5YTJjMjc3ZGVjYTYwODYwODE5ZmI1OGViNjZiZDI0MzhhN2MwOGU",
            "parents": [
                {
                    "html_url": "https://github.com/flutter/flutter-intellij/commit/672cc2cf965f91a492f6422ec3fab5bbd4488156",
                    "sha": "672cc2cf965f91a492f6422ec3fab5bbd4488156",
                    "url": "https://api.github.com/repos/flutter/flutter-intellij/commits/672cc2cf965f91a492f6422ec3fab5bbd4488156"
                }
            ],
            "sha": "09a2c277deca60860819fb58eb66bd2438a7c08e",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/commits/09a2c277deca60860819fb58eb66bd2438a7c08e"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            },
            "comments_url": "https://api.github.com/repos/flutter/flutter-intellij/commits/8f372a685a8aa4df77034312b88101dfcd2ba81b/comments",
            "commit": {
                "author": {
                    "date": "2022-04-11T21:15:25Z",
                    "email": "messick@google.com",
                    "name": "Steve Messick"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-04-11T21:15:25Z",
                    "email": "messick@google.com",
                    "name": "Steve Messick"
                },
                "message": "Add throttling to high frequency reports",
                "tree": {
                    "sha": "d06640c248ba7a71be69a0f9d78f3483c3563473",
                    "url": "https://api.github.com/repos/flutter/flutter-intellij/git/trees/d06640c248ba7a71be69a0f9d78f3483c3563473"
                },
                "url": "https://api.github.com/repos/flutter/flutter-intellij/git/commits/8f372a685a8aa4df77034312b88101dfcd2ba81b",
                "verification": {
                    "payload": "tree d06640c248ba7a71be69a0f9d78f3483c3563473\nparent 09a2c277deca60860819fb58eb66bd2438a7c08e\nauthor Steve Messick <messick@google.com> 1649711725 -0700\ncommitter Steve Messick <messick@google.com> 1649711725 -0700\n\nAdd throttling to high frequency reports\n",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEpuwtt2aX3tILnSnvyg2b3dm1YxgFAmJUmm4ACgkQyg2b3dm1\nYxiYPg//TrXo6rpi1bXsfDaPhO96q8JVSPdeyX1HgRTdI5dO8Qa5fRQgMJ1tIRrT\nFwUjy3O6ezMvoJSafYtOlxf6Q14Hx3yLlB2nMDhKYvI3ShbKgONs9LFhMVd+JbiF\nKdsXADfZwDb2bXzG7G14RkzI6gqlqBa8PbaJipL6nmBL36fpKGiIaOKkLCuJhTGw\nnLio+rr28gV47XT2QM1MkWrumpAH3+oHYgIJDhTSsIi65RBCd11TfcIgY/+CtNPh\n+VZW0QdGonCMZv3uIKF1ohHuyIa8JoAqsJHXeX03Y+ndtKZzHxjH+hoQOolKq2pS\nHEzNdjIGdF1ANiSsmc4IhWsJk9lfzxP09i74h0VHQwZNNOPSnzBwIAGcuwLGEved\nEOjQ9dLKeecM9yY3sUWYkswVgDZurEr/1ehU6RG8+ezE52NqHdaoJ5r3psK/LIpo\nOCbCjh243StLgNRKkm50iw7GNniQtffKsoheKwMaApKc9SZy5bC3adR3/522N0z6\nPinfD9Zr43DhKrb/qBMPv4XlNo3DD7OKpHrAXOmdcOPz8v4cJX23YVbkC9egVuOy\ndGeWDlbxgVM07lLLY8+nrVB6Sjp6hMO4Ox4yftsPfNuta/cVYb1bz4l2d5r/mMXR\nfzcA1WQrDp7NsTuz8NJnDlUCvPRT0SZ9gpFCqdOddSqmCK8qves=\n=r1PE\n-----END PGP SIGNATURE-----",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            },
            "html_url": "https://github.com/flutter/flutter-intellij/commit/8f372a685a8aa4df77034312b88101dfcd2ba81b",
            "node_id": "C_kwDOA9MwhNoAKDhmMzcyYTY4NWE4YWE0ZGY3NzAzNDMxMmI4ODEwMWRmY2QyYmE4MWI",
            "parents": [
                {
                    "html_url": "https://github.com/flutter/flutter-intellij/commit/09a2c277deca60860819fb58eb66bd2438a7c08e",
                    "sha": "09a2c277deca60860819fb58eb66bd2438a7c08e",
                    "url": "https://api.github.com/repos/flutter/flutter-intellij/commits/09a2c277deca60860819fb58eb66bd2438a7c08e"
                }
            ],
            "sha": "8f372a685a8aa4df77034312b88101dfcd2ba81b",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/commits/8f372a685a8aa4df77034312b88101dfcd2ba81b"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            },
            "comments_url": "https://api.github.com/repos/flutter/flutter-intellij/commits/4e255d3e1b000fc260ceb7fa611ce7e7616e1ce2/comments",
            "commit": {
                "author": {
                    "date": "2022-04-11T21:25:04Z",
                    "email": "messick@google.com",
                    "name": "Steve Messick"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-04-11T21:25:04Z",
                    "email": "messick@google.com",
                    "name": "Steve Messick"
                },
                "message": "Fix syntax for older IntelliJ",
                "tree": {
                    "sha": "6ab28295da8b04cbb93eb24de03938162ec64faf",
                    "url": "https://api.github.com/repos/flutter/flutter-intellij/git/trees/6ab28295da8b04cbb93eb24de03938162ec64faf"
                },
                "url": "https://api.github.com/repos/flutter/flutter-intellij/git/commits/4e255d3e1b000fc260ceb7fa611ce7e7616e1ce2",
                "verification": {
                    "payload": "tree 6ab28295da8b04cbb93eb24de03938162ec64faf\nparent 8f372a685a8aa4df77034312b88101dfcd2ba81b\nauthor Steve Messick <messick@google.com> 1649712304 -0700\ncommitter Steve Messick <messick@google.com> 1649712304 -0700\n\nFix syntax for older IntelliJ\n",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEpuwtt2aX3tILnSnvyg2b3dm1YxgFAmJUnLAACgkQyg2b3dm1\nYxihDg//dupLpRyeFz8Yb47LJ9WV3zHqaFdthrvu54KqL/bA1EgT2fBjFIDnzbp1\nUa1BWPuphwfuBqT0NbKs2JdG7og9MSBERon3NXBo8B+iGgRG5wlOLJiEcLmstIez\n/1HHGhEfokKrAE7AkxAPzmaEHupiIUCIQgfPyJBQs8Y5qSXf3mYe5L4A+/b1gjSb\nbqy8rWqzzLdJ+8/ZGJ+JUmdA4ZFfEcM6df9MLqKrSKJUa45QPkD7cv/1sBESmMHi\nOw0DoPCZB44nYML+Zu9Li50C+J5M7a/uccNje3cB2vPnLreW/uuSZsPWDK1y5+b0\nsmXyuvE++Fh4/eu/a6lfyQrNps/OCwfkvHsSqPDvC8rwxGgd+m2Wv/2VHMOr1A0N\n9rock9Fn8RRdEURi7hexWW+RxD15ndvYF7Kw+I+IeernYE5OwSoQ6kMb/eH8bx60\nYjVwyrlq9VxFn4xbHFITvml7+H3rcb2jNbj5i2xu2/+MQsjIYsQSjyWHSZ4pmmmd\nTi1HwI363jjdb3zheRlOFiwT2sn7YHbVzikDn2kbHQieYKJtBuPJPYGUljyJRYb0\nNiw317KvEwZo0l4Y4p/COGskHz7jHNotJFhsoZsx5uRqq8oWUA761lFSfXix7ths\nM5WmXkC+1640ZFV+/D0pOYdPoTBnF9USHMl+8r3kWUi/YzixC20=\n=XHkP\n-----END PGP SIGNATURE-----",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            },
            "html_url": "https://github.com/flutter/flutter-intellij/commit/4e255d3e1b000fc260ceb7fa611ce7e7616e1ce2",
            "node_id": "C_kwDOA9MwhNoAKDRlMjU1ZDNlMWIwMDBmYzI2MGNlYjdmYTYxMWNlN2U3NjE2ZTFjZTI",
            "parents": [
                {
                    "html_url": "https://github.com/flutter/flutter-intellij/commit/8f372a685a8aa4df77034312b88101dfcd2ba81b",
                    "sha": "8f372a685a8aa4df77034312b88101dfcd2ba81b",
                    "url": "https://api.github.com/repos/flutter/flutter-intellij/commits/8f372a685a8aa4df77034312b88101dfcd2ba81b"
                }
            ],
            "sha": "4e255d3e1b000fc260ceb7fa611ce7e7616e1ce2",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/commits/4e255d3e1b000fc260ceb7fa611ce7e7616e1ce2"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            },
            "comments_url": "https://api.github.com/repos/flutter/flutter-intellij/commits/6b1b2649d938f05f87b8d08607df9d5c96efc289/comments",
            "commit": {
                "author": {
                    "date": "2022-04-11T21:30:46Z",
                    "email": "messick@google.com",
                    "name": "Steve Messick"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-04-11T21:30:46Z",
                    "email": "messick@google.com",
                    "name": "Steve Messick"
                },
                "message": "ditto",
                "tree": {
                    "sha": "f87fbe97c82d8eefb9e436721217f4f88650389e",
                    "url": "https://api.github.com/repos/flutter/flutter-intellij/git/trees/f87fbe97c82d8eefb9e436721217f4f88650389e"
                },
                "url": "https://api.github.com/repos/flutter/flutter-intellij/git/commits/6b1b2649d938f05f87b8d08607df9d5c96efc289",
                "verification": {
                    "payload": "tree f87fbe97c82d8eefb9e436721217f4f88650389e\nparent 4e255d3e1b000fc260ceb7fa611ce7e7616e1ce2\nauthor Steve Messick <messick@google.com> 1649712646 -0700\ncommitter Steve Messick <messick@google.com> 1649712646 -0700\n\nditto\n",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEpuwtt2aX3tILnSnvyg2b3dm1YxgFAmJUngYACgkQyg2b3dm1\nYxjW4Q/8Ctk+oYXU+cZFDMl+vMgfa8/jvO6h0c1z7zCKjzQIo+LZw6pLu+DCWEKl\nXkDjVH6AphtBpGMn+DtOlj9fXIOBb+AYCv7eq0RZUe2NnzGPldkYZjtw1/CckBhF\nwnlZy4V8BczYPA4tWcAAEvj4IgmCNl0ThAoHmBD4JOPQp5f5VK3R4Jt0/JMH5eQ4\ndtAipbqZNQaP4T2tCVQ+6hHy87G+Y/m2tbkHXE++OwHhl0+WuzrJP9xq8LDLE8Y6\n+7Ht3Yl7lGg/U88N6XUue/AcaFmituz5eSDpQzDqjM6fzPEDSkmT6SqAG+8Kfw5T\nfzgYXcwX7jTW2yhFvFQP6tAd7lKE2JBLVIt8LYJwNhauQweqURXx9wSrfu3Wbuym\nY/MupjM9Lm9JOCrqyl4woD9UdVk0m3tMR9Lh2Twz7sRzRQemIrTyWcXaJu6pZSht\nQLtjwOyAsHznVqdSZWKsIiHbiEpxBGWIZr9JsgEdZlYlQyZGhE5tGoWcTaPnQHLr\nGNkDQaEtgkDZVGC/EGNH99wg11AGSR5I9U21dEbWlEBWCfrubGSGyvzUZhohbOf3\nI815b/5L1nmDpQDVAyZTmiPfsMJEX3/yxZM1OexehjAjp3Xb3tuRx/klRp4Dnz+J\n3JuCE/JUJhNmcP9o16GBI2o6x50GCQphXsCIH9TXDotBDfjt7xU=\n=FdWD\n-----END PGP SIGNATURE-----",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            },
            "html_url": "https://github.com/flutter/flutter-intellij/commit/6b1b2649d938f05f87b8d08607df9d5c96efc289",
            "node_id": "C_kwDOA9MwhNoAKDZiMWIyNjQ5ZDkzOGYwNWY4N2I4ZDA4NjA3ZGY5ZDVjOTZlZmMyODk",
            "parents": [
                {
                    "html_url": "https://github.com/flutter/flutter-intellij/commit/4e255d3e1b000fc260ceb7fa611ce7e7616e1ce2",
                    "sha": "4e255d3e1b000fc260ceb7fa611ce7e7616e1ce2",
                    "url": "https://api.github.com/repos/flutter/flutter-intellij/commits/4e255d3e1b000fc260ceb7fa611ce7e7616e1ce2"
                }
            ],
            "sha": "6b1b2649d938f05f87b8d08607df9d5c96efc289",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/commits/6b1b2649d938f05f87b8d08607df9d5c96efc289"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            },
            "comments_url": "https://api.github.com/repos/flutter/flutter-intellij/commits/8736a49949eaade2a50574cd54e90275ca455b03/comments",
            "commit": {
                "author": {
                    "date": "2022-04-11T22:45:12Z",
                    "email": "messick@google.com",
                    "name": "Steve Messick"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-04-11T22:45:12Z",
                    "email": "messick@google.com",
                    "name": "Steve Messick"
                },
                "message": "Fix typo",
                "tree": {
                    "sha": "e9aee7a4caf0c56a6392d750621b79290e0e0753",
                    "url": "https://api.github.com/repos/flutter/flutter-intellij/git/trees/e9aee7a4caf0c56a6392d750621b79290e0e0753"
                },
                "url": "https://api.github.com/repos/flutter/flutter-intellij/git/commits/8736a49949eaade2a50574cd54e90275ca455b03",
                "verification": {
                    "payload": "tree e9aee7a4caf0c56a6392d750621b79290e0e0753\nparent 6b1b2649d938f05f87b8d08607df9d5c96efc289\nauthor Steve Messick <messick@google.com> 1649717112 -0700\ncommitter Steve Messick <messick@google.com> 1649717112 -0700\n\nFix typo\n",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEpuwtt2aX3tILnSnvyg2b3dm1YxgFAmJUr3gACgkQyg2b3dm1\nYxi1uQ//bD/Gn7DN8d0jHNGOXpwUJsTdWo4HZmboMjYSgtkdbDYvbwE2vtCyYryT\nTjg3B1wM0grMsnnIz/7EFvB50P/E60GPQJ3R1j9RVkMsuql2IHwMUvhgqk4OWo3l\n7dMI3xHMtlumkQRk3ruSXKbOZkaQB0Kov5fCZCnCXYAUdFbX/I/SI/VNPPiZK8Y+\nkyVgmNTj9SUaoEtgplgtAEsc0RJY1CZ0tprp2XKzfVliSn3RHD+XwH8ixeugvEws\nnQ+lEMKFrvp7P9oM0HaBzUWM+N3YwJnPcZWfpq+2ZzdDrlMsoNhqbrSTqUe3eHor\nrHbJKkocoD0NBHNh/aIQ3D5FESaWmCtfDSRwUNuYR4RC37YUtZ3ZidZbbp1biKL1\nsyf8y6u2bTShlPlnqJtt7SnNeXj2TdKO/SUZQ151S3KvyLt4PyZDt82H6p11n6a8\n9C4SxYLyTid5PDHP1fgR0UD4d48sImJ360IeQXiCwd6yITmOKWA7f6VRrK/tPkLr\nR/+XDahPEffnYBqX4nelzjyqf6ZFQJGThaBT0pYjtaCBiOoC951w05j82DM40YRE\na2el10gRNSXyaglLg0eG15v/mWlyA32rTIQ+o3CBKM7YzxBCHZeRGrPLCUGsEEkV\nGPOzl7JcMaqr4DnQkzY7camfRm4yHfEGb/oMbWwYb9ErGZNPwHY=\n=K4v5\n-----END PGP SIGNATURE-----",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            },
            "html_url": "https://github.com/flutter/flutter-intellij/commit/8736a49949eaade2a50574cd54e90275ca455b03",
            "node_id": "C_kwDOA9MwhNoAKDg3MzZhNDk5NDllYWFkZTJhNTA1NzRjZDU0ZTkwMjc1Y2E0NTViMDM",
            "parents": [
                {
                    "html_url": "https://github.com/flutter/flutter-intellij/commit/6b1b2649d938f05f87b8d08607df9d5c96efc289",
                    "sha": "6b1b2649d938f05f87b8d08607df9d5c96efc289",
                    "url": "https://api.github.com/repos/flutter/flutter-intellij/commits/6b1b2649d938f05f87b8d08607df9d5c96efc289"
                }
            ],
            "sha": "8736a49949eaade2a50574cd54e90275ca455b03",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/commits/8736a49949eaade2a50574cd54e90275ca455b03"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            },
            "comments_url": "https://api.github.com/repos/flutter/flutter-intellij/commits/68d072cf28b8e24862f03bf7404a3c9393fa497f/comments",
            "commit": {
                "author": {
                    "date": "2022-04-12T16:18:37Z",
                    "email": "messick@google.com",
                    "name": "Steve Messick"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-04-12T16:18:37Z",
                    "email": "messick@google.com",
                    "name": "Steve Messick"
                },
                "message": "Typo",
                "tree": {
                    "sha": "f95b2a7010d346cdf4d3915ea57643e1a6d33d29",
                    "url": "https://api.github.com/repos/flutter/flutter-intellij/git/trees/f95b2a7010d346cdf4d3915ea57643e1a6d33d29"
                },
                "url": "https://api.github.com/repos/flutter/flutter-intellij/git/commits/68d072cf28b8e24862f03bf7404a3c9393fa497f",
                "verification": {
                    "payload": "tree f95b2a7010d346cdf4d3915ea57643e1a6d33d29\nparent 8736a49949eaade2a50574cd54e90275ca455b03\nauthor Steve Messick <messick@google.com> 1649780317 -0700\ncommitter Steve Messick <messick@google.com> 1649780317 -0700\n\nTypo\n",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEpuwtt2aX3tILnSnvyg2b3dm1YxgFAmJVpl0ACgkQyg2b3dm1\nYxiQ6xAAvi/8aKK45mx8IOQJrdWWDgC3yl4dZ0Re5ZbWzGOp0HNh7468WklgQ9Pp\nue8uRh6QiHWr9xFdCME23Yvek5b+GI2xGkEfPTyzPTkgzz01sp/5WeD6866WARHJ\nikjRSFStGacMzkIS0Q8YLlxJSqCmjyQ35J7F5VOvxUH0NUxz7kVR6BCuk2Xp4qk3\nSbO2fgd9qhoFfixDA/uo9Zk2GFh5DCUoiZtH5QZk5wE+QUrMDlKi8/zfbk/R2FM1\nAdWod6scpxiM1Jo4kWSf862yfhbm8Hkw9Sn3fdenc0nw5qG9obCY8i1qGP5aywkF\nDoIDczyCnmjV+BkGUzhVi9Jlj8hH0ixDPRbcFO12qEA2pS+QlV8MlPht0izbGx+y\ntlNAHSUEOpVYKWLiR7YBNJIuUgBWhcXMsssRyKfuhZBFcyHSipmNR1gJz7oozupg\nLfKEjVh2Tk6Orq3JBpa3sleZGieugG1tEY+Z+jij28Egf5KcUYKif7dAfUCh2nEK\nTxFpTdYOHWLy2CMPvaDWB2jv5p57o73SctSTQBG5syaWyVR7ayWfx/LXkiiAxupz\nePXGEetbP7hVCbk3h+115XULpu5leOvbAgdCVsxDody9BDSu4l3kmGRIlPgHeINH\nxS8/bf6cev+lvHNHxVOVtnLBUibhJDBs01EidjLLAtHP+in/hto=\n=oXHf\n-----END PGP SIGNATURE-----",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            },
            "html_url": "https://github.com/flutter/flutter-intellij/commit/68d072cf28b8e24862f03bf7404a3c9393fa497f",
            "node_id": "C_kwDOA9MwhNoAKDY4ZDA3MmNmMjhiOGUyNDg2MmYwM2JmNzQwNGEzYzkzOTNmYTQ5N2Y",
            "parents": [
                {
                    "html_url": "https://github.com/flutter/flutter-intellij/commit/8736a49949eaade2a50574cd54e90275ca455b03",
                    "sha": "8736a49949eaade2a50574cd54e90275ca455b03",
                    "url": "https://api.github.com/repos/flutter/flutter-intellij/commits/8736a49949eaade2a50574cd54e90275ca455b03"
                }
            ],
            "sha": "68d072cf28b8e24862f03bf7404a3c9393fa497f",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/commits/68d072cf28b8e24862f03bf7404a3c9393fa497f"
        },
        {
            "author": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            },
            "comments_url": "https://api.github.com/repos/flutter/flutter-intellij/commits/3d6e2bbd4eba4fd4d85f9584af7e641762834a8d/comments",
            "commit": {
                "author": {
                    "date": "2022-04-14T16:17:53Z",
                    "email": "stevemessick@users.noreply.github.com",
                    "name": "stevemessick"
                },
                "comment_count": 0,
                "committer": {
                    "date": "2022-04-14T16:17:53Z",
                    "email": "noreply@github.com",
                    "name": "GitHub"
                },
                "message": "Merge branch 'master' into more-analytics",
                "tree": {
                    "sha": "83b22b5d97f9b4e308484fde58ab1d7f9e59ce9e",
                    "url": "https://api.github.com/repos/flutter/flutter-intellij/git/trees/83b22b5d97f9b4e308484fde58ab1d7f9e59ce9e"
                },
                "url": "https://api.github.com/repos/flutter/flutter-intellij/git/commits/3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
                "verification": {
                    "payload": "tree 83b22b5d97f9b4e308484fde58ab1d7f9e59ce9e\nparent 68d072cf28b8e24862f03bf7404a3c9393fa497f\nparent ca0966e730c00f731e181292d9ed18f5c539cd6e\nauthor stevemessick <stevemessick@users.noreply.github.com> 1649953073 -0700\ncommitter GitHub <noreply@github.com> 1649953073 -0700\n\nMerge branch 'master' into more-analytics",
                    "reason": "valid",
                    "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiWEkxCRBK7hj4Ov3rIwAAHHIIAGnyCY5/aa8apxhAawXspKs4\nzCVG+EaCKcaKLRd1P143I50I2f0pLwJw+8uf3Ubw6QpPLzgT9DxZQ71LebF/jTgg\nCzRyoQKMe7VwbJ8zrybD/vNosoxU7eBVVVpoZqbavhx18udmPmMafrSE7T8/9War\njm8hZ55wJJH3vmia3kpQFAOBBPqkqTGcor62X/h6DCMOUbGgl4dGTrZd3fxNZFw9\nrQNZvkJfzcrhByuAKU1pBg5eDFgPJEOby6pEcWQ9MVe4F/ca/G2pCEylVpY7Xp4E\n8X0LxksSleYgsV+uCVlqYSp7DLtQ9hDnjaV7TDeK+NqPNOD+/uFlSBXC2wvkhFM=\n=w0W6\n-----END PGP SIGNATURE-----\n",
                    "verified": true
                }
            },
            "committer": {
                "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
                "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
                "followers_url": "https://api.github.com/users/web-flow/followers",
                "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
                "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/web-flow",
                "id": 19864447,
                "login": "web-flow",
                "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
                "organizations_url": "https://api.github.com/users/web-flow/orgs",
                "received_events_url": "https://api.github.com/users/web-flow/received_events",
                "repos_url": "https://api.github.com/users/web-flow/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/web-flow"
            },
            "html_url": "https://github.com/flutter/flutter-intellij/commit/3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "node_id": "C_kwDOA9MwhNoAKDNkNmUyYmJkNGViYTRmZDRkODVmOTU4NGFmN2U2NDE3NjI4MzRhOGQ",
            "parents": [
                {
                    "html_url": "https://github.com/flutter/flutter-intellij/commit/68d072cf28b8e24862f03bf7404a3c9393fa497f",
                    "sha": "68d072cf28b8e24862f03bf7404a3c9393fa497f",
                    "url": "https://api.github.com/repos/flutter/flutter-intellij/commits/68d072cf28b8e24862f03bf7404a3c9393fa497f"
                },
                {
                    "html_url": "https://github.com/flutter/flutter-intellij/commit/ca0966e730c00f731e181292d9ed18f5c539cd6e",
                    "sha": "ca0966e730c00f731e181292d9ed18f5c539cd6e",
                    "url": "https://api.github.com/repos/flutter/flutter-intellij/commits/ca0966e730c00f731e181292d9ed18f5c539cd6e"
                }
            ],
            "sha": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/commits/3d6e2bbd4eba4fd4d85f9584af7e641762834a8d"
        }
    ],
    "commits_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985/commits",
    "created_at": "2022-02-18T23:35:30Z",
    "diff_url": "https://github.com/flutter/flutter-intellij/pull/5985.diff",
    "draft": false,
    "head": {
        "label": "flutter:more-analytics",
        "ref": "more-analytics",
        "repo": {
            "allow_forking": true,
            "archive_url": "https://api.github.com/repos/flutter/flutter-intellij/{archive_format}{/ref}",
            "archived": false,
            "assignees_url": "https://api.github.com/repos/flutter/flutter-intellij/assignees{/user}",
            "blobs_url": "https://api.github.com/repos/flutter/flutter-intellij/git/blobs{/sha}",
            "branches_url": "https://api.github.com/repos/flutter/flutter-intellij/branches{/branch}",
            "clone_url": "https://github.com/flutter/flutter-intellij.git",
            "collaborators_url": "https://api.github.com/repos/flutter/flutter-intellij/collaborators{/collaborator}",
            "comments_url": "https://api.github.com/repos/flutter/flutter-intellij/comments{/number}",
            "commits_url": "https://api.github.com/repos/flutter/flutter-intellij/commits{/sha}",
            "compare_url": "https://api.github.com/repos/flutter/flutter-intellij/compare/{base}...{head}",
            "contents_url": "https://api.github.com/repos/flutter/flutter-intellij/contents/{+path}",
            "contributors_url": "https://api.github.com/repos/flutter/flutter-intellij/contributors",
            "created_at": "2016-07-25T22:31:03Z",
            "default_branch": "master",
            "deployments_url": "https://api.github.com/repos/flutter/flutter-intellij/deployments",
            "description": "Flutter Plugin for IntelliJ",
            "disabled": false,
            "downloads_url": "https://api.github.com/repos/flutter/flutter-intellij/downloads",
            "events_url": "https://api.github.com/repos/flutter/flutter-intellij/events",
            "fork": false,
            "forks": 308,
            "forks_count": 308,
            "forks_url": "https://api.github.com/repos/flutter/flutter-intellij/forks",
            "full_name": "flutter/flutter-intellij",
            "git_commits_url": "https://api.github.com/repos/flutter/flutter-intellij/git/commits{/sha}",
            "git_refs_url": "https://api.github.com/repos/flutter/flutter-intellij/git/refs{/sha}",
            "git_tags_url": "https://api.github.com/repos/flutter/flutter-intellij/git/tags{/sha}",
            "git_url": "git://github.com/flutter/flutter-intellij.git",
            "has_downloads": true,
            "has_issues": true,
            "has_pages": false,
            "has_projects": true,
            "has_wiki": true,
            "homepage": "https://flutter.dev/using-ide",
            "hooks_url": "https://api.github.com/repos/flutter/flutter-intellij/hooks",
            "html_url": "https://github.com/flutter/flutter-intellij",
            "id": 64172164,
            "is_template": false,
            "issue_comment_url": "https://api.github.com/repos/flutter/flutter-intellij/issues/comments{/number}",
            "issue_events_url": "https://api.github.com/repos/flutter/flutter-intellij/issues/events{/number}",
            "issues_url": "https://api.github.com/repos/flutter/flutter-intellij/issues{/number}",
            "keys_url": "https://api.github.com/repos/flutter/flutter-intellij/keys{/key_id}",
            "labels_url": "https://api.github.com/repos/flutter/flutter-intellij/labels{/name}",
            "language": "Java",
            "languages_url": "https://api.github.com/repos/flutter/flutter-intellij/languages",
            "license": {
                "key": "bsd-3-clause",
                "name": "BSD 3-Clause \"New\" or \"Revised\" License",
                "node_id": "MDc6TGljZW5zZTU=",
                "spdx_id": "BSD-3-Clause",
                "url": "https://api.github.com/licenses/bsd-3-clause"
            },
            "merges_url": "https://api.github.com/repos/flutter/flutter-intellij/merges",
            "milestones_url": "https://api.github.com/repos/flutter/flutter-intellij/milestones{/number}",
            "mirror_url": null,
            "name": "flutter-intellij",
            "node_id": "MDEwOlJlcG9zaXRvcnk2NDE3MjE2NA==",
            "notifications_url": "https://api.github.com/repos/flutter/flutter-intellij/notifications{?since,all,participating}",
            "open_issues": 514,
            "open_issues_count": 514,
            "owner": {
                "avatar_url": "https://avatars.githubusercontent.com/u/14101776?v=4",
                "events_url": "https://api.github.com/users/flutter/events{/privacy}",
                "followers_url": "https://api.github.com/users/flutter/followers",
                "following_url": "https://api.github.com/users/flutter/following{/other_user}",
                "gists_url": "https://api.github.com/users/flutter/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/flutter",
                "id": 14101776,
                "login": "flutter",
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjE0MTAxNzc2",
                "organizations_url": "https://api.github.com/users/flutter/orgs",
                "received_events_url": "https://api.github.com/users/flutter/received_events",
                "repos_url": "https://api.github.com/users/flutter/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/flutter/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/flutter/subscriptions",
                "type": "Organization",
                "url": "https://api.github.com/users/flutter"
            },
            "private": false,
            "pulls_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls{/number}",
            "pushed_at": "2022-10-03T08:04:48Z",
            "releases_url": "https://api.github.com/repos/flutter/flutter-intellij/releases{/id}",
            "size": 160091,
            "ssh_url": "git@github.com:flutter/flutter-intellij.git",
            "stargazers_count": 1802,
            "stargazers_url": "https://api.github.com/repos/flutter/flutter-intellij/stargazers",
            "statuses_url": "https://api.github.com/repos/flutter/flutter-intellij/statuses/{sha}",
            "subscribers_url": "https://api.github.com/repos/flutter/flutter-intellij/subscribers",
            "subscription_url": "https://api.github.com/repos/flutter/flutter-intellij/subscription",
            "svn_url": "https://github.com/flutter/flutter-intellij",
            "tags_url": "https://api.github.com/repos/flutter/flutter-intellij/tags",
            "teams_url": "https://api.github.com/repos/flutter/flutter-intellij/teams",
            "topics": [
                "flutter",
                "intellij-plugin",
                "java"
            ],
            "trees_url": "https://api.github.com/repos/flutter/flutter-intellij/git/trees{/sha}",
            "updated_at": "2022-10-03T05:16:49Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij",
            "visibility": "public",
            "watchers": 1802,
            "watchers_count": 1802,
            "web_commit_signoff_required": false
        },
        "sha": "3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
        "user": {
            "avatar_url": "https://avatars.githubusercontent.com/u/14101776?v=4",
            "events_url": "https://api.github.com/users/flutter/events{/privacy}",
            "followers_url": "https://api.github.com/users/flutter/followers",
            "following_url": "https://api.github.com/users/flutter/following{/other_user}",
            "gists_url": "https://api.github.com/users/flutter/gists{/gist_id}",
            "gravatar_id": "",
            "html_url": "https://github.com/flutter",
            "id": 14101776,
            "login": "flutter",
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE0MTAxNzc2",
            "organizations_url": "https://api.github.com/users/flutter/orgs",
            "received_events_url": "https://api.github.com/users/flutter/received_events",
            "repos_url": "https://api.github.com/users/flutter/repos",
            "site_admin": false,
            "starred_url": "https://api.github.com/users/flutter/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/flutter/subscriptions",
            "type": "Organization",
            "url": "https://api.github.com/users/flutter"
        }
    },
    "html_url": "https://github.com/flutter/flutter-intellij/pull/5985",
    "id": 857848583,
    "issue_url": "https://api.github.com/repos/flutter/flutter-intellij/issues/5985",
    "labels": [],
    "locked": false,
    "merge_commit_sha": "d4072cf627b8354d115387d4875ef7b7e70409a5",
    "merged_at": "2022-04-14T16:34:20Z",
    "milestone": null,
    "node_id": "PR_kwDOA9MwhM4zIbsH",
    "number": 5985,
    "patch_url": "https://github.com/flutter/flutter-intellij/pull/5985.patch",
    "requested_reviewers": [],
    "requested_teams": [],
    "review_comment_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/comments{/number}",
    "review_comments_url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985/comments",
    "state": "closed",
    "statuses_url": "https://api.github.com/repos/flutter/flutter-intellij/statuses/3d6e2bbd4eba4fd4d85f9584af7e641762834a8d",
    "title": "Add more analytics",
    "updated_at": "2022-04-14T16:34:25Z",
    "url": "https://api.github.com/repos/flutter/flutter-intellij/pulls/5985",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
        "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
        "followers_url": "https://api.github.com/users/stevemessick/followers",
        "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
        "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/stevemessick",
        "id": 8518285,
        "login": "stevemessick",
        "node_id": "MDQ6VXNlcjg1MTgyODU=",
        "organizations_url": "https://api.github.com/users/stevemessick/orgs",
        "received_events_url": "https://api.github.com/users/stevemessick/received_events",
        "repos_url": "https://api.github.com/users/stevemessick/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/stevemessick"
    }
}