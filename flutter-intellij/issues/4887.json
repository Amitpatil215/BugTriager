{
    "active_lock_reason": null,
    "assignee": null,
    "assignees": [],
    "author_association": "NONE",
    "body": "Android studio version 4.0.1\r\ndart Plugins version 193.7537\r\nfulutter Plugins version 49.0,2\r\nXcode version 12.0\r\niphone Ios version 13.6.1\r\nIt is okay to use Xcode to directly package, compile and install. However, you can also use Android studio to package and compile. However, there will be a python script error when the synchronous installation package runs. I think it may be due to a problem with Android studio.\r\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\nRunning Xcode build...\r\nXcode build done.                                           31.5s\r\nInstalling and launching...                                    \r\n\r\nTraceback (most recent call last):\r\n  File \"/tmp/97438350-908D-4EB3-BFD1-D0EAA667A6BC/fruitstrap_45d8292c5b626ffd61159c7a10a448cf19d91c50.py\", line 25, in connect_command\r\n    process = lldb.target.ConnectRemote(listener, connect_url, None, error)\r\nAttributeError: 'NoneType' object has no attribute 'ConnectRemote'\r\nTraceback (most recent call last):\r\n  File \"/tmp/97438350-908D-4EB3-BFD1-D0EAA667A6BC/fruitstrap_45d8292c5b626ffd61159c7a10a448cf19d91c50.py\", line 45, in run_command\r\n    lldb.target.modules[0].SetPlatformFileSpec(lldb.SBFileSpec(device_app))\r\nAttributeError: 'NoneType' object has no attribute 'modules'\r\nTraceback (most recent call last):\r\n  File \"/tmp/97438350-908D-4EB3-BFD1-D0EAA667A6BC/fruitstrap_45d8292c5b626ffd61159c7a10a448cf19d91c50.py\", line 74, in safequit_command\r\n    process = lldb.target.process\r\nAttributeError: 'NoneType' object has no attribute 'process'\r\n--------------------------------------------------------------------------------------------------------------------------------------------\r\n",
    "closed_at": "2020-09-30T23:47:53Z",
    "comment_data": [
        {
            "author_association": "NONE",
            "body": "# AUTO-GENERATED - DO NOT MODIFYimport time\r\nimport os\r\nimport sys\r\nimport shlex\r\nimport lldb\r\n\r\nlistener = None\r\nstartup_error = lldb.SBError()\r\n\r\ndef connect_command(debugger, command, result, internal_dict):\r\n    # These two are passed in by the script which loads us\r\n    connect_url = internal_dict['fruitstrap_connect_url']\r\n    error = lldb.SBError()\r\n    \r\n    # We create a new listener here and will use it for both target and the process.\r\n    # It allows us to prevent data races when both our code and internal lldb code\r\n    # try to process STDOUT/STDERR messages\r\n    global listener\r\n    listener = lldb.SBListener('iosdeploy_listener')\r\n    \r\n    listener.StartListeningForEventClass(debugger,\r\n                                            lldb.SBTarget.GetBroadcasterClassName(),\r\n                                            lldb.SBProcess.eBroadcastBitStateChanged | lldb.SBProcess.eBroadcastBitSTDOUT | lldb.SBProcess.eBroadcastBitSTDERR)\r\n    \r\n    process = lldb.target.ConnectRemote(listener, connect_url, None, error)\r\n\r\n    # Wait for connection to succeed\r\n    events = []\r\n    state = (process.GetState() or lldb.eStateInvalid)\r\n    while state != lldb.eStateConnected:\r\n        event = lldb.SBEvent()\r\n        if listener.WaitForEvent(1, event):\r\n            state = process.GetStateFromEvent(event)\r\n            events.append(event)\r\n        else:\r\n            state = lldb.eStateInvalid\r\n\r\n    # Add events back to queue, otherwise lldb freezes\r\n    for event in events:\r\n        listener.AddEvent(event)\r\n\r\ndef run_command(debugger, command, result, internal_dict):\r\n    device_app = internal_dict['fruitstrap_device_app']\r\n    args = command.split('--',1)\r\n    lldb.target.modules[0].SetPlatformFileSpec(lldb.SBFileSpec(device_app))\r\n    args_arr = []\r\n    if len(args) > 1:\r\n        args_arr = shlex.split(args[1])\r\n    args_arr = args_arr + shlex.split('--enable-dart-profiling --enable-service-port-fallback --disable-service-auth-codes --observatory-port=64300 --start-paused --enable-checked-mode --verify-entry-points')\r\n\r\n    launchInfo = lldb.SBLaunchInfo(args_arr)\r\n    global listener\r\n    launchInfo.SetListener(listener)\r\n    \r\n    #This env variable makes NSLog, CFLog and os_log messages get mirrored to stderr\r\n    #https://stackoverflow.com/a/39581193 \r\n    launchInfo.SetEnvironmentEntries(['OS_ACTIVITY_DT_MODE=enable'], True)\r\n\r\n    envs_arr = []\r\n    if len(args) > 1:\r\n        envs_arr = shlex.split(args[1])\r\n    envs_arr = envs_arr + shlex.split('')\r\n    launchInfo.SetEnvironmentEntries(envs_arr, True)\r\n    \r\n    lldb.target.Launch(launchInfo, startup_error)\r\n    lockedstr = ': Locked'\r\n    if lockedstr in str(startup_error):\r\n       print('\\nDevice Locked\\n')\r\n       os._exit(254)\r\n    else:\r\n       print(str(startup_error))\r\n\r\ndef safequit_command(debugger, command, result, internal_dict):\r\n    process = lldb.target.process\r\n    state = process.GetState()\r\n    if state == lldb.eStateRunning:\r\n        process.Detach()\r\n        os._exit(0)\r\n    elif state > lldb.eStateRunning:\r\n        os._exit(state)\r\n    else:\r\n        print('\\nApplication has not been launched\\n')\r\n        os._exit(1)\r\n\r\ndef autoexit_command(debugger, command, result, internal_dict):\r\n    global listener\r\n    process = lldb.target.process\r\n    if not startup_error.Success():\r\n        print('\\nPROCESS_NOT_STARTED\\n')\r\n        os._exit(254)\r\n\r\n    output_path = internal_dict['fruitstrap_output_path']\r\n    out = None\r\n    if output_path:\r\n        out = open(output_path, 'w')\r\n\r\n    error_path = internal_dict['fruitstrap_error_path']\r\n    err = None\r\n    if error_path:\r\n        err = open(error_path, 'w')\r\n\r\n    detectDeadlockTimeout = 0\r\n    printBacktraceTime = time.time() + detectDeadlockTimeout if detectDeadlockTimeout > 0 else None\r\n    \r\n    # This line prevents internal lldb listener from processing STDOUT/STDERR messages. Without it, an order of log writes is incorrect sometimes\r\n    debugger.GetListener().StopListeningForEvents(process.GetBroadcaster(), lldb.SBProcess.eBroadcastBitSTDOUT | lldb.SBProcess.eBroadcastBitSTDERR )\r\n\r\n    event = lldb.SBEvent()\r\n    \r\n    def ProcessSTDOUT():\r\n        stdout = process.GetSTDOUT(1024)\r\n        while stdout:\r\n            if out:\r\n                out.write(stdout)\r\n            else:\r\n                sys.stdout.write(stdout)\r\n            stdout = process.GetSTDOUT(1024)\r\n\r\n    def ProcessSTDERR():\r\n        stderr = process.GetSTDERR(1024)\r\n        while stderr:\r\n            if err:\r\n                err.write(stderr)\r\n            else:\r\n                sys.stdout.write(stderr)\r\n            stderr = process.GetSTDERR(1024)\r\n\r\n    def CloseOut():\r\n        if (out):\r\n            out.close()\r\n        if (err):\r\n            err.close()\r\n    \r\n    while True:\r\n        if listener.WaitForEvent(1, event) and lldb.SBProcess.EventIsProcessEvent(event):\r\n            state = lldb.SBProcess.GetStateFromEvent(event)\r\n            type = event.GetType()\r\n        \r\n            if type & lldb.SBProcess.eBroadcastBitSTDOUT:\r\n                ProcessSTDOUT()\r\n        \r\n            if type & lldb.SBProcess.eBroadcastBitSTDERR:\r\n                ProcessSTDERR()\r\n    \r\n        else:\r\n            state = process.GetState()\r\n\r\n        if state != lldb.eStateRunning:\r\n            # Let's make sure that we drained our streams before exit\r\n            ProcessSTDOUT()\r\n            ProcessSTDERR()\r\n\r\n        if state == lldb.eStateExited:\r\n            sys.stdout.write( '\\nPROCESS_EXITED\\n' )\r\n            CloseOut()\r\n            os._exit(process.GetExitStatus())\r\n        elif printBacktraceTime is None and state == lldb.eStateStopped:\r\n            sys.stdout.write( '\\nPROCESS_STOPPED\\n' )\r\n            debugger.HandleCommand('bt')\r\n            CloseOut()\r\n            os._exit(254)\r\n        elif state == lldb.eStateCrashed:\r\n            sys.stdout.write( '\\nPROCESS_CRASHED\\n' )\r\n            debugger.HandleCommand('bt')\r\n            CloseOut()\r\n            os._exit(254)\r\n        elif state == lldb.eStateDetached:\r\n            sys.stdout.write( '\\nPROCESS_DETACHED\\n' )\r\n            CloseOut()\r\n            os._exit(254)\r\n        elif printBacktraceTime is not None and time.time() >= printBacktraceTime:\r\n            printBacktraceTime = None\r\n            sys.stdout.write( '\\nPRINT_BACKTRACE_TIMEOUT\\n' )\r\n            debugger.HandleCommand('process interrupt')\r\n            debugger.HandleCommand('bt all')\r\n            debugger.HandleCommand('continue')\r\n            printBacktraceTime = time.time() + 5\r\n",
            "created_at": "2020-09-25T05:06:51Z",
            "html_url": "https://github.com/flutter/flutter-intellij/issues/4887#issuecomment-698722359",
            "id": 698722359,
            "issue_url": "https://api.github.com/repos/flutter/flutter-intellij/issues/4887",
            "node_id": "MDEyOklzc3VlQ29tbWVudDY5ODcyMjM1OQ==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/issues/comments/698722359/reactions"
            },
            "updated_at": "2020-09-25T05:07:16Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/issues/comments/698722359",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/17023204?v=4",
                "events_url": "https://api.github.com/users/houziyu/events{/privacy}",
                "followers_url": "https://api.github.com/users/houziyu/followers",
                "following_url": "https://api.github.com/users/houziyu/following{/other_user}",
                "gists_url": "https://api.github.com/users/houziyu/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/houziyu",
                "id": 17023204,
                "login": "houziyu",
                "node_id": "MDQ6VXNlcjE3MDIzMjA0",
                "organizations_url": "https://api.github.com/users/houziyu/orgs",
                "received_events_url": "https://api.github.com/users/houziyu/received_events",
                "repos_url": "https://api.github.com/users/houziyu/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/houziyu/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/houziyu/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/houziyu"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "I believe this is a dup of https://github.com/flutter/flutter/issues/60072",
            "created_at": "2020-09-30T23:47:53Z",
            "html_url": "https://github.com/flutter/flutter-intellij/issues/4887#issuecomment-701704554",
            "id": 701704554,
            "issue_url": "https://api.github.com/repos/flutter/flutter-intellij/issues/4887",
            "node_id": "MDEyOklzc3VlQ29tbWVudDcwMTcwNDU1NA==",
            "performed_via_github_app": null,
            "reactions": {
                "+1": 0,
                "-1": 0,
                "confused": 0,
                "eyes": 0,
                "heart": 0,
                "hooray": 0,
                "laugh": 0,
                "rocket": 0,
                "total_count": 0,
                "url": "https://api.github.com/repos/flutter/flutter-intellij/issues/comments/701704554/reactions"
            },
            "updated_at": "2020-09-30T23:47:53Z",
            "url": "https://api.github.com/repos/flutter/flutter-intellij/issues/comments/701704554",
            "user": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            }
        }
    ],
    "comments": 2,
    "comments_url": "https://api.github.com/repos/flutter/flutter-intellij/issues/4887/comments",
    "created_at": "2020-09-25T05:03:34Z",
    "event_data": [
        {
            "actor": {
                "avatar_url": "https://avatars.githubusercontent.com/u/8518285?v=4",
                "events_url": "https://api.github.com/users/stevemessick/events{/privacy}",
                "followers_url": "https://api.github.com/users/stevemessick/followers",
                "following_url": "https://api.github.com/users/stevemessick/following{/other_user}",
                "gists_url": "https://api.github.com/users/stevemessick/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/stevemessick",
                "id": 8518285,
                "login": "stevemessick",
                "node_id": "MDQ6VXNlcjg1MTgyODU=",
                "organizations_url": "https://api.github.com/users/stevemessick/orgs",
                "received_events_url": "https://api.github.com/users/stevemessick/received_events",
                "repos_url": "https://api.github.com/users/stevemessick/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/stevemessick/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/stevemessick/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/stevemessick"
            },
            "commit_id": null,
            "commit_url": null,
            "created_at": "2020-09-30T23:47:53Z",
            "event": "closed",
            "id": 3826873286,
            "node_id": "MDExOkNsb3NlZEV2ZW50MzgyNjg3MzI4Ng==",
            "performed_via_github_app": null,
            "state_reason": null,
            "url": "https://api.github.com/repos/flutter/flutter-intellij/issues/events/3826873286"
        }
    ],
    "events_url": "https://api.github.com/repos/flutter/flutter-intellij/issues/4887/events",
    "html_url": "https://github.com/flutter/flutter-intellij/issues/4887",
    "id": 708642929,
    "labels": [],
    "labels_url": "https://api.github.com/repos/flutter/flutter-intellij/issues/4887/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU3MDg2NDI5Mjk=",
    "number": 4887,
    "performed_via_github_app": null,
    "reactions": {
        "+1": 0,
        "-1": 0,
        "confused": 0,
        "eyes": 0,
        "heart": 0,
        "hooray": 0,
        "laugh": 0,
        "rocket": 0,
        "total_count": 0,
        "url": "https://api.github.com/repos/flutter/flutter-intellij/issues/4887/reactions"
    },
    "repository_url": "https://api.github.com/repos/flutter/flutter-intellij",
    "state": "closed",
    "state_reason": "completed",
    "timeline_url": "https://api.github.com/repos/flutter/flutter-intellij/issues/4887/timeline",
    "title": "Fluent Xcode cannot synchronize setup files",
    "updated_at": "2020-09-30T23:47:53Z",
    "url": "https://api.github.com/repos/flutter/flutter-intellij/issues/4887",
    "user": {
        "avatar_url": "https://avatars.githubusercontent.com/u/17023204?v=4",
        "events_url": "https://api.github.com/users/houziyu/events{/privacy}",
        "followers_url": "https://api.github.com/users/houziyu/followers",
        "following_url": "https://api.github.com/users/houziyu/following{/other_user}",
        "gists_url": "https://api.github.com/users/houziyu/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/houziyu",
        "id": 17023204,
        "login": "houziyu",
        "node_id": "MDQ6VXNlcjE3MDIzMjA0",
        "organizations_url": "https://api.github.com/users/houziyu/orgs",
        "received_events_url": "https://api.github.com/users/houziyu/received_events",
        "repos_url": "https://api.github.com/users/houziyu/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/houziyu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/houziyu/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/houziyu"
    }
}